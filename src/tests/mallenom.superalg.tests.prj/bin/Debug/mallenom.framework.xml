<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mallenom.framework</name>
    </assembly>
    <members>
        <member name="T:Mallenom.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Mallenom.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Mallenom.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements
            </summary>
        </member>
        <member name="T:Mallenom.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements
            </summary>
        </member>
        <member name="T:Mallenom.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Mallenom.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Mallenom.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:Mallenom.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Mallenom.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Mallenom.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Mallenom.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Mallenom.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Mallenom.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Mallenom.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Mallenom.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Mallenom.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:Mallenom.MeansImplicitUseAttribute"/> or <see cref="T:Mallenom.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Mallenom.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Mallenom.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Mallenom.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Mallenom.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~)
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Mallenom.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection
            </summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection</summary>
        </member>
        <member name="T:Mallenom.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:Mallenom.AssertionConditionAttribute"/> attribute
            </summary>
        </member>
        <member name="T:Mallenom.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:Mallenom.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:Mallenom.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value</summary>
        </member>
        <member name="T:Mallenom.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:Mallenom.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:Mallenom.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:Mallenom.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:Mallenom.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be
            treated as <c>ItemsControl</c>-derived type, to enable inner  items <c>DataContext</c>
            type resolve.
            </summary>
        </member>
        <member name="T:Mallenom.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Mallenom.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:Mallenom.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:Mallenom.Assert">
            <summary>A static class for verifying assumptions.</summary>
        </member>
        <member name="T:Mallenom.Assert.EvaluateFunction">
            <summary>A function signature for Assert.Evaluate.</summary>
        </member>
        <member name="T:Mallenom.Assert.ImplicationFunction">
            <summary>A function signature for Assert.Implies.</summary>
            <returns>Returns the truth of a predicate.</returns>
        </member>
        <member name="M:Mallenom.Assert.Evaluate(Mallenom.Assert.EvaluateFunction)">
            <summary>
            Executes the specified argument.
            </summary>
            <param name="argument">The function to execute.</param>
        </member>
        <member name="M:Mallenom.Assert.AreEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are equal.  The assertion fails if they are not.
            </summary>
            <typeparam name="T">The generic type to compare for equality.</typeparam>
            <param name="expected">The first generic type data to compare.  This is is the expected value.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are not equal.  The assertion fails if they are.
            </summary>
            <typeparam name="T">The generic type to compare for inequality.</typeparam>
            <param name="notExpected">The first generic type data to compare.  This is is the value that's not expected.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Implies(System.Boolean,System.Boolean)">
            <summary>
            Verifies that if the specified condition is true, then so is the result.
            The assertion fails if the condition is true but the result is false.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="result">
            A second Boolean statement.  If the first was true then so must this be.
            If the first statement was false then the value of this is ignored.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Implies(System.Boolean,Mallenom.Assert.ImplicationFunction)">
            <summary>
            Lazy evaluation overload.  Verifies that if a condition is true, then so is a secondary value.
            </summary>
            <param name="condition">The conditional value.</param>
            <param name="result">A function to be evaluated for truth if the condition argument is true.</param>
            <remarks>
            This overload only evaluates the result if the first condition is true.
            </remarks>
        </member>
        <member name="M:Mallenom.Assert.IsNeitherNullNorEmpty(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not empty.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Mallenom.Assert.IsNeitherNullNorWhitespace(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not purely whitespace.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Mallenom.Assert.IsNotNull``1(``0)">
            <summary>
            Verifies the specified value is not null.  The assertion fails if it is.
            </summary>
            <typeparam name="T">The generic reference type.</typeparam>
            <param name="value">The value to check for nullness.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsFalse(System.Boolean)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <param name="message">The message to display if the condition is <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsTrue(System.Boolean)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <param name="message">The message to write in case the condition is <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Fail">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Fail(System.String)">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <param name="message">The message to display if this function is executed.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsNull``1(``0)">
            <summary>
            Verifies that the specified object is null.  The assertion fails if it is not.
            </summary>
            <param name="item">The item to verify is null.</param>
        </member>
        <member name="M:Mallenom.Assert.BoundedDoubleInc(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
        </member>
        <member name="M:Mallenom.Assert.BoundedInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundExclusive">The upper bound exclusive value.</param>
        </member>
        <member name="M:Mallenom.Assert.IsApartmentState(System.Threading.ApartmentState)">
            <summary>
            Verify the current thread's apartment state is what's expected.  The assertion fails if it isn't
            </summary>
            <param name="expectedState">
            The expected apartment state for the current thread.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="T:Mallenom.Verify">
            <summary>
            A static class for retail validated assertions.
            Instead of breaking into the debugger an exception is thrown.
            </summary>
        </member>
        <member name="T:Mallenom.Verify.Argument">
            <summary>Argument verification methods.</summary>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNeitherNullNorEmpty(System.String,System.String)">
            <summary>Ensure that a string argument is neither <c>null</c> nor empty.</summary>
            <param name="value">The string to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsNeitherNullNorEmpty(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNeitherNullNorWhitespace(System.String,System.String)">
            <summary>Ensure that a string argument is neither <c>null</c> nor does it consist only of whitespace.</summary>
            <param name="value">The string to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is empty or consists of whitespace only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsNeitherNullNorWhitespace(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotDefault``1(``0,System.String)">
            <summary>Verifies that an argument is not default value.</summary>
            <typeparam name="T">Type of the object to validate. Must be a value-type.</typeparam>
            <param name="value">Value to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> equals <c>default(T)</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotDefault(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNull``1(``0,System.String)">
            <summary>Verifies that an argument is not <c>null</c>.</summary>
            <typeparam name="T">Type of the object to validate. Must be a reference-type.</typeparam>
            <param name="value">The object to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(object argument)
            {
            	Verify.Argument.IsNotNull(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNull``1(``0,System.String)">
            <summary>Verifies that an argument is <c>null</c>.</summary>
            <typeparam name="T">Type of the object to validate. Must be a reference-type.</typeparam>
            <param name="value">The object to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> != <c>null</c>.
            </exception>
            <example><code>
            void Method(object argument)
            {
            	Verify.Argument.IsNull(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.SByte,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int16,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int32,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int64,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Single,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Double,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Decimal,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.SByte,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int16,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int32,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int64,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Single,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Double,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Decimal,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.SByte,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Byte,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(byte argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int16,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int32,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int64,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Single,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Double,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Decimal,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsInRange(argument &gt; 4, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsInRange(argument &gt; 4, "argument", "Must be greater than 4.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int16,System.Int16,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int32,System.Int32,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int64,System.Int64,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that argument equals expected value. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> != <paramref name="expected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsEqualTo(10, argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Verifies that argument equals expected value. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> != <paramref name="expected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsEqualTo(10, argument, "argument", "Must be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that argument is not of unexpected value. Throws an <see cref="T:System.ArgumentException"/> if it is.
            </summary>
            <param name="notExpected">Invalid value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> == <paramref name="notExpected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotEqualTo(10, argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Verifies that argument is not of unexpected value. Throws an <see cref="T:System.ArgumentException"/> if it is.
            </summary>
            <param name="notExpected">Invalid value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> == <paramref name="notExpected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotEqualTo(10, argument, "argument", "Must not be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsTrue(argument.Length == 10, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsTrue(argument.Length == 10, "argument", "String length must be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsFalse(argument == 10, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsFalse(argument == 10, "argument", "Value must not be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.HasNoNullItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Verifies that sequence contains no <c>null</c> items.
            Throws an <see cref="T:System.ArgumentException"/> if contains.
            </summary>
            <param name="sequence">Sequence to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sequence"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sequence"/> contains <c>null</c> items.
            </exception>
            <example><code>
            void Method(object[] values)
            {
            	Verify.Argument.HasNoNullItems(values, "values");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.FileExists(System.String,System.String)">
            <summary>Verifies that argument is an existing file.</summary>
            <param name="filePath">File path.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            File does not exist or <paramref name="filePath"/> is not a valid path.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.FileExists(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.DirectoryExists(System.String,System.String)">
            <summary>Verifies that argument is an existing directory.</summary>
            <param name="directoryPath">Directory path.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="directoryPath"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Directory does not exist or <paramref name="directoryPath"/> is not a valid path.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.DirectoryExists(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsAbsoluteUri(System.Uri,System.String)">
            <summary>
            Verifies that the specified URI is absolute.
            </summary>
            <param name="uri">URI to verify.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uri"/> is relative.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.ImplementsInterface(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter implements specified interface.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="interfaceType">Interface type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> does not implement specified interface.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfExactType(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter is of specified type.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="requiredType">Expected type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfExactType``1(System.Object,System.String)">
            <summary>Verifies that parameter is of specified type.</summary>
            <typeparam name="T">Expected type.</typeparam>
            <param name="parameter">Object to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfType(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter is of specified type or type which is based on specified type.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="requiredType">Expected type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfType``1(System.Object,System.String)">
            <summary>Verifies that parameter is of specified type or type which is based on specified type.</summary>
            <typeparam name="T">Expected type.</typeparam>
            <param name="parameter">Object to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="T:Mallenom.Verify.State">
            <summary>Program, thread and object state verification methods.</summary>
        </member>
        <member name="M:Mallenom.Verify.State.IsApartmentState(System.Threading.ApartmentState,System.String)">
            <summary>Ensure that the current thread's apartment state is what's expected.</summary>
            <param name="requiredState">The required apartment state for the current thread.</param>
            <param name="message">The message string for the exception to be thrown if the state is invalid.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the calling thread's apartment state is not the same as the <paramref name="requiredState"/>.
            </exception>
            <example><code>
            void Method()
            {
            	Verify.State.IsApartmentState(ApartmentState.STA, "Must run on STA thread.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.State.IsApartmentState(System.Threading.ApartmentState)">
            <summary>Ensure that the current thread's apartment state is what's expected.</summary>
            <param name="requiredState">The required apartment state for the current thread.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the calling thread's apartment state is not the same as the <paramref name="requiredState"/>.
            </exception>
            <example><code>
            void Method()
            {
            	Verify.State.IsApartmentState(ApartmentState.STA);
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.State.IsTrue(System.Boolean)">
            <summary>
            Verifies the specified statement is <c>true</c>true. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="message">The message to include in the <see cref="T:System.InvalidOperationException"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsFalse(System.Boolean)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="message">The message to include in the <see cref="T:System.InvalidOperationException"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsNotDisposed(System.Object,System.Boolean)">
            <summary>
            Verifies the specified instance is not disposed. Throws an <see cref="T:System.ObjectDisposedException"/> if it is.
            </summary>
            <param name="instance">Object instance.</param>
            <param name="isDisposed">Instance disposed status.</param>
            <exception cref="T:System.ObjectDisposedException">
            <paramref name="isDisposed"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsNotDisposed(System.Object,System.Boolean,System.String)">
            <summary>
            Verifies the specified instance is not disposed. Throws an <see cref="T:System.ObjectDisposedException"/> if it is.
            </summary>
            <param name="instance">Object instance.</param>
            <param name="isDisposed">Instance disposed status.</param>
            <param name="message">The message to include in the <see cref="T:System.ObjectDisposedException"/>.</param>
            <exception cref="T:System.ObjectDisposedException">
            <paramref name="isDisposed"/> == <c>true</c>.
            </exception>
        </member>
        <member name="T:Mallenom.Annotations.AssemblyVcsCommitIdAttribute">
            <summary>Атрибут для указания идентификатора коммита в VCS.</summary>
        </member>
        <member name="F:Mallenom.Annotations.AssemblyVcsCommitIdAttribute._commitId">
            <summary>Идентификатор коммита.</summary>
        </member>
        <member name="M:Mallenom.Annotations.AssemblyVcsCommitIdAttribute.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Annotations.AssemblyVcsCommitIdAttribute"/>.</summary>
            <param name="commitId">Идентификатор коммита.</param>
        </member>
        <member name="P:Mallenom.Annotations.AssemblyVcsCommitIdAttribute.CommitId">
            <summary>Возвращает дату и время коммита.</summary>
            <value>Дата и время коммита. Если не определена, то <c>null</c>.</value>
        </member>
        <member name="T:Mallenom.Annotations.AssemblyVcsCommitDateAttribute">
            <summary>Атрибут для указания даты коммита в VCS.</summary>
        </member>
        <member name="M:Mallenom.Annotations.AssemblyVcsCommitDateAttribute.#ctor(System.String)">
            <summary>Создание атрибута.</summary>
            <param name="commitDate">Строка с датой в формате ISO.</param>
        </member>
        <member name="P:Mallenom.Annotations.AssemblyVcsCommitDateAttribute.CommitDate">
            <summary>Возвращает дату и время коммита.</summary>
            <value>Дата и время коммита. Если не определена, то <c>null</c>.</value>
        </member>
        <member name="T:Mallenom.Annotations.AssemblyCompileDateAttribute">
            <summary>Атрибут для указания даты и времени компиляции сборки.</summary>
        </member>
        <member name="F:Mallenom.Annotations.AssemblyCompileDateAttribute._compileDate">
            <summary>Дата и время компиляции сорки.</summary>
        </member>
        <member name="M:Mallenom.Annotations.AssemblyCompileDateAttribute.#ctor(System.DateTime)">
            <summary>Создание <see cref="T:Mallenom.Annotations.AssemblyCompileDateAttribute"/>.</summary>
            <param name="compileDate">Дата и время компиляции.</param>
        </member>
        <member name="M:Mallenom.Annotations.AssemblyCompileDateAttribute.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Annotations.AssemblyCompileDateAttribute"/>.</summary>
            <param name="compileDate">Строка с датой в формате ISO.</param>
        </member>
        <member name="P:Mallenom.Annotations.AssemblyCompileDateAttribute.CompileDate">
            <summary>Возвращает дату и время компиляции. Если не определено, то <c>null</c>.</summary>
            <value>Дата и время компиляции. Если не определено, то <c>null</c>.</value>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationDirectoryTreeReportPart">
            <summary>Записывает в отчет структуру директории приложения.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationDirectoryTreeReportPart.#ctor">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationDirectoryTreeReportPart"/>.</summary>
        </member>
        <member name="T:Mallenom.AppServices.CompositeCrashReportComposer">
            <summary>Составной генератор отчета об ошибке.</summary>
        </member>
        <member name="F:Mallenom.AppServices.CompositeCrashReportComposer._crashReportComposers">
            <summary>Генераторы отчета об ошибке.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CompositeCrashReportComposer.#ctor(System.Collections.Generic.IEnumerable{Mallenom.AppServices.ICrashReportComposer})">
            <summary>Создание <see cref="T:Mallenom.AppServices.CompositeCrashReportComposer"/>.</summary>
            <param name="crashReportComposers">Генераторы отчета об ошибке.</param>
        </member>
        <member name="M:Mallenom.AppServices.CompositeCrashReportComposer.Compose(System.Exception,System.IO.TextWriter)">
            <summary>Записывыает отчет об ошибке.</summary>
            <param name="exception">Исключение.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> == <c>null</c> или
            <paramref name="textWriter"/> == <c>null</c>.
            </exception>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationConfiguration">
            <summary>Конфигурация приложения.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfiguration.#ctor(System.Collections.Generic.IEnumerable{Mallenom.AppServices.IApplicationConfigurationFile})">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationConfiguration"/>.</summary>
            <param name="files">Конфигурационные файлы приложения.</param>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfiguration.Files">
            <summary>Возвращает список конфигурационных файлов.</summary>
            <value>Список конфигурационных файлов.</value>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationConfigurationExtensions">
            <summary>Расширения для <see cref="T:Mallenom.AppServices.IApplicationConfiguration"/>.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationExtensions.Load(Mallenom.AppServices.IApplicationConfiguration,System.Predicate{Mallenom.AppServices.IApplicationConfigurationFile})">
            <summary>Загружает указанные части конфигурации.</summary>
            <param name="configuration">Конфигурация приложения.</param>
            <param name="filter">Фильтр загружаемых файлов конфигурации.</param>
            <returns>Результат загрузки файлов конфигурации.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationExtensions.Save(Mallenom.AppServices.IApplicationConfiguration,System.Predicate{Mallenom.AppServices.IApplicationConfigurationFile})">
            <summary>Сохраняет указанные части конфигурации.</summary>
            <param name="configuration">Конфигурация приложения.</param>
            <param name="filter">Фильтр сохраняемых файлов конфигурации.</param>
            <returns>Сохраненные части конфигурации.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationExtensions.BackupTo(Mallenom.AppServices.IApplicationConfiguration,System.IO.Stream,System.Predicate{Mallenom.AppServices.IApplicationConfigurationFile})">
            <summary>Создает резервную копию конфигурации программы.</summary>
            <param name="configuration">Конфигурация приложения.</param>
            <param name="outputStream">Поток для записи резервной копии конфигурации.</param>
            <param name="filter">Фильтр резервируемых файлов конфигурации.</param>
            <returns>Результаты сохранения файлов конфигурации.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationExtensions.RestoreFrom(Mallenom.AppServices.IApplicationConfiguration,System.IO.Stream,System.Predicate{Mallenom.AppServices.IApplicationConfigurationFile})">
            <summary>Восстанавливает конфигурацию программы.</summary>
            <param name="configuration">Конфигурация приложения.</param>
            <param name="sourceStream">Поток с резервной копией конфигурации.</param>
            <param name="filter">Фильтр восстанавливаемых файлов конфигурации.</param>
            <returns>Результаты загрузки восстановленных файлов конфигурации.</returns>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationConfigurationLoadResults">
            <summary>Результаты загрузки конфигурации приложения.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationLoadResults.#ctor(System.Collections.Generic.IReadOnlyDictionary{Mallenom.AppServices.IApplicationConfigurationFile,Mallenom.AppServices.ConfigurationFileLoadResult})">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationConfigurationLoadResults"/>.</summary>
            <param name="results">Словарь результатов загрузки файлов конфигурации приложения.</param>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationLoadResults.Item(System.String)">
            <summary>Возвращает результат загрузки указанного файла конфигурации приложения.</summary>
            <param name="fileId">Идентификатор файла приложения.</param>
            <returns>Результат загрузки файла конфигурации приложения.</returns>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationLoadResults.Item(Mallenom.AppServices.IApplicationConfigurationFile)">
            <summary>Возвращает результат загрузки указанного файла конфигурации приложения.</summary>
            <param name="file">Файл конфигурации приложения.</param>
            <returns>Результат загрузки файла конфигурации приложения.</returns>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationConfigurationSaveResults">
            <summary>Результаты сохранения конфигурации приложения.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationSaveResults.#ctor(System.Collections.Generic.IReadOnlyDictionary{Mallenom.AppServices.IApplicationConfigurationFile,Mallenom.AppServices.ConfigurationFileSaveResult})">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationConfigurationSaveResults"/>.</summary>
            <param name="results">Словарь результатов сохранения файлов конфигурации приложения.</param>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationSaveResults.Item(System.String)">
            <summary>Возвращает результат сохранения указанного файла конфигурации приложения.</summary>
            <param name="fileId">Идентификатор файла приложения.</param>
            <returns>Результат сохранения файла конфигурации приложения.</returns>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationSaveResults.Item(Mallenom.AppServices.IApplicationConfigurationFile)">
            <summary>Возвращает результат сохранения указанного файла конфигурации приложения.</summary>
            <param name="file">Файл конфигурации приложения.</param>
            <returns>Результат сохранения файла конфигурации приложения.</returns>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationConfigurationXmlFile">
            <summary>Конфигурационный XML-файл приложения.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationConfigurationXmlFile.Log">
            <summary>Лог.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationXmlFile.#ctor(System.String,Mallenom.AppServices.IApplicationProfileDirectory,System.String)">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationConfigurationXmlFile"/>.</summary>
            <param name="id">Идентификатор файла.</param>
            <param name="directory">Директория, в кторой находится файл конфигурации приложения.</param>
            <param name="fileName">Имя конфигурационного файла приложения.</param>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.Id">
            <summary>Возвращает идентификтор конфигурационного файла приложения.</summary>
            <value>Идентификатор конфигурационного файла приложения.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.Directory">
            <summary>Возвращает директорию, в которй находится файл конфигурации приложения.</summary>
            <value>Директория, в кторой находится файл конфигурации приложения.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.FileName">
            <summary>Возвращает имя конфигурационного файла приложения.</summary>
            <value>Имя конфигурационного файла приложения.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.FullName">
            <summary>Возвращает полное имя файла конфигурации.</summary>
            <value>Полное имя файла конфигурации.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.XmlReaderContext">
            <summary>Возвращает контекст XML-читателя.</summary>
            <value>Контекст XML-читателя.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.XmlWriterContext">
            <summary>Возвращает контекст XML-писателя.</summary>
            <value>Контекст XML-писателя.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.RootSectionName">
            <summary>Возвращает имя корневой секции.</summary>
            <value>Имя корневой секции.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.LogConfigurationChanges">
            <summary>Возвращает режим логгирования изменений в файле.</summary>
            <value><c>true</c> - изменения логгируются; иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.Loaded">
            <summary>Возвращает флаг загрузки файла.</summary>
            <value><c>true</c>, если файл был загружен, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.CanLoad">
            <summary>Возвращает флаг возможности загрузки файла.</summary>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationConfigurationXmlFile.CanSave">
            <summary>Возвращает флаг возможности сохранения файла.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationXmlFile.LoadDefaultsCore">
            <summary>Загружает конфигурацию по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationXmlFile.LoadCore(Mallenom.Storage.IObjectStorageReader)">
            <summary>Загружает конфигурацию.</summary>
            <param name="reader">Объект для чтения конфигурации.</param>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationXmlFile.SaveCore(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Сохраняет конфигурацию.</summary>
            <param name="writer">Объект для записи конфигурации.</param>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationXmlFile.LoadDefaultsSafe(System.Boolean)">
            <summary>Загружает значения по умолчанию с обработкой ошибок.</summary>
            <param name="log">Вывести сооьщение в лог в случае ошибки.</param>
            <returns><c>true</c>, если значения по умолчанию успешно загружены, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationXmlFile.LoadDefauts">
            <summary>Загружает значения по умолчанию.</summary>
            <returns>Результат операции загрузки.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationXmlFile.Load">
            <summary>Читает конфигурацию из файла.</summary>
            <returns>Результат операции загрузки.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationConfigurationXmlFile.Save">
            <summary>Сохраняет конфигурацию в файл.</summary>
            <remarks>
            Осуществляет запись во временный файл.
            Создает резервную копию заменяемого файла.
            </remarks>
        </member>
        <member name="T:Mallenom.AppServices.ConfigurationFileLoadResult">
            <summary>Результат загрузки конфигурационного файла.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ConfigurationFileLoadResult.NotAvailable">
            <summary>Загрузка файла была невозможна.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ConfigurationFileLoadResult.Loaded">
            <summary>Конфигурационный файл был успешно загружен.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ConfigurationFileLoadResult.LoadedDefaults">
            <summary>Была загружена конфигурация по умолчанию.</summary>
            <remarks>
            Либо конфигурационного файла не было,
            либо при его загрузке возникли проблемы.
            </remarks>
        </member>
        <member name="T:Mallenom.AppServices.ConfigurationFileSaveResult">
            <summary>Результат сохранения конфигурационного файла.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ConfigurationFileSaveResult.NotAvailable">
            <summary>Сохранение файла было невозможно.</summary>
            <remarks>Возможно сервис, который генерирует конфигурацию, не ьыл инициализирован.</remarks>
        </member>
        <member name="F:Mallenom.AppServices.ConfigurationFileSaveResult.Saved">
            <summary>Конфигурационный файл сохранен.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ConfigurationFileSaveResult.Failed">
            <summary>При сохранении конфигурации произошла ошибка.</summary>
        </member>
        <member name="T:Mallenom.AppServices.IApplicationConfiguration">
            <summary>Конфигурация приложения.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationConfiguration.Files">
            <summary>Возвращает список конфигурационных файлов приложения.</summary>
            <value>Список конфигурационных файлов приложения.</value>
        </member>
        <member name="T:Mallenom.AppServices.IApplicationConfigurationFile">
            <summary>Конфигурационный файл приложения.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationConfigurationFile.Id">
            <summary>Возвращает идентификтор конфигурационного файла приложения.</summary>
            <value>Идентификатор конфигурационного файла приложения.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationConfigurationFile.Directory">
            <summary>Возвращает директорию, в которй находится файл конфигурации приложения.</summary>
            <value>Директория, в кторой находится файл конфигурации приложения.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationConfigurationFile.FileName">
            <summary>Возвращает имя конфигурационного файла приложения.</summary>
            <value>Имя конфигурационного файла приложения.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationConfigurationFile.FullName">
            <summary>Возвращает полное имя файла.</summary>
            <value>Полное имя файла.</value>
        </member>
        <member name="M:Mallenom.AppServices.IApplicationConfigurationFile.Load">
            <summary>Читает конфигурацию из файла.</summary>
            <returns>Результат операции.</returns>
        </member>
        <member name="M:Mallenom.AppServices.IApplicationConfigurationFile.Save">
            <summary>Сохраняет конфигурацию в файл.</summary>
            <returns>Результат операции.</returns>
        </member>
        <member name="T:Mallenom.AppServices.IParametersProvider`1">
            <summary>Провайдер значений параметров.</summary>
            <typeparam name="TParameters">Тип параметров.</typeparam>
        </member>
        <member name="E:Mallenom.AppServices.IParametersProvider`1.ParametersChanged">
            <summary>Параметры были изменены.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IParametersProvider`1.Defaults">
            <summary>Возвращает значения параметров по умолчанию.</summary>
            <value>Значения параметров по умолчанию.</value>
        </member>
        <member name="P:Mallenom.AppServices.IParametersProvider`1.Parameters">
            <summary>Возвращает текущие значения параметров.</summary>
            <value>Текущие значения параметров.</value>
        </member>
        <member name="T:Mallenom.AppServices.IParametersSerializer`1">
            <summary>Сериализатор параметров.</summary>
            <typeparam name="TParameters">Тип сериализуемых параметров.</typeparam>
        </member>
        <member name="M:Mallenom.AppServices.IParametersSerializer`1.Load(Mallenom.Storage.IObjectStorageReader)">
            <summary>Загружает значения параметров.</summary>
            <param name="reader">Объект для чтения параметров.</param>
            <returns>Загруженные параметры.</returns>
        </member>
        <member name="M:Mallenom.AppServices.IParametersSerializer`1.Save(`0,Mallenom.Storage.IObjectStorageWriter)">
            <summary>Сохраняет значения параметров.</summary>
            <param name="parameters">Сохраняемые параметры.</param>
            <param name="writer">Объект для записи значений параметров.</param>
        </member>
        <member name="T:Mallenom.AppServices.IParametersSource`1">
            <summary>Источник значений параметров.</summary>
            <typeparam name="TParameters">Тип параметров.</typeparam>
        </member>
        <member name="P:Mallenom.AppServices.IParametersSource`1.Parameters">
            <summary>Возвращает и устанавливает текущие значения параметров.</summary>
            <value>Текущие значения параметров.</value>
        </member>
        <member name="T:Mallenom.AppServices.ISerializableConfiguration">
            <summary>Сериализуемая конфигурация.</summary>
        </member>
        <member name="P:Mallenom.AppServices.ISerializableConfiguration.ConfigurationName">
            <summary>Возвращает имя конфигурации.</summary>
            <value>Имя конфигурации.</value>
        </member>
        <member name="P:Mallenom.AppServices.ISerializableConfiguration.ConfigurationGroup">
            <summary>Возвращает имя группы конфигурации.</summary>
            <value>Группа конфигурации.</value>
        </member>
        <member name="M:Mallenom.AppServices.ISerializableConfiguration.Save(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Сохранить конфигурацию.</summary>
            <param name="writer">Объект для записи конфигурации.</param>
        </member>
        <member name="M:Mallenom.AppServices.ISerializableConfiguration.Load(Mallenom.Storage.IObjectStorageReader)">
            <summary>Загрузить конфигурацию.</summary>
            <param name="reader">Объект для чтения конфигурации.</param>
        </member>
        <member name="M:Mallenom.AppServices.ISerializableConfiguration.SetDefaults">
            <summary>Установить значения параметров по умолчанию.</summary>
        </member>
        <member name="T:Mallenom.AppServices.RootApplicationConfigurationFile">
            <summary>Основной конфигурационный файл приложения.</summary>
        </member>
        <member name="F:Mallenom.AppServices.RootApplicationConfigurationFile.Log">
            <summary>Лог.</summary>
        </member>
        <member name="M:Mallenom.AppServices.RootApplicationConfigurationFile.ValidateConfigurations(System.Collections.Generic.IEnumerable{Mallenom.AppServices.ISerializableConfiguration})">
            <summary>Проверяет перечень конфигураций на валидность.</summary>
            <param name="configurations">Проверяемый перечень конфигураций.</param>
            <returns>Проверенный список конфигураций.</returns>
        </member>
        <member name="M:Mallenom.AppServices.RootApplicationConfigurationFile.#ctor(Mallenom.AppServices.IApplicationProfileDirectory,System.String,System.Collections.Generic.IEnumerable{Mallenom.AppServices.ISerializableConfiguration})">
            <summary>Создание <see cref="T:Mallenom.AppServices.RootApplicationConfigurationFile"/>.</summary>
            <param name="directory">Директория, в кторой находится файл конфигурации приложения.</param>
            <param name="fileName">Имя конфигурационного файла приложения.</param>
            <param name="configurations">Список конфигураций.</param>
        </member>
        <member name="P:Mallenom.AppServices.RootApplicationConfigurationFile.Configurations">
            <summary>Возвращает список конфигурационных модулей программы.</summary>
            <value>Список конфигураций модулей программы.</value>
        </member>
        <member name="P:Mallenom.AppServices.RootApplicationConfigurationFile.RootSectionName">
            <summary>Возвращает имя корневой секции.</summary>
            <value>Configuration</value>
        </member>
        <member name="P:Mallenom.AppServices.RootApplicationConfigurationFile.CanLoad">
            <summary>Возвращает флаг возможности загрузки файла.</summary>
        </member>
        <member name="M:Mallenom.AppServices.RootApplicationConfigurationFile.SetDefaultsSafe(Mallenom.AppServices.ISerializableConfiguration,System.Boolean)">
            <summary>Устанавливает значения параметров по умолчанию для указанной конфигурации с обработкой ошибок.</summary>
            <param name="configuration">Конфигурация, для которой будут установлены значения по умолчанию.</param>
            <param name="log">Вывести сообщение в лог в случае ошибки.</param>
        </member>
        <member name="M:Mallenom.AppServices.RootApplicationConfigurationFile.LoadCore(Mallenom.Storage.IObjectStorageReader)">
            <summary>Загружает конфигурацию.</summary>
            <param name="reader">Объект для чтения конфигурации.</param>
        </member>
        <member name="M:Mallenom.AppServices.RootApplicationConfigurationFile.SaveCore(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Сохраняет конфигурацию.</summary>
            <param name="writer">Объект для записи конфигурации.</param>
        </member>
        <member name="M:Mallenom.AppServices.RootApplicationConfigurationFile.LoadDefaultsCore">
            <summary>Загружает конфигурацию по умолчанию.</summary>
        </member>
        <member name="T:Mallenom.AppServices.SerializableConfiguration`1">
            <summary>Базовый класс конфигурации.</summary>
            <typeparam name="TParameters">Тип параметров.</typeparam>
        </member>
        <member name="F:Mallenom.AppServices.SerializableConfiguration`1._parameters">
            <summary>Текущие значения параметров.</summary>
        </member>
        <member name="E:Mallenom.AppServices.SerializableConfiguration`1.ParametersChanged">
            <summary>Параметры были изменены.</summary>
        </member>
        <member name="M:Mallenom.AppServices.SerializableConfiguration`1.OnParametersChanged(System.EventArgs)">
            <summary>Вызывается при изменении параметров.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.AppServices.SerializableConfiguration`1.#ctor(System.String,System.String,Mallenom.AppServices.IParametersSerializer{`0},`0)">
            <summary>Создание <see cref="T:Mallenom.AppServices.SerializableConfiguration`1"/>.</summary>
            <param name="configurationGroup">Группа конфигурации.</param>
            <param name="configurationName">Имя конфигурации.</param>
            <param name="serializer">Сериализатор значений параметров.</param>
            <param name="defaults">Значения параметров по умолчанию.</param>
        </member>
        <member name="P:Mallenom.AppServices.SerializableConfiguration`1.ConfigurationGroup">
            <summary>Возвращает имя группы конфигурации.</summary>
            <value>Группа конфигурации.</value>
        </member>
        <member name="P:Mallenom.AppServices.SerializableConfiguration`1.ConfigurationName">
            <summary>Возвращает имя конфигурации.</summary>
            <value>Имя конфигурации.</value>
        </member>
        <member name="P:Mallenom.AppServices.SerializableConfiguration`1.Defaults">
            <summary>Возвращает значения параметров по умолчанию.</summary>
            <value>Значения параметров по умолчанию.</value>
        </member>
        <member name="P:Mallenom.AppServices.SerializableConfiguration`1.Parameters">
            <summary>Возвращает и устанавливает текущие значения параметров.</summary>
            <value>Текущие значения параметров.</value>
        </member>
        <member name="P:Mallenom.AppServices.SerializableConfiguration`1.Serializer">
            <summary>Возвращает сериализатор значений параметров.</summary>
            <value>Сериализатор значений параметров.</value>
        </member>
        <member name="M:Mallenom.AppServices.SerializableConfiguration`1.Load(Mallenom.Storage.IObjectStorageReader)">
            <summary>Загрузить конфигурацию.</summary>
            <param name="reader">Объект для чтения конфигурации.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.AppServices.SerializableConfiguration`1.Save(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Сохранить конфигурацию.</summary>
            <param name="writer">Объект для записи конфигурации.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.AppServices.SerializableConfiguration`1.SetDefaults">
            <summary>Установить значения параметров по умолчанию.</summary>
        </member>
        <member name="T:Mallenom.AppServices.CrashReportComposerBase">
            <summary>Базовый класс генератора отчета об ошибке.</summary>
        </member>
        <member name="F:Mallenom.AppServices.CrashReportComposerBase.Separator">
            <summary>Разделитель частей отчета.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportComposerBase.#ctor">
            <summary>Создание <see cref="T:Mallenom.AppServices.CrashReportComposerBase"/>.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportComposerBase.WriteHeader(System.String,System.IO.TextWriter)">
            <summary>Записывает заголовок отчета.</summary>
            <param name="header">Заголовок.</param>
            <param name="textWriter">Объект для записи текста.</param>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportComposerBase.ComposeCore(System.Exception,System.IO.TextWriter)">
            <summary>Записывыает отчет об ошибке.</summary>
            <param name="exception">Исключение.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportComposerBase.Compose(System.Exception,System.IO.TextWriter)">
            <summary>Записывыает отчет об ошибке.</summary>
            <param name="exception">Исключение.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> == <c>null</c> или
            <paramref name="textWriter"/> == <c>null</c>.
            </exception>
        </member>
        <member name="T:Mallenom.AppServices.CrashReportExceptionComposer">
            <summary>Добавляет в отчет информацию об исключении.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportExceptionComposer.#ctor">
            <summary>Создание <see cref="T:Mallenom.AppServices.CrashReportExceptionComposer"/>.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportExceptionComposer.WriteExceptionInfo(System.Exception,System.Boolean,System.IO.TextWriter)">
            <summary>Записывает информацию об исключении.</summary>
            <param name="exception">Исключение.</param>
            <param name="isRoot">Флаг корневого исключения.</param>
            <param name="textWriter">Объект для записи текста.</param>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportExceptionComposer.ComposeCore(System.Exception,System.IO.TextWriter)">
            <summary>Записывыает отчет об ошибке.</summary>
            <param name="exception">Исключение.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
        </member>
        <member name="T:Mallenom.AppServices.CrashReportHeaderComposer">
            <summary>Генератор заголовка отчета об ошибке.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportHeaderComposer.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.AppServices.CrashReportHeaderComposer"/>.</summary>
            <param name="applicationName">Имя приложения.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="applicationName"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.AppServices.CrashReportHeaderComposer.ApplicationName">
            <summary>Возвращает имя приложения.</summary>
            <value>Имя приложения.</value>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportHeaderComposer.WriteAdditionalHeaderInformation(System.Exception,System.Diagnostics.Process,System.IO.TextWriter)">
            <summary>Записывает дополнительную информацию в заголовок отчета.</summary>
            <param name="exception">Исключаение.</param>
            <param name="process">Процесс.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportHeaderComposer.ComposeCore(System.Exception,System.IO.TextWriter)">
            <summary>Записывыает отчет об ошибке.</summary>
            <param name="exception">Исключение.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
        </member>
        <member name="T:Mallenom.AppServices.CrashReportLoadedAssembliesComposer">
            <summary>Записывает в отчет об ошибке список загруженных сборок.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportLoadedAssembliesComposer.#ctor">
            <summary>Создание <see cref="T:Mallenom.AppServices.CrashReportLoadedAssembliesComposer"/>.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportLoadedAssembliesComposer.WriteAssemblyInformation(System.Reflection.Assembly,System.IO.TextWriter)">
            <summary>Записывает информацию о загруженной сборке.</summary>
            <param name="assembly">Загруженная сборка.</param>
            <param name="textWriter">Объект для записи текста.</param>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportLoadedAssembliesComposer.ComposeCore(System.Exception,System.IO.TextWriter)">
            <summary>Записывыает отчет об ошибке.</summary>
            <param name="exception">Исключение.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
        </member>
        <member name="T:Mallenom.AppServices.CrashReportProcessInformationComposer">
            <summary>Записывает в отчет подробную информацию о процессе.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportProcessInformationComposer.#ctor">
            <summary>Создание <see cref="T:Mallenom.AppServices.CrashReportProcessInformationComposer"/>.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportProcessInformationComposer.WriteProcessInformaton(System.Diagnostics.Process,System.IO.TextWriter)">
            <summary>Записывает в отчет информацию о процессе.</summary>
            <param name="process">Процесс.</param>
            <param name="textWriter">Объект для записи текста.</param>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportProcessInformationComposer.WriteModulesInformation(System.Diagnostics.Process,System.IO.TextWriter)">
            <summary>Записывает в отчет информацию о загруженных модулях.</summary>
            <param name="process">Процесс.</param>
            <param name="textWriter">Объект для записи текста.</param>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportProcessInformationComposer.ComposeCore(System.Exception,System.IO.TextWriter)">
            <summary>Записывыает отчет об ошибке.</summary>
            <param name="exception">Исключение.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
        </member>
        <member name="T:Mallenom.AppServices.CrashReportWriter">
            <summary>Сериализатор отчетов об ошибках.</summary>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportWriter.#ctor(Mallenom.AppServices.IApplicationProfileDirectory,Mallenom.AppServices.ICrashReportComposer)">
            <summary>Создание <see cref="T:Mallenom.AppServices.CrashReportWriter"/>.</summary>
            <param name="storageDirectory">Директория профиля приложения, используемую для хранения отчетов об ошибках.</param>
            <param name="crashReportComposer">Генератор отчетов об ошибках.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="storageDirectory"/> == <c>null</c> или
            <paramref name="crashReportComposer"/> == <c>null</c>.
            </exception>
        </member>
        <member name="P:Mallenom.AppServices.CrashReportWriter.StorageDirectory">
            <summary>Возвращает директорию профиля приложения, используемую для хранения отчетов об ошибках.</summary>
            <value>Директория профиля приложения, используемую для хранения отчетов об ошибках.</value>
        </member>
        <member name="P:Mallenom.AppServices.CrashReportWriter.CrashReportComposer">
            <summary>Возвращает генератор отчетов об ошибках.</summary>
            <value>Генератор отчетов об ошибках.</value>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportWriter.GenerageFileName(System.Exception)">
            <summary>Генерирует имя файла для сохранения отчета об ошибке.</summary>
            <param name="exception">Исклоючение.</param>
            <returns>Имя файла для отчета об ошибке.</returns>
            <remarks>Сгенерированное имя файла не должно содержать пути к файлу.</remarks>
        </member>
        <member name="M:Mallenom.AppServices.CrashReportWriter.CreateCrashReportFile(System.Exception)">
            <summary>Создает файл отчета об ошибке.</summary>
            <param name="exception">Исключение, на базе которого создается отчет.</param>
            <returns>Имя записанного файла.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.AppServices.DirectoryTreeReportPart">
            <summary>Записывает в отчет структуру директории.</summary>
        </member>
        <member name="M:Mallenom.AppServices.DirectoryTreeReportPart.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.AppServices.DirectoryTreeReportPart"/>.</summary>
            <param name="directoryName">Имя директории, структура которой будет записана в отчет.</param>
        </member>
        <member name="P:Mallenom.AppServices.DirectoryTreeReportPart.DirectoryName">
            <summary>Возвращает имя директории, структура которой будет записана в отчет.</summary>
            <value>Имя директории, структура которой будет записана в отчет.</value>
        </member>
        <member name="P:Mallenom.AppServices.DirectoryTreeReportPart.ReportEntryName">
            <summary>Возвращает и устанавливает имя записи отчета, в которую будет записана структура директории.</summary>
            <value>Имя записи отчета, в которую будет записана структура директории.</value>
        </member>
        <member name="M:Mallenom.AppServices.DirectoryTreeReportPart.Write(Mallenom.AppServices.ITechSupportReportFormatter)">
            <summary>Записать данные отчета.</summary>
            <param name="formatter">Форматтер для записи данных.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="formatter"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationProfileDirectory">
            <summary>Директория профиля приложения.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileDirectory.#ctor(Mallenom.AppServices.IApplicationProfileRoot,System.String,Mallenom.AppServices.ApplicationProfileDirectoryUsage)">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationProfileDirectory"/>.</summary>
            <param name="root">Корень профиля приложения, в котором расположена данная директория.</param>
            <param name="relativePath">Относительный путь к директории профиля.</param>
            <param name="usage">Назначение директории программы.</param>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileDirectory.Root">
            <summary>Возвращает корень профиля приложения, в котором расположена данная директория.</summary>
            <value>Корень профиля приложения, в котором расположена данная директория.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileDirectory.FullPath">
            <summary>Возващает полный путь к директории профиля.</summary>
            <value>Полный путь к директории профиля.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileDirectory.RelativePath">
            <summary>Возващает относительный путь к директории профиля.</summary>
            <value>Относительный путь к директории профиля.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileDirectory.Usage">
            <summary>Возвращает назначение директории программы.</summary>
            <value>Назначение директории программы.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileDirectory.Exists">
            <summary>Возвращает признак существования директории.</summary>
            <value><c>true</c>, если директория существует, иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileDirectory.GetFilePath(System.String)">
            <summary>Возвращает полное имя файла, находящегося в данной директории.</summary>
            <param name="fileName">Имя файла.</param>
            <returns>Полное имя файла, находящегося в данной директории.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileDirectory.EnsureExists">
            <summary>
            Проверяет, существует ли директория профиля приложения и
            создает ее в случае необходимости.
            </summary>
            <returns>
            <see cref="M:EnsureExistsResult.Existed"/>, если директория уже существовала на момент вызова метода;
            <see cref="M:EnsureExistsResult.Created"/>, если директория была создана во время выполнения метода.
            </returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileDirectory.ToString">
            <summary>Возвращает строковое представление данного экземпляря <see cref="T:Mallenom.AppServices.ApplicationProfileDirectory"/>.</summary>
            <returns>Строковое представление данного экземпляря <see cref="T:Mallenom.AppServices.ApplicationProfileDirectory"/>.</returns>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationProfileDirectoryUsage">
            <summary>Назначение директории профиля программы.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileDirectoryUsage.None">
            <summary>Без особого назначения.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileDirectoryUsage.Root">
            <summary>Является корневой директорией.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileDirectoryUsage.Configuration">
            <summary>Хранит конфигурационные файлы.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileDirectoryUsage.Logs">
            <summary>Хранит логи.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileDirectoryUsage.CrashLogs">
            <summary>Хранит краш-логи.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileDirectoryUsage.Database">
            <summary>Хранит БД.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileDirectoryUsage.Other">
            <summary>Другое назначение.</summary>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationProfileLocalMachineReportPart">
            <summary>Часть отчета для техподдержки, содержащая файлы профиля приложения только из корня LocalMachine.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileLocalMachineReportPart.#ctor(Mallenom.AppServices.IApplicationProfileService)">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationProfileReportPart"/>.</summary>
            <param name="applicationProfileService">Сервис управления профилем приложения.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="applicationProfileService"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileLocalMachineReportPart.ShouldWriteRoot(Mallenom.AppServices.IApplicationProfileRoot)">
            <summary>Прорверяет необходимость записи данных из указанного корня профиля.</summary>
            <param name="root">Корень профиля приложения.</param>
            <returns><c>true</c>, если данные следует записать, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileLocalMachineReportPart.GetEntryRootName(Mallenom.AppServices.IApplicationProfileRoot)">
            <summary>Возвращает начало имени записи для файла из указанного корня профиля приложения.</summary>
            <param name="root">Корень профиля приложения.</param>
            <returns>Profile</returns>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationProfileRoot">
            <summary>Корень профиля программы.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileRoot._directories">
            <summary>Зарегистрированные директории профиля программы.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileRoot.#ctor(System.String,Mallenom.AppServices.ApplicationProfileRootUsage)">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationProfileRoot"/>.</summary>
            <param name="fullPath">Полный путь к корню профиля программы.</param>
            <param name="usage">Назначение корня профиля приложения.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fullPath"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileRoot.FullPath">
            <summary>Возвращает полный путь к корню профиля программы.</summary>
            <value>Полный путь к корню профиля программы.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileRoot.Usage">
            <summary>Возвращает назначение корня профиля приложения.</summary>
            <value>Назначение корня профиля приложения.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileRoot.RootDirectory">
            <summary>Возвращает корневую директорию профиля программы.</summary>
            <value>Корневая директория профиля программы.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileRoot.Directories">
            <summary>Возвращает коллекцию зарегистрированных директорий профиля программы.</summary>
            <value>Коллекция зарегистрированных директорий профиля программы.</value>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileRoot.RegisterDirectory(System.String,Mallenom.AppServices.ApplicationProfileDirectoryUsage)">
            <summary>Регистрирует директорию профиля программы.</summary>
            <param name="relativePath">Относительный путь к регистрируемой директории.</param>
            <param name="usage">Назначение директории.</param>
            <returns>Зарегистрированная директория профиля программы.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileRoot.ToString">
            <summary>Возвращает строковое представление данного экземпляря <see cref="T:Mallenom.AppServices.ApplicationProfileRoot"/>.</summary>
            <returns>Строковое представление данного экземпляря <see cref="T:Mallenom.AppServices.ApplicationProfileRoot"/>.</returns>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationProfileRootUsage">
            <summary>Использование корня профиля программы.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileRootUsage.LocalMachine">
            <summary>Корень профиля уникален для данного компьютера.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileRootUsage.LocalUser">
            <summary>
            Корень профиля уникален для данного пользователя Windows
            и не может перемещаться между компьютерами.
            </summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileRootUsage.RoamingUser">
            <summary>
            Корень профиля уникален для данного пользователя Windows
            и может перемещаться между компьютерами.
            </summary>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationProfileService">
            <summary>Сервис управления профилем приложения.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileService.#ctor(System.String,System.String)">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationProfileService"/>.</summary>
            <param name="companyName">Имя компании.</param>
            <param name="applicationName">Название приложения.</param>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileService.CompanyName">
            <summary>Возвращает имя компании-разработчика.</summary>
            <value>Имя компании-разработчика.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileService.ApplicationName">
            <summary>Возвращает название приложения.</summary>
            <value>Название приложения.</value>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileService.LocalUser">
            <summary>Профиль, уникальный для каждого пользователя Windows. Неперемещаемый.</summary>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileService.RoamingUser">
            <summary>Профиль, уникальный для каждого пользователя Windows. Перемещаемый.</summary>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileService.LocalMachine">
            <summary>Профиль, уникальный для данного компьютера.</summary>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileService.Roots">
            <summary>Возвращает перечень корней профиля приложения.</summary>
            <value>Перечень корней профиля приложения.</value>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileService.GetRoot(Mallenom.AppServices.ApplicationProfileRootUsage)">
            <summary>Возвращает корень проиля с указанным типом.</summary>
            <param name="usage">Тип корня профиля приложения.</param>
            <returns>Корень профиля приложения с указанным типом.</returns>
        </member>
        <member name="T:Mallenom.AppServices.EnsureExistsResult">
            <summary>Результат выполнения EnsureExists().</summary>
        </member>
        <member name="F:Mallenom.AppServices.EnsureExistsResult.Existed">
            <summary>Директория уже существовала.</summary>
        </member>
        <member name="F:Mallenom.AppServices.EnsureExistsResult.Created">
            <summary>Директория была создана.</summary>
        </member>
        <member name="T:Mallenom.AppServices.ExceptionEventArgs">
            <summary>Аргументы события перехвата необработанного исключения.</summary>
        </member>
        <member name="P:Mallenom.AppServices.ExceptionEventArgs.OriginalException">
            <summary>Возвращает исходное исключение.</summary>
            <value>Исходное исключение.</value>
        </member>
        <member name="P:Mallenom.AppServices.ExceptionEventArgs.Exception">
            <summary>Возвращает исключение, выданное конвертером.</summary>
            <value>Исключение, выданное конвертером.</value>
        </member>
        <member name="P:Mallenom.AppServices.ExceptionEventArgs.ExitCode">
            <summary>Возвращает и устанавливает код завершения процесса.</summary>
            <value>Код завершения процесса.</value>
        </member>
        <member name="M:Mallenom.AppServices.ExceptionEventArgs.#ctor(System.Exception,System.Exception)">
            <summary>Создание <see cref="T:Mallenom.AppServices.ExceptionEventArgs"/>.</summary>
            <param name="originalException">Исходное исключение.</param>
            <param name="exception">Исключение, выданное конвертером.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="originalException"/> == <c>null</c> или
            <paramref name="exception"/> == <c>null</c>.
            </exception>
        </member>
        <member name="T:Mallenom.AppServices.IApplicationProfileDirectory">
            <summary>Директория профиля приложения.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileDirectory.Root">
            <summary>Возвращает корень профиля приложения, в котором расположена данная директория.</summary>
            <value>Корень профиля приложения, в котором расположена данная директория.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileDirectory.FullPath">
            <summary>Возващает полный путь к директории профиля.</summary>
            <value>Полный путь к директории профиля.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileDirectory.RelativePath">
            <summary>Возващает относительный путь к директории профиля.</summary>
            <value>Относительный путь к директории профиля.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileDirectory.Usage">
            <summary>Возвращает назначение директории программы.</summary>
            <value>Назначение директории программы.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileDirectory.Exists">
            <summary>Возвращает признак существования директории.</summary>
            <value><c>true</c>, если директория существует, иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.AppServices.IApplicationProfileDirectory.GetFilePath(System.String)">
            <summary>Возвращает полное имя файла, находящегося в данной директории.</summary>
            <param name="fileName">Имя файла.</param>
            <returns>Полное имя файла, находящегося в данной директории.</returns>
        </member>
        <member name="M:Mallenom.AppServices.IApplicationProfileDirectory.EnsureExists">
            <summary>
            Проверяет, существует ли директория профиля приложения и
            создает ее в случае необходимости.
            </summary>
            <returns>
            <see cref="M:EnsureExistsResult.Existed"/>, если директория уже существовала на момент вызова метода;
            <see cref="M:EnsureExistsResult.Created"/>, если директория была создана во время выполнения метода.
            </returns>
        </member>
        <member name="T:Mallenom.AppServices.IApplicationProfileRoot">
            <summary>Корень профиля приложения.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileRoot.RootDirectory">
            <summary>Возвращает корневую директорию профиля программы.</summary>
            <value>Корневая директория профиля программы.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileRoot.Directories">
            <summary>Возвращает коллекцию зарегистрированных директорий профиля программы.</summary>
            <value>Коллекция зарегистрированных директорий профиля программы.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileRoot.FullPath">
            <summary>Возвращает полный путь к корню профиля программы.</summary>
            <value>Полный путь к корню профиля программы.</value>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileRoot.Usage">
            <summary>Возвращает назначение корня профиля приложения.</summary>
            <value>Назначение корня профиля приложения.</value>
        </member>
        <member name="M:Mallenom.AppServices.IApplicationProfileRoot.RegisterDirectory(System.String,Mallenom.AppServices.ApplicationProfileDirectoryUsage)">
            <summary>Регистрирует директорию профиля программы.</summary>
            <param name="relativePath">Относительный путь к регистрируемой директории.</param>
            <param name="usage">Назначение директории.</param>
            <returns>Зарегистрированная директория профиля программы.</returns>
        </member>
        <member name="T:Mallenom.AppServices.IApplicationProfileService">
            <summary>Сервис управления профилем приложения.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileService.LocalUser">
            <summary>Профиль, уникальный для каждого пользователя Windows. Неперемещаемый.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileService.RoamingUser">
            <summary>Профиль, уникальный для каждого пользователя Windows. Перемещаемый.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileService.LocalMachine">
            <summary>Профиль, уникальный для данного компьютера.</summary>
        </member>
        <member name="P:Mallenom.AppServices.IApplicationProfileService.Roots">
            <summary>Возвращает перечень корней профиля приложения.</summary>
            <value>Перечень корней профиля приложения.</value>
        </member>
        <member name="M:Mallenom.AppServices.IApplicationProfileService.GetRoot(Mallenom.AppServices.ApplicationProfileRootUsage)">
            <summary>Возвращает корень проиля с указанным типом.</summary>
            <param name="usage">Тип корня профиля приложения.</param>
            <returns>Корень профиля приложения с указанным типом.</returns>
        </member>
        <member name="T:Mallenom.AppServices.ICrashReportComposer">
            <summary>Генератор отчета об ошибке программы.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ICrashReportComposer.Compose(System.Exception,System.IO.TextWriter)">
            <summary>Записывыает отчет об ошибке.</summary>
            <param name="exception">Исключение.</param>
            <param name="textWriter">Объект для записи текста отчета.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> == <c>null</c> или
            <paramref name="textWriter"/> == <c>null</c>.
            </exception>
        </member>
        <member name="T:Mallenom.AppServices.ICrashReportWriter">
            <summary>Сериализатор отчетов об ошибках.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ICrashReportWriter.CreateCrashReportFile(System.Exception)">
            <summary>Создает файл отчета об ошибке.</summary>
            <param name="exception">Исключение, на базе которого создается отчет.</param>
            <returns>Имя записанного файла.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.AppServices.IExceptionCatcher">
            <summary>Перехватчик исключений.</summary>
        </member>
        <member name="E:Mallenom.AppServices.IExceptionCatcher.ExceptionCaught">
            <summary>Поймано исключение.</summary>
        </member>
        <member name="T:Mallenom.AppServices.ITechSupportReportBuilder">
            <summary>Генератор отчетов для отправки в техподдержку.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ITechSupportReportBuilder.WriteTo(System.IO.Stream)">
            <summary>Записыввает отчет в указанный поток.</summary>
            <param name="stream">Поток для записи отчета.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.AppServices.ITechSupportReportFormatter">
            <summary>Фораттер для записи отчета.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ITechSupportReportFormatter.CreateEntry(System.String)">
            <summary>Создает новую запись в отчете.</summary>
            <param name="entryName">Имя записи.</param>
            <returns>Поток для записи данных отчета.</returns>
        </member>
        <member name="T:Mallenom.AppServices.ITechSupportReportFormatterProvider">
            <summary>Провайдер форматтера отчетов для техподдержки.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ITechSupportReportFormatterProvider.CreateFormatter(System.IO.Stream)">
            <summary>Создает форматтер для записи данных отчета в указанный поток.</summary>
            <param name="stream">Поток для записи данных отчета.</param>
            <returns>Форматтер для записи данных отчета.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.AppServices.ITechSupportReportPart">
            <summary>Часть отчета для техподдержки.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ITechSupportReportPart.Write(Mallenom.AppServices.ITechSupportReportFormatter)">
            <summary>Записать данные отчета.</summary>
            <param name="formatter">Форматтер для записи данных.</param>
        </member>
        <member name="T:Mallenom.AppServices.ApplicationProfileReportPart">
            <summary>Часть отчета для техподдержки, содержащая файлы профиля приложения.</summary>
        </member>
        <member name="F:Mallenom.AppServices.ApplicationProfileReportPart.Log">
            <summary>Лог.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileReportPart.#ctor(Mallenom.AppServices.IApplicationProfileService)">
            <summary>Создание <see cref="T:Mallenom.AppServices.ApplicationProfileReportPart"/>.</summary>
            <param name="applicationProfileService">Сервис управления профилем приложения.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="applicationProfileService"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.AppServices.ApplicationProfileReportPart.ApplicationProfileService">
            <summary>Возвращает сервис управления профилем приложения.</summary>
            <value>Сервис управления профилем приложения.</value>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileReportPart.ShouldWriteRoot(Mallenom.AppServices.IApplicationProfileRoot)">
            <summary>Прорверяет необходимость записи данных из указанного корня профиля.</summary>
            <param name="root">Корень профиля приложения.</param>
            <returns><c>true</c>, если данные следует записать, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileReportPart.ShouldWriteFile(Mallenom.AppServices.IApplicationProfileRoot,Mallenom.AppServices.ApplicationProfileDirectoryUsage,System.String)">
            <summary>Проверяет необходимость записи файла в отчет.</summary>
            <param name="root">Корень профиля программы, содержащий файл.</param>
            <param name="directoryUsage">Назначение директории профиля приложения.</param>
            <param name="fileName">Имя файла.</param>
            <returns><c>true</c>, если файл нужно записать, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileReportPart.GetEntryRootName(Mallenom.AppServices.IApplicationProfileRoot)">
            <summary>Возвращает начало имени записи для файла из указанного корня профиля приложения.</summary>
            <param name="root">Корень профиля приложения.</param>
            <returns>Начало имени записи отчета.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileReportPart.GetReportEntryName(Mallenom.AppServices.IApplicationProfileRoot,System.String)">
            <summary>Возвращает имя записи отчета для указанного файла из профиля программы.</summary>
            <param name="root">Корень профиля программы, в котором находится файл.</param>
            <param name="fullFilePath">Имя файла.</param>
            <returns>Имя записи отчета для указанного файла.</returns>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileReportPart.WriteRoot(Mallenom.AppServices.ITechSupportReportFormatter,Mallenom.AppServices.IApplicationProfileRoot)">
            <summary>Записывает корень профиля приложения.</summary>
            <param name="formatter">Форматтер для записи данных.</param>
            <param name="root">Корень профиля приложения.</param>
        </member>
        <member name="M:Mallenom.AppServices.ApplicationProfileReportPart.Write(Mallenom.AppServices.ITechSupportReportFormatter)">
            <summary>Записать данные отчета.</summary>
            <param name="formatter">Форматтер для записи данных.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="formatter"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.AppServices.TechSupportReportBuilder">
            <summary>Генератор отчетов для отправки в техподдержку.</summary>
        </member>
        <member name="M:Mallenom.AppServices.TechSupportReportBuilder.#ctor(Mallenom.AppServices.ITechSupportReportFormatterProvider,System.Collections.Generic.IEnumerable{Mallenom.AppServices.ITechSupportReportPart})">
            <summary>Создание <see cref="T:Mallenom.AppServices.TechSupportReportBuilder"/>.</summary>
            <param name="formatterProvider">Провайдер форматтера отчета.</param>
            <param name="parts">Части отчета.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formatterProvider"/> == <c>null</c> или
            <paramref name="parts"/> == <c>null</c>.
            </exception>
        </member>
        <member name="P:Mallenom.AppServices.TechSupportReportBuilder.FormatterProvider">
            <summary>Возвращает используемый провайдер форматтера отчета.</summary>
            <value>Используемый провайдер форматтера отчета.</value>
        </member>
        <member name="P:Mallenom.AppServices.TechSupportReportBuilder.Parts">
            <summary>Возвращает список частей отчета.</summary>
            <value>Список частей отчета.</value>
        </member>
        <member name="M:Mallenom.AppServices.TechSupportReportBuilder.WriteTo(System.IO.Stream)">
            <summary>Записыввает отчет в указанный поток.</summary>
            <param name="stream">Поток для записи отчета.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.AppServices.TechSupportReportBuilderExtensions">
            <summary>Расширения для <see cref="T:Mallenom.AppServices.ITechSupportReportBuilder"/>.</summary>
        </member>
        <member name="M:Mallenom.AppServices.TechSupportReportBuilderExtensions.WriteTo(Mallenom.AppServices.ITechSupportReportBuilder,System.String)">
            <summary>Записывает отчет в указанный файл.</summary>
            <param name="builder">Генератор отчета.</param>
            <param name="fileName">Имя файла отчета.</param>
        </member>
        <member name="T:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher">
            <summary>Перехватчик необработанных исключений для WinForms-приложения.</summary>
        </member>
        <member name="F:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher._exceptionConverters">
            <summary>Конвертеры исключений.</summary>
        </member>
        <member name="E:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher.ExceptionCaught">
            <summary>Поймано необработанное исключение.</summary>
        </member>
        <member name="M:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher.OnExceptionCaught(Mallenom.AppServices.ExceptionEventArgs)">
            <summary>Вызывается при перехвате необработанного исключения.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher.#ctor(System.Collections.Generic.IEnumerable{System.Converter{System.Exception,System.Exception}},System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher"/>.</summary>
            <param name="exceptionConverters">Конвертеры исключений.</param>
            <param name="catchInDebugger"><c>true</c>, чтобы выключить перехват исключений.</param>
        </member>
        <member name="M:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher.AddExceptionConverter(System.Converter{System.Exception,System.Exception})">
            <summary>Добавляет конвертер исключений.</summary>
            <param name="converter"></param>
        </member>
        <member name="M:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher.UIUnhandledExceptionHandler(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>Обработчик исключений, сгенерированных в главного UI-потоке.</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher.UnhandledExceptionHandler(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>Обработчик исключений, сгенерированных в всех потоках кроме главного UI.</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Mallenom.AppServices.WinFormsUnhandledExceptionCatcher.Shutdown">
            <summary>Вызывается при завершении приложения как корректном, так и в случае ошибки.</summary>
        </member>
        <member name="T:Mallenom.AppServices.ZipArchiveFormatterProvider">
            <summary>Провайдер форматтера отчета для записи в zip-архив.</summary>
        </member>
        <member name="T:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter">
            <summary>Форматтер для записи отчета в zip-архив.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter.#ctor(System.IO.Stream)">
            <summary>Создание <see cref="T:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter"/>.</summary>
            <param name="stream">Поток для записи zip-архива.</param>
        </member>
        <member name="M:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter.Finalize">
            <summary>Финализатор.</summary>
        </member>
        <member name="P:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter.ZipArchive">
            <summary>Возвращает записываемый zip-архив.</summary>
            <value>Записываемый zip-архив.</value>
        </member>
        <member name="M:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter.CreateEntry(System.String)">
            <summary>Создает новую запись в отчете.</summary>
            <param name="entryName">Имя записи.</param>
            <returns>Поток для записи данных отчета.</returns>
        </member>
        <member name="P:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter.IsDisposed">
            <summary>Возвращает флаг ликвидированного объекта.</summary>
            <value><c>true</c>, если объект ликвидирован, иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter.Dispose(System.Boolean)">
            <summary>Ликвидирует объект.</summary>
            <param name="disposing">
            <c>true</c>, чтобы освободить managed и unmanaged ресурсы;
            <c>false</c>, чтобы освободить только unmanaged ресурсы.
            </param>
        </member>
        <member name="M:Mallenom.AppServices.ZipArchiveFormatterProvider.ZipArchiveFormatter.Dispose">
            <summary>Ликвидирует объект.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ZipArchiveFormatterProvider.#ctor">
            <summary>Создание <see cref="T:Mallenom.AppServices.ZipArchiveFormatterProvider"/>.</summary>
        </member>
        <member name="M:Mallenom.AppServices.ZipArchiveFormatterProvider.CreateFormatter(System.IO.Stream)">
            <summary>Создает форматтер для записи данных отчета в указанный поток.</summary>
            <param name="stream">Поток для записи данных отчета.</param>
            <returns>Форматтер для записи данных отчета.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.Controls.ColorPaletteDialog">
            <summary>Диалог выбора цвета.</summary>
        </member>
        <member name="P:Mallenom.Controls.ColorPaletteDialog.ShowWithoutActivation">
            <summary></summary>
        </member>
        <member name="M:Mallenom.Controls.ColorPaletteDialog.#ctor(System.Int32,System.Int32)">
            <summary></summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Mallenom.Controls.ColorPaletteDialog.Color">
            <summary>Выбранный цвет.</summary>
        </member>
        <member name="P:Mallenom.Controls.ColorSelector.Color">
            <summary>Выбранный цвет.</summary>
        </member>
        <member name="T:Mallenom.Controls.AssemblyCollection">
            <summary>Список записей о сборказ для подключения к гриду.</summary>
        </member>
        <member name="T:Mallenom.Controls.AssemblyViewControl">
            <summary>Контрол для отображения загруженных сборок.</summary>
        </member>
        <member name="M:Mallenom.Controls.AssemblyViewControl.#ctor">
            <summary></summary>
        </member>
        <member name="F:Mallenom.Controls.AssemblyViewControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.AssemblyViewControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Controls.AssemblyViewControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Controls.AssemblyViewGrid">
            <summary>Грид для отображения списка сборок.</summary>
        </member>
        <member name="T:Mallenom.Controls.ColorProgressBar">
            <summary></summary>
        </member>
        <member name="T:Mallenom.Controls.ColorButton">
            <summary>Кнопка выбора цвета.</summary>
        </member>
        <member name="E:Mallenom.Controls.ColorButton.ColorChanged">
            <summary>Генерируется при изменении выбранного цвета.</summary>
        </member>
        <member name="M:Mallenom.Controls.ColorButton.OnColorChanged(System.EventArgs)">
            <summary>Вызывается при изменении цвета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Controls.ColorButton.#ctor">
            <summary>Создание <see cref="T:Mallenom.Controls.ColorButton"/>.</summary>
        </member>
        <member name="P:Mallenom.Controls.ColorButton.Color">
            <summary>Возвращает и устанавливает выбранный цвет.</summary>
            <value>Выбранный цвет.</value>
        </member>
        <member name="T:Mallenom.Controls.FileTextBox">
            <summary>Контрол для выбора файла.</summary>
        </member>
        <member name="E:Mallenom.Controls.FileTextBox.TextChanged">
            <summary></summary>
        </member>
        <member name="F:Mallenom.Controls.FileTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.FileTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.FileTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Mallenom.Controls.FileTextBox.Filter">
            <summary></summary>
            <remarks>См. <c>OpenFileDialog.Filter</c>.</remarks>
        </member>
        <member name="P:Mallenom.Controls.FileTextBox.ReadOnly">
            <summary></summary>
        </member>
        <member name="T:Mallenom.Controls.FolderTextBox">
            <summary>Контрол для выбора директории.</summary>
        </member>
        <member name="F:Mallenom.Controls.FolderTextBox.components">
            <summary>Required designer variable.</summary>
        </member>
        <member name="M:Mallenom.Controls.FolderTextBox.Dispose(System.Boolean)">
            <summary>Clean up any resources being used.</summary>
        </member>
        <member name="M:Mallenom.Controls.FolderTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.FolderTextBox.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Controls.FolderTextBox.DialogDescription">
            <summary></summary>
        </member>
        <member name="P:Mallenom.Controls.FolderTextBox.ReadOnly">
            <summary></summary>
        </member>
        <member name="T:Mallenom.Controls.DotControl">
            <summary>DotControl.</summary>
        </member>
        <member name="M:Mallenom.Controls.DotControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Controls.FieldControl">
            <summary>
            Summary description for FieldControl.
            </summary>
        </member>
        <member name="F:Mallenom.Controls.FieldControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.FieldControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.FieldControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Controls.FieldChangedHandler">
            <summary></summary>
            <param name="field"></param>
            <param name="text"></param>
        </member>
        <member name="T:Mallenom.Controls.IPAddressControl">
            <summary>Контрол для отображения и редактирования IP-адреса.</summary>
        </member>
        <member name="F:Mallenom.Controls.IPAddressControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="P:Mallenom.Controls.IPAddressControl.Value">
            <summary>IP-адрес.</summary>
        </member>
        <member name="M:Mallenom.Controls.IPAddressControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.IPAddressControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Controls.Led">
            <summary>Led.</summary>
        </member>
        <member name="M:Mallenom.Controls.Led.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Controls.Led.Active">
            <summary>Зажечть/погачит светодиод.</summary>
        </member>
        <member name="M:Mallenom.Controls.Led.Pulse(System.Int32)">
            <summary>Включить светодиод на указанный период.</summary>
            <param name="time"></param>
        </member>
        <member name="T:Mallenom.Controls.PersistentForm">
            <summary>Форма, которая сохраняет свое положение и размер в конфигурационном файле.</summary>
        </member>
        <member name="M:Mallenom.Controls.PersistentForm.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Controls.PersistentForm.#ctor(Mallenom.Systems.Config.Configuration)">
            <summary>Конструктор.</summary>
            <param name="config">Файл конфигурации. Может быть null.</param>
        </member>
        <member name="T:Mallenom.Controls.TabStrip">
            <summary>Контрол вкладок.</summary>
        </member>
        <member name="P:Mallenom.Controls.TabStrip.Controls">
            <summary>
            DesignerSerializationVisibility
            </summary>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.HitTest(System.Drawing.Point)">
            <summary>
            Returns hit test results
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.AddTab(Mallenom.Controls.TabStripItem)">
            <summary>
            Add a <see cref="T:Mallenom.Controls.TabStripItem"/> to this control without selecting it.
            </summary>
            <param name="tabItem"></param>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.AddTab(Mallenom.Controls.TabStripItem,System.Boolean)">
            <summary>
            Add a <see cref="T:Mallenom.Controls.TabStripItem"/> to this control.
            User can make the currently selected item or not.
            </summary>
            <param name="tabItem"></param>
            <param name="autoSelect"></param>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.RemoveTab(Mallenom.Controls.TabStripItem)">
            <summary>
            Remove a <see cref="T:Mallenom.Controls.TabStripItem"/> from this control.
            </summary>
            <param name="tabItem"></param>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.GetTabItemByPoint(System.Drawing.Point)">
            <summary>
            Get a <see cref="T:Mallenom.Controls.TabStripItem"/> at provided point.
            If no item was found, returns null value.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.ShowMenu">
            <summary>
            Display items _menu
            </summary>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.OnTabStripItemClosing(Mallenom.Controls.TabStripItemClosingEventArgs)">
            <summary>
            Fires <see cref="E:Mallenom.Controls.TabStrip.TabStripItemClosing"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.OnTabStripItemClosed(System.EventArgs)">
            <summary>
            Fires <see cref="E:Mallenom.Controls.TabStrip.TabStripItemClosed"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.OnMenuItemsLoading(System.ComponentModel.HandledEventArgs)">
            <summary>
            Fires <see cref="E:Mallenom.Controls.TabStrip.MenuItemsLoading"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.OnMenuItemsLoaded(System.EventArgs)">
            <summary>
            Fires <see cref="E:Mallenom.Controls.TabStrip.MenuItemsLoaded"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.OnTabStripItemChanged(Mallenom.Controls.TabStripItemChangedEventArgs)">
            <summary>
            Fires <see cref="E:Mallenom.Controls.TabStrip.TabStripItemSelectionChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Controls.TabStrip.OnMenuItemsLoad(System.EventArgs)">
            <summary>
            Loads _menu items based on <see cref="T:Mallenom.Controls.TabStripItem"/>s currently added
            to this control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Mallenom.Controls.TabStripItem.Image">
            <summary>
            Image of <see cref="T:Mallenom.Controls.TabStripItem"/> which will be displayed
            on menu items.
            </summary>
        </member>
        <member name="P:Mallenom.Controls.TabStripItem.Selected">
            <summary>
            Gets and sets a value indicating if the page is _selected.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.TabStripItem.Dispose(System.Boolean)">
            <summary>
            Handles proper disposition of the tab page control.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Mallenom.Controls.TabStripItemCollection">
            <summary>Коллеция вкладок.</summary>
        </member>
        <member name="T:Mallenom.Controls.HitTestResult">
            <summary>
            Hit test result of <see cref="T:Mallenom.Controls.TabStrip"/>
            </summary>
        </member>
        <member name="T:Mallenom.Controls.ThemeTypes">
            <summary>
            Theme Type
            </summary>
        </member>
        <member name="T:Mallenom.Controls.TabStripItemChangeTypes">
            <summary>
            Indicates a change into TabStrip collection
            </summary>
        </member>
        <member name="T:Mallenom.Controls.Helpers.CollectionClear">
            <summary>
            Represents the method that will handle the event that has no data.
            </summary>
        </member>
        <member name="T:Mallenom.Controls.Helpers.CollectionChange">
            <summary>
            Represents the method that will handle the event that has item data.
            </summary>
        </member>
        <member name="T:Mallenom.Controls.Helpers.CollectionWithEvents">
            <summary>
            Extend collection base class by generating change events.
            </summary>
        </member>
        <member name="E:Mallenom.Controls.Helpers.CollectionWithEvents.Clearing">
            <summary>
            Occurs just before the collection contents are cleared.
            </summary>
        </member>
        <member name="E:Mallenom.Controls.Helpers.CollectionWithEvents.Cleared">
            <summary>
            Occurs just after the collection contents are cleared.
            </summary>
        </member>
        <member name="E:Mallenom.Controls.Helpers.CollectionWithEvents.Inserting">
            <summary>
            Occurs just before an item is added to the collection.
            </summary>
        </member>
        <member name="E:Mallenom.Controls.Helpers.CollectionWithEvents.Inserted">
            <summary>
            Occurs just after an item has been added to the collection.
            </summary>
        </member>
        <member name="E:Mallenom.Controls.Helpers.CollectionWithEvents.Removing">
            <summary>
            Occurs just before an item is removed from the collection.
            </summary>
        </member>
        <member name="E:Mallenom.Controls.Helpers.CollectionWithEvents.Removed">
            <summary>
            Occurs just after an item has been removed from the collection.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.#ctor">
            <summary>
            Initializes DrawTab new instance of the CollectionWithEvents class.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.SuspendEvents">
            <summary>
            Do not generate change events until resumed.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.ResumeEvents">
            <summary>
            Safe to resume change events.
            </summary>
        </member>
        <member name="P:Mallenom.Controls.Helpers.CollectionWithEvents.IsSuspended">
            <summary>
            Gets DrawTab value indicating if events are currently suspended.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.OnClear">
            <summary>
            Raises the Clearing event when not suspended.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.OnClearComplete">
            <summary>
            Raises the Cleared event when not suspended.
            </summary>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.OnInsert(System.Int32,System.Object)">
            <summary>
            Raises the Inserting event when not suspended.
            </summary>
            <param name="index">Index of object being inserted.</param>
            <param name="value">The object that is being inserted.</param>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Raises the Inserted event when not suspended.
            </summary>
            <param name="index">Index of inserted object.</param>
            <param name="value">The object that has been inserted.</param>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.OnRemove(System.Int32,System.Object)">
            <summary>
            Raises the Removing event when not suspended.
            </summary>
            <param name="index">Index of object being removed.</param>
            <param name="value">The object that is being removed.</param>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Raises the Removed event when not suspended.
            </summary>
            <param name="index">Index of removed object.</param>
            <param name="value">The object that has been removed.</param>
        </member>
        <member name="M:Mallenom.Controls.Helpers.CollectionWithEvents.IndexOf(System.Object)">
            <summary>
            Returns the index of the first occurrence of DrawTab value.
            </summary>
            <param name="value">The object to locate.</param>
            <returns>Index of object; otherwise -1</returns>
        </member>
        <member name="M:Mallenom.Controls.Design.TabStripDesigner.GetHitTest(System.Drawing.Point)">
            <summary>
            Check HitTest on <see cref="T:Mallenom.Controls.TabStrip"/> control and
            let the user click on close and menu buttons.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.Appenders.LogViewAppender.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.Appenders.LogViewAppender.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.Appenders.LogViewAppender.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.Appender">
            <summary>Абстрактный класс для упрощения создания аппендеров.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.Appender._closed">
            <summary>Состояние аппендера.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Appender.PreAppendCheck">
            <summary>Вызывается перед каждым <see cref="M:Mallenom.Diagnostics.Logs.Appender.Append(Mallenom.Diagnostics.Logs.LogEvent)"/>.</summary>
            <returns>false - <see cref="M:Mallenom.Diagnostics.Logs.Appender.Append(Mallenom.Diagnostics.Logs.LogEvent)"/> вызывать нельзя.</returns>
            <remarks>
            При необходимости реализуется в наследниках.
            Потокобезопасная.
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Appender.Append(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Вызывается при добавлении сообщения.</summary>
            <param name="logEvent">Сообщение.</param>
            <remarks>
            Для реализации в наследниках.
            Потокобезопасная.
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Appender.OnClose">
            <summary>Вызывается при закрытии аппендера.</summary>
            <remarks>
            Для реализации в наследниках.
            Потокобезопасная.
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Appender.RenderLoggingEvent(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>
            Рендер сообщения в строку.
            Вызывается из наследуемых классов.
            </summary>
            <param name="logEvent">Сообщение.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Appender.AddFilter(Mallenom.Diagnostics.Logs.IFilter)">
            <summary>Добавить фильтр.</summary>
            <param name="filter"></param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Appender.AddFilter(System.Func{Mallenom.Diagnostics.Logs.LogEvent,Mallenom.Diagnostics.Logs.FilterResult})">
            <summary>Добавить функцию фильтрации.</summary>
            <param name="func">Функция фильтрации.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Appender.ClearFilters">
            <summary>Удалить все фильтры.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.BufferingAppender">
            <summary>
            Базовый класс для реализации аппендеров,
            которые буферизируют логирующие события в буфер фиксированного размера.
            </summary>
            <remarks>
            Производный класс должен реализовать метод <see cref="M:Mallenom.Diagnostics.Logs.BufferingAppender.SendBuffer(Mallenom.Diagnostics.Logs.LogEvent[])"/>.
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.BufferingAppender.Flush">
            <summary>Передача всех данных из буфера и очистка его. </summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.BufferingAppender.SendBuffer(Mallenom.Diagnostics.Logs.LogEvent[])">
            <summary>Посылает список логирующих событий.</summary>
            <param name="events"></param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.BufferingAppender.SendFromBuffer(Mallenom.Diagnostics.Logs.LogEvent,Mallenom.Diagnostics.CyclicBuffer{Mallenom.Diagnostics.Logs.LogEvent})">
            <exception cref="T:System.ArgumentNullException"><c>buffer</c> is null.</exception>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.ConsoleAppender">
            <summary>Вывод лога на консоль.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.EventLogAppender">
            <summary>Для редиректа лога в <see cref="P:Mallenom.Diagnostics.Logs.EventLogAppender.EventLog"/>.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.EventLogAppender.#ctor(System.Diagnostics.EventLog)">
            <summary>Создание <see cref="T:Mallenom.Diagnostics.Logs.EventLogAppender"/>.</summary>
            <param name="eventLog">Системный журнал событий.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.EventLogAppender.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Diagnostics.Logs.EventLogAppender"/>.</summary>
            <param name="logName">Имя лога.</param>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.EventLogAppender.EventLog">
            <summary>Возвращает подключенный журнал событий.</summary>
            <value>Подключенный журнал событий.</value>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.EventLogAppender.Append(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Вызывается при добавлении сообщения.</summary>
            <param name="logEvent">Сообщение.</param>
            <remarks>
            Для реализации в наследниках.
            Потокобезопасная.
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.EventLogAppender.OnClose">
            <summary>Вызывается при закрытии аппендера.</summary>
            <remarks>
            Для реализации в наследниках.
            Потокобезопасная.
            </remarks>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.FileAppender">
            <summary>Ведение лога в файл.</summary>
            <remarks>
            <para>
            Свойство <see cref="P:Mallenom.Diagnostics.Logs.FileAppender.AppendToFile"/> позволяет
            установить режим записи сообщений при каждом запуске системы.
            Если true, то сообщения будут добаляться в существующий файл,
            иначе будет создан новый файл.
            </para>
            <para>
            Первое и последнее сообщение, генерируемые при запуске и останове программы
            можно установить используя свойства <see cref="P:Mallenom.Diagnostics.Logs.Layout.Header"/> и <see cref="P:Mallenom.Diagnostics.Logs.Layout.Footer"/> соответственно.
            </para>
            </remarks>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.FileAppender._fullPath">
            <summary>Имя лог-файла.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.FileAppender.AppendToFile">
            <summary>
            Флаг показывающий что новые сообщения должны
            добавляться в сущетсвующий файл или
            помещаться в нвоый файл, который будет записан поверх старого.
            </summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.FileAppender.Encoding">
            <summary>Возвращает и устанавливает кодировку файла.</summary>
            <value>Кодировка файла.</value>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.FileAppender.MaxFileSize">
            <summary>Максимальный размер лог-файла. 0 - не ограничен.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.FileAppender.MaxFileCount">
            <summary>Возвращает и устанавливает максимальное количество лог-файлов.</summary>
            <value>Максимальное количество лог-файлов, 0 - без ограничений.</value>
            <remarks>
            Файлы на грани переполнения архивируются,
            и максимальное количество архивных файлов равно <see cref="P:Mallenom.Diagnostics.Logs.FileAppender.MaxFileCount"/> - 1.
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.FileAppender.Append(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary></summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.FileAppender.PreAppendCheck">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.FileAppender.DeleteOldestFiles">
            <summary>Удаляет старые файлы.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.FileAppender.GetOldFilesPattern">
            <summary>Возвращает паттерн имени архивных файлов лога.</summary>
            <returns>Паттерн имени архивных файлов лога.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.FileAppender.GetOldestFilenames">
            <summary>
            Возвращает список старых лог-файлов, подлежащих удалению из-за
            ограничения на количество файлов.
            </summary>
            <returns>Список старогых лог-файлов.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.FileAppender.WriteHeader">
            <summary>Записать в файл заголовок.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.FileAppender.GenerateBackupFullPath(System.DateTime)">
            <summary>Генерирут и возвращает полный путь к файлу для бекапа текущего лога.</summary>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.FileLayout">
            <summary>Класс форматирования файлового лога.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.FileLayout.StackTraceEnable">
            <summary>Логировать стек при возникновении исключений.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.FileLayout.LoggerNameEnable">
            <summary>Логировать имя логера.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.FileLayout.InnerExceptionsEnable">
            <summary>Логгировать Inner exceptions.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.SafeTextWriter">
            <summary>Класс для безопасной работы с файлом. Перехватываются все исключенмия.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.IAppender">
            <summary>Интерфейс аппендера.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.IAppender.DoAppend(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Вывести указаное событие в Appender.</summary>
            <param name="logEvent">Событие.</param>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LogView">
            <summary>Контрол для отбражения лога из <see cref="T:Mallenom.Diagnostics.Logs.LogViewAppender"/>.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mallenom.Diagnostics.Logs.LogView"/> class.
            </summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.Appender">
            <summary>Appender, используемый данным контролом.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.ItemHeight">
            <summary>Высота элемента в списке.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.ItemLimit">
            <summary>Ограничение на максимальное количество отображаемых событий в контроле.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.IntegralScroll">
            <summary>Запрет прокрутки на число пикселей, не кратное высоте строки.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.ShowToolTips">
            <summary>Отображать всплывающие подсказки.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.ItemFormatString">
            <summary>Формат строки лога. 0 - <see cref="F:Mallenom.Diagnostics.Logs.LogEvent.TimeStamp"/>, 1 - <see cref="F:Mallenom.Diagnostics.Logs.LogEvent.Message"/>, 2 - <see cref="F:Mallenom.Diagnostics.Logs.LogEvent.Exception"/>, 3 - <see cref="F:Mallenom.Diagnostics.Logs.LogEvent.LoggerName"/>.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.EnableUpdates">
            <summary>Разрешить пополнение списка в реальном времени.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogView.Clear">
            <summary>Очистить список событий.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogView.UndoClear">
            <summary>Отменить очистку.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogView.SetStyle(Mallenom.Diagnostics.Logs.Level,Mallenom.Diagnostics.Logs.LogView.LogItemStyle)">
            <summary>Установить стиль для отображения события определенного уровня.</summary>
            <param name="level">Уровень.</param>
            <param name="style">Стиль.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogView.ResetStyles">
            <summary>Установка стандартных стилей.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogView.SetAppender(System.String)">
            <summary>Установить Appender для контрола по имени.</summary>
            <param name="name">Имя Appender'а.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogView.GetItemByIndex(System.Int32)">
            <summary></summary>
            <param name="index"></param>
            <returns>Может быть null.</returns>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LogView.LogItemStyle">
            <summary>Стиль события в логе.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogView.LogItemStyle.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Bitmap)">
            <summary>Конструктор.</summary>
            <param name="back">Цвет фона.</param>
            <param name="text">Цвет текста.</param>
            <param name="icon">Иконка (можно null).</param>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.LogItemStyle.Icon">
            <summary>Иконка. Может быть null.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.LogItemStyle.TextColor">
            <summary>Цвет текста.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.LogItemStyle.BackColor">
            <summary>Цвет фона.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.LogItemStyle.BackBrush">
            <summary>Кисть для рисования фона.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogView.LogItemStyle.TextBrush">
            <summary>Кисть для рисования текста.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LogViewAppender">
            <summary>Для добавления сообщений в <see cref="T:Mallenom.Diagnostics.Logs.LogView"/>.</summary>
        </member>
        <member name="E:Mallenom.Diagnostics.Logs.LogViewAppender.RecordAdded">
            <summary>Добавлена новая запись.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogViewAppender._eventLog">
            <summary>Кэш записей.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogViewAppender._pos">
            <summary>Позиция для записи нового события.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogViewAppender._count">
            <summary>Количество записей.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogViewAppender.#ctor">
            <summary>Создание <see cref="T:Mallenom.Diagnostics.Logs.LogViewAppender"/>. Максимальное кол-во записей 100.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogViewAppender.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Diagnostics.Logs.LogViewAppender"/>. Максимальное кол-во записей 100.</summary>
            <param name="name">Имя appender'а.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogViewAppender.#ctor(System.Int32,System.String)">
            <summary>Создание <see cref="T:Mallenom.Diagnostics.Logs.LogViewAppender"/>.</summary>
            <param name="maxLogSize">Максимальное количество записей.</param>
            <param name="name">Имя appender'а.</param>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogViewAppender.HasStorage">
            <summary></summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogViewAppender.SyncRoot">
            <summary>Возвращает объект синхронизации.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogViewAppender.FillList(Mallenom.Diagnostics.Logs.LogEvent[],System.Predicate{Mallenom.Diagnostics.Logs.LogEvent})">
            <summary></summary>
            <param name="list"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogViewAppender.Append(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary></summary>
            <param name="logEvent"></param>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LogViewToolStrip">
            <summary>Панель управления <see cref="P:Mallenom.Diagnostics.Logs.LogViewToolStrip.LogView"/>.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogViewToolStrip.LogView">
            <summary>Подключенный <see cref="P:Mallenom.Diagnostics.Logs.LogViewToolStrip.LogView"/>.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogViewToolStrip.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogViewToolStrip.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogViewToolStrip.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.SmtpAppender">
            <summary>Простейший аппендер для передачи сообщений по smtp-протоколу.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.SmtpAuthentication">
            <summary>Тип аутентификации.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.SmtpAuthentication.None">
            <summary>
            No authentication
            </summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.SmtpAuthentication.Basic">
            <summary>
            Basic authentication.
            </summary>
            <remarks>
            Requires a username and password to be supplied
            </remarks>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.SmtpAuthentication.Ntlm">
            <summary>
            Integrated authentication
            </summary>
            <remarks>
            Uses the Windows credentials from the current thread or process to authenticate.
            </remarks>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LogImpl">
            <summary>Реализация <see cref="T:Mallenom.Diagnostics.Logs.LogManager" />.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.RenderStringWriter">
            <summary></summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ActionFilter.#ctor(System.Func{Mallenom.Diagnostics.Logs.LogEvent,Mallenom.Diagnostics.Logs.FilterResult})">
            <summary></summary>
            <param name="func">Функция фильтрации.</param>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.ConfigurableFilter">
            <summary>Фильтр сообщений с возможностью настройки.</summary>
        </member>
        <member name="E:Mallenom.Diagnostics.Logs.ConfigurableFilter.Changed">
            <summary>Событие - настройки фильтра изменены.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ConfigurableFilter.#ctor">
            <summary>Создание <see cref="M:Mallenom.Diagnostics.Logs.ConfigurableFilter.Filter(Mallenom.Diagnostics.Logs.LogEvent)"/>.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ConfigurableFilter.AllowAllLoggers">
            <summary>Разрешить отображение сообщений со всех логгеров.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ConfigurableFilter.AllowedLoggers">
            <summary>Логгеры, сообщения с которых разрешены.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ConfigurableFilter.Fatal">
            <summary>Разрешить отображение сообщений с уровнем <see cref="F:Mallenom.Diagnostics.Logs.Level.Fatal"/>.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ConfigurableFilter.Error">
            <summary>Разрешить отображение сообщений с уровнем <see cref="F:Mallenom.Diagnostics.Logs.Level.Error"/>.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ConfigurableFilter.Warning">
            <summary>Разрешить отображение сообщений с уровнем <see cref="F:Mallenom.Diagnostics.Logs.Level.Warn"/>.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ConfigurableFilter.Debug">
            <summary>Разрешить отображение сообщений с уровнем <see cref="F:Mallenom.Diagnostics.Logs.Level.Debug"/>.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ConfigurableFilter.Trace">
            <summary>Разрешить отображение сообщений с уровнем <see cref="F:Mallenom.Diagnostics.Logs.Level.Trace"/>.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ConfigurableFilter.Info">
            <summary>Разрешить отображение сообщений с уровнем <see cref="F:Mallenom.Diagnostics.Logs.Level.Info"/>.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.ConfigurableFilterForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ConfigurableFilterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ConfigurableFilterForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.FilterResult">
            <summary>Результат фильтрации.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.FilterResult.Allow">
            <summary>Сообщение немедленно принимается и следующие фильтры в цепочке игнорируются.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.FilterResult.Neutral">
            <summary>Сообщение принимается и передается следующие фильтры в цепочке.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.FilterResult.Deny">
            <summary>Сообщение немедленно отвергается и следующие фильтры в цепочке игнорируются.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.IFilter">
            <summary>Интерфейс фильтра сообщение, проходящих в Appender.</summary>
            <remarks>Фильтры выстраивают в цепочку.</remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.IFilter.Filter(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Фильтрование сообщения при помощи данного фильтра.</summary>
            <param name="logEvent"></param>
            <returns></returns>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.IFilter.Next">
            <summary>Следующий фильтр в цепочке.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LoggerMatchFilter">
            <summary>
            Простой фильтр, основанный на сравнении имен логгеров.
            </summary>
            <remarks>
            Фильтр пропускаеи ссообщение, если имена логгеров начинаются с одинаковой строки.
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LoggerMatchFilter.#ctor(System.String)">
            <summary>Создание фильтра.</summary>
            <param name="loggerName">Имя логгера.</param>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.ILayout">
            <summary>Интрефейс для объектов размещения.</summary>
            <remark>Объект размещения используется для форматирования события из LogEvent.</remark>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ILayout.Format(Mallenom.Diagnostics.Logs.RenderStringWriter,Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Создание отформатированной строки.</summary>
            <param name="writer"></param>
            <param name="loggingEvent"></param>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ILayout.IgnoreException">
            <summary>Поддерживает ли Layout вывод Exception из LogEvent.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ILayout.Header">
            <summary>Начальный заголовок.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ILayout.Footer">
            <summary>Завершающая строка.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.ILog">
            <summary>Интерфейс логгера.</summary>
            <example>
            <code>
            private static readonly ILog Log = LogManager.GetLog(имя лога);
            или
            private static readonly ILog Log = LogManager.GetCurrentClassLog();
            . . .
            Log.Info(...);
            </code>
            </example>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.ILogger">
            <summary>Интерфейс настройки логгера.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ILogger.Name">
            <summary>Имя логгера.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ILogger.EffectiveLevel">
            <summary>Максимальный уровень события, которое выводиться в логгер.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.ILogger.UpHierarchyLogger">
            <summary>Логгер следующий вверх по иерархии.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ILogger.Log(Mallenom.Diagnostics.Logs.Level,System.Object,System.Exception)">
            <summary>Вывести в логгер указанное событие.</summary>
            <param name="level">Уровень события.</param>
            <param name="message">Сообщение события.</param>
            <param name="exc">Исключение.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ILogger.Log(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Вывести в логгер указаннон событие.</summary>
            <param name="logevent">Выводимое событие.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ILogger.GetAppenders">
            <summary>Возвращает список аппендеров, подключенных к данному Logger'а.</summary>
            <returns>Список аппендеров.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ILogger.AddAppender(Mallenom.Diagnostics.Logs.IAppender)">
            <summary>Добавить указанный аппендер.</summary>
            <param name="appender">Добавляемый аппендер.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ILogger.RemoveAppender(Mallenom.Diagnostics.Logs.IAppender)">
            <summary>Удалить указанный аппендер.</summary>
            <param name="appender">Удаляемый аппендер.</param>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.ILoggerFactory">
            <summary>Интерфейс фабрики создания логгера.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.ILoggerFactory.CreateLogger(System.String)">
            <summary>Создание логгера.</summary>
            <param name="name">Имя логгера. Если null, то возвращает <see cref="T:Mallenom.Diagnostics.Logs.RootLogger"/>.</param>
            <returns>Логгер.</returns>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.IRepository">
            <summary>Интерфейс Repository.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.IRepository.GetLoggers">
            <summary>Получить список Logger'ов, хранящихся в репозитории.</summary>
            <returns></returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.IRepository.GetLogger(System.String)">
            <summary>Получить логгер по его имени.</summary>
            <param name="name">Имя логгера.</param>
            <returns>Логгер.</returns>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.IRepository.RootLogger">
            <summary>Ссылка на корневой Logger (Logger по умолчанию).</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.IRepository.GetAppenders">
            <summary>Получить список аппендеров, хранящихся в репозитории.</summary>
            <returns>Список аппендеров.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.IRepository.GetAppenders``1">
            <summary>Получить аппендеров указазанного типа.</summary>
            <typeparam name="T">Тип аппендеров.</typeparam>
            <returns>Список аппендеров.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.IRepository.GetAppenders(System.Type)">
            <summary>Получить список всех аппендеров указанного типа.</summary>
            <param name="appenderType">Тип аппендеров.</param>
            <returns>Список аппендеров.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.IRepository.Log(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Послать указанное сообщение в логгер с именем <see cref="F:Mallenom.Diagnostics.Logs.LogEvent.LoggerName"/>.</summary>
            <param name="logEvent">Посылаемое сообщение.</param>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.Layout">
            <summary>
            Базовый класс формирующий формат лога.
            При наследовании необходимо перекрыть метод <see cref="M:Mallenom.Diagnostics.Logs.Layout.Format(Mallenom.Diagnostics.Logs.RenderStringWriter,Mallenom.Diagnostics.Logs.LogEvent)"/>.
            </summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.Level">
            <summary>Описание уровней вывода событий.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LogEvent">
            <summary>Зафиксированное событие.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogEvent.#ctor(Mallenom.Diagnostics.Logs.Level,System.Object,System.Exception,System.DateTime,System.String)">
            <summary></summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exc"></param>
            <param name="timeStamp"></param>
            <param name="loggerName"></param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogEvent.#ctor(Mallenom.Diagnostics.Logs.Level,System.Object,System.Exception,System.String)">
            <summary></summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exc"></param>
            <param name="loggerName"></param>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogEvent.Level">
            <summary>Уровень.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogEvent.Message">
            <summary>Сообщение.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogEvent.Exception">
            <summary>Искючение.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogEvent.TimeStamp">
            <summary>Время возникновения события.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.LogEvent.LoggerName">
            <summary>Имя логгера.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.Logger">
            <summary>Реализация интерфейса <see cref="T:Mallenom.Diagnostics.Logs.ILogger"/>.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.Logger._appenders">
            <summary>Список Appender'ов, подключенных к Logger'у.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.#ctor(System.String)">
            <summary>Создание объекта логгера.</summary>
            <param name="name">Имя логгера.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.Dispose">
            <summary>Освобжение ресурсов логгера.</summary>
            <remarks>Вызывает <see cref="M:Mallenom.Diagnostics.Logs.Logger.Dispose"/> у всех аппендеров, добавленных в логгер.</remarks>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.Logger.Name">
            <summary>Имя Logger'а.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.Logger.UpHierarchyLogger">
            <summary>Логгер следующий вверх по иерархии.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.Log(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary></summary>
            <param name="logevent"></param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.Log(Mallenom.Diagnostics.Logs.Level,System.Object,System.Exception)">
            <summary></summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exc"></param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.ForceLog(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Вывод сообщения без проверки на Level.</summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.GetAppenders">
            <summary>Возвращает список Appender'ов.</summary>
            <returns>Список Appender'ов.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.AddAppender(Mallenom.Diagnostics.Logs.IAppender)">
            <summary>Добавить Appender.</summary>
            <param name="appender">Добавляемый Appender.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.RemoveAppender(Mallenom.Diagnostics.Logs.IAppender)">
            <summary>Удалить Appender.</summary>
            <param name="appender">Удаляемый Appender.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Logger.IsEnableLevel(Mallenom.Diagnostics.Logs.Level)">
            <summary>Разрешен ли вывод сообщений с указанным уровнем?</summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LoggerManager">
            <summary></summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LoggerManager.Shutdown">
            <summary>Завершить работу системы логгирования.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LoggerManager.GetRepository">
            <summary>Возвращает репозиторий по умолчанию.</summary>
            <returns>Репозиторий по умолчанию.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogReceivedEventArgs.#ctor(Mallenom.Diagnostics.Logs.LogLog)">
            <summary></summary>
            <param name="loglog"></param>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.LogReceivedEventArgs.LogLog">
            <summary></summary>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.LogManager">
            <summary>Статический класс для работы с логами.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogManager.GetLog(System.String)">
            <summary>Получить лог с указаным именем.</summary>
            <param name="name">Имя лога.</param>
            <returns>Лог.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogManager.GetLog(System.Type)">
            <summary>Получить лог c именем указанного типа.</summary>
            <param name="type">Тип.</param>
            <returns>Лог.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogManager.GetCurrentClassLog">
            <summary>Получить лог c именем класса, в котором вызван данный метод.</summary>
            <returns>Лог.</returns>
            <remarks>
            Метод выполняется достаточно долго,
            не вызывайте его многократно!
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogManager.GetRepository">
            <summary>Возвращает репозиторий по умолчанию.</summary>
            <returns>Репозиторий по умолчанию.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.LogManager.Shutdown">
            <summary>Освободить ресурсы системы логирования.</summary>
            <remarks>
            Вызов этого метода закрывает (вызывает Dispose()) и удаляет все подключенные аппендеры.
            </remarks>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.Repository">
            <summary>Репозиторий Logger'ов и Appender'ов.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.Logs.Repository._loggers">
            <summary>Список Logger'ов.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Repository.GetLoggers">
            <summary>Возвращает список всех логгеров в репозитории.</summary>
            <returns></returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Repository.GetLogger(System.String)">
            <summary>Получить логгер по его имени.</summary>
            <param name="name">Имя логгера. Не может быть <c>null</c> или <see cref="F:System.String.Empty"/>.</param>
            <returns>Логгер. Если Logger'а с указанным именем нет в репозитории, то создается и добавляется новый Logger.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Repository.GetLogger(System.String,Mallenom.Diagnostics.Logs.ILoggerFactory)">
            <summary></summary>
            <param name="name">Имя логгера. Не может быть <c>null</c> или <see cref="F:System.String.Empty"/>.</param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="P:Mallenom.Diagnostics.Logs.Repository.RootLogger">
            <summary>Корневой Logger.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Repository.GetAppenders">
            <summary>Получить список всех подключенных аппендеров.</summary>
             <returns>Список аппендеров.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Repository.GetAppenders``1">
            <summary>Получить список всех аппендеров указанного типа.</summary>
            <typeparam name="T">Тип запрашиваемых аппендеров.</typeparam>
            <returns>Список аппендеров.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Repository.GetAppenders(System.Type)">
            <summary>Получить список всех аппендеров указанного типа.</summary>
            <param name="appenderType">Тип запрашиваемых аппендеров.</param>
            <returns>Список аппендеров.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.Logs.Repository.Log(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Отправить сообщение в логгер с именем <see cref="F:Mallenom.Diagnostics.Logs.LogEvent.LoggerName"/>.</summary>
            <param name="logEvent">Сообщение.</param>
        </member>
        <member name="T:Mallenom.Diagnostics.Logs.RootLogger">
            <summary>Корневой логгер.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Utility.PathHelper.StartupPath">
            <summary>Gets the path for the executable file that started the application.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Utility.PathHelper.ExecutablePath">
            <summary>Gets the path for the executable file that started the application.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Utility.PathHelper.GetLocalPath(System.String)">
            <summary>
            This method takes a file URL and converts it to a local path.  The trick here is that
            if there is a '#' in the path, everything after this is treated as a fragment.  So
            we need to append the fragment to the end of the path.
            </summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Utility.AssemblyHelper.ProductName">
            <summary>Название продукта.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Utility.AssemblyHelper.ProductTitle">
            <summary>Название продукта.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Utility.AssemblyHelper.VcsCommitDate">
            <summary>Дата коммита в VCS.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Utility.AssemblyHelper.CompileDate">
            <summary>Дата компиляции продукта.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.Utility.AssemblyHelper.FullVersion">
            <summary>Полная версия приложения.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Utility.AssemblyHelper.AssemblyName(System.Reflection.Assembly)">
            <summary>Название сборки.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Utility.AssemblyHelper.GetFullVersion(System.Reflection.Assembly)">
            <summary>Полная версия сборки.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Utility.AssemblyHelper.GetVcsCommitTime(System.Reflection.Assembly)">
            <summary>Дата компиляции сборки.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.Utility.AssemblyHelper.GetCompileTime(System.Reflection.Assembly)">
            <summary>Дата компиляции сборки.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.DirectoryNameGenerator">
            <summary>Набор методов для генерации полного пути к директориям приложения.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromSpecialFolder(System.Environment.SpecialFolder,System.String)">
            <summary>Получить путь к директории относительно специальной директории.</summary>
            <param name="specialFolder">Специальная директория.</param>
            <param name="subPath">Дополнительный путь.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromSpecialFolder(System.Environment.SpecialFolder)">
            <summary>Получить путь к специальной директории.</summary>
            <param name="specialFolder">Специальная директория.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromAssemblyLocation(System.Reflection.Assembly,System.String)">
            <summary>Получить путь к директории относительно расположения сборки.</summary>
            <param name="assembly">Сборка.</param>
            <param name="subPath">Дополнительный путь.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromAssemblyLocation(System.Reflection.Assembly)">
            <summary>Получить путь к директории относительно расположения сборки.</summary>
            <param name="assembly">Сборка.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromAssemblyLocation(System.String)">
            <summary>Получить путь к директории относительно расположения сборки, вызывающий данный метод.</summary>
            <param name="subPath">Дополнительный путь.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromAssemblyLocation">
            <summary>Получить путь к директории относительно расположения сборки, вызывающий данный метод.</summary>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromDomainLocation(System.AppDomain,System.String)">
            <summary>Получить путь к директории относительно указанного <see cref="T:System.AppDomain"/>.</summary>
            <param name="appDomain"><see cref="T:System.AppDomain"/>.</param>
            <param name="subPath">Дополнительный путь.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromDomainLocation(System.AppDomain)">
            <summary>Получить путь к директории относительно указанного <see cref="T:System.AppDomain"/>.</summary>
            <param name="appDomain"><see cref="T:System.AppDomain"/>.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromDomainLocation(System.String)">
            <summary>Получить путь к директории относительно текущего <see cref="T:System.AppDomain"/>.</summary>
            <param name="subPath">Дополнительный путь.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromDomainLocation">
            <summary>Получить путь к директории относительно текущего <see cref="T:System.AppDomain"/>.</summary>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromCurrentDirectory(System.String)">
            <summary>Получить путь к директории относительно текущей директории.</summary>
            <param name="subPath">Дополнительный путь.</param>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.DirectoryNameGenerator.FromCurrentDirectory">
            <summary>Получить путь к текущей директории.</summary>
            <returns>Полный путь к директории.</returns>
        </member>
        <member name="T:Mallenom.Diagnostics.ExceptionForm">
            <summary>Форма для отображения информации об исключении.</summary>
        </member>
        <member name="E:Mallenom.Diagnostics.ExceptionForm.AppExit">
            <summary>Событие, генерируемое при нжатии кнопки "Выход из приложения".</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.ExceptionForm._exceptionInfo">
            <summary>Упорядоченная информация об исключении для отчета.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.ExceptionForm._assembliesInfo">
            <summary>Информация о загруженных сборках.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.Text">
            <summary>
            Возвращает и задает текст заголовка окна.
            <para>
            В тексте могут использоваться парамеры:
            <list type="bullet">
            <item>{0} - ProductName,</item>
            <item>{1} - ProductTitle,</item>
            <item>{2} - FullVersion,</item>
            <item>{3} - CompileData.</item>
            </list></para>
            </summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.Exception">
            <summary>Исключение.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.ExceptionHeader">
            <summary></summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.ShowInnerExceptions">
            <summary>Отображать внутренние исключения в сообщении.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.MessageTitle">
            <summary>Текст заголовка сообщения.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.MessageText">
            <summary>Текст сообщения.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.EmailAddress">
            <summary>EMail-адрес для отправки информации об ошибке.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.Style">
            <summary>Стиль.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.SendEmailMessageButtonVisible">
            <summary>Показывать кнопку отправки сообщения об ошибке.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.ShowAdditionalInfo">
            <summary>Отображать панель с дополнительной информацией.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.DateTime">
            <summary>Время генерации исключения/сообщения об ошибке.</summary>
        </member>
        <member name="P:Mallenom.Diagnostics.ExceptionForm.ShowDateTime">
            <summary>Отображать время на форме.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.#ctor(System.String,System.String,System.Exception)">
            <summary>Создать <see cref="T:Mallenom.Diagnostics.ExceptionForm"/>.</summary>
            <param name="messageTitle">Заголовок сообщения.</param>
            <param name="messageText">Текст сообщения.</param>
            <param name="exception">Исключение.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.#ctor(Mallenom.Diagnostics.Logs.LogEvent)">
            <summary>Создать <see cref="T:Mallenom.Diagnostics.ExceptionForm"/>.</summary>
            <param name="logEvent">Событие лога для отображения.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.#ctor(System.String,System.String,System.DateTime)">
            <summary>Создать <see cref="T:Mallenom.Diagnostics.ExceptionForm"/>.</summary>
            <param name="messageTitle">Заголовок сообщения.</param>
            <param name="messageText">Текст сообщения.</param>
            <param name="dateTime">Время.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.#ctor(System.String,System.String)">
            <summary>Создать <see cref="T:Mallenom.Diagnostics.ExceptionForm"/>.</summary>
            <param name="messageTitle">Заголовок сообщения.</param>
            <param name="messageText">Текст сообщения.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.#ctor(System.Exception)">
            <summary>Создать <see cref="T:Mallenom.Diagnostics.ExceptionForm"/>.</summary>
            <param name="exception">Исключение.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.Expand">
            <summary>Показать дополнительную информацию.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.Collapse">
            <summary>Скрыть дополнительную информацию.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.ExceptionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.ExceptionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Diagnostics.ExceptionFormStyle">
            <summary>Стиль формы исключения.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.ExceptionFormStyle.Information">
            <summary>Информация.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.ExceptionFormStyle.Warning">
            <summary>Предупреждение.</summary>
        </member>
        <member name="F:Mallenom.Diagnostics.ExceptionFormStyle.Error">
            <summary>Ошибка.</summary>
        </member>
        <member name="T:Mallenom.Diagnostics.FileNameGenerator">
            <summary>Набор методов для генерации полного пути к файлам приложения.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.EnsurePathExists(System.String)">
            <summary>Проверяет существование директории и создает ее в случае необходимости.</summary>
            <param name="path">Полный путь к файлу или директории.</param>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromSpecialFolder(System.Environment.SpecialFolder,System.String,System.String)">
            <summary>Получить путь к файлу относительно специальной директории.</summary>
            <param name="specialFolder">Специальная директория.</param>
            <param name="subPath">Дополнительный путь.</param>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromSpecialFolder(System.Environment.SpecialFolder,System.String)">
            <summary>Получить путь к файлу отноительно специальной директории.</summary>
            <param name="specialFolder">Специаьная директория.</param>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromAssemblyLocation(System.Reflection.Assembly,System.String,System.String)">
            <summary>Получить путь к файлу относительно расположения сборки.</summary>
            <param name="asm">Сборка.</param>
            <param name="subPath">Дополнительный путь.</param>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromAssemblyLocation(System.String,System.String)">
            <summary>Получить путь к файлу относительно расположения сборки, вызывающий данный метод.</summary>
            <param name="subPath">Дополнительный путь.</param>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromAssemblyLocation(System.String)">
            <summary>Получить путь к файлу относительно расположения сборки, вызывающий данный метод.</summary>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromDomainLocation(System.AppDomain,System.String,System.String)">
            <summary>Получить путь к файлу относительно указанного <see cref="T:System.AppDomain"/>.</summary>
            <param name="appDomain"><see cref="T:System.AppDomain"/>.</param>
            <param name="subPath">Дополнительный путь.</param>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromDomainLocation(System.String,System.String)">
            <summary>Получить путь к файлу относительно текущего <see cref="T:System.AppDomain"/>.</summary>
            <param name="subPath">Дополнительный путь.</param>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromDomainLocation(System.String)">
            <summary>Получить путь к файлу относительно текущего <see cref="T:System.AppDomain"/>.</summary>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromCurrentDirectory(System.String,System.String)">
            <summary>Получить путь к файлу относительно текущей директории.</summary>
            <param name="subPath">Дополнительный путь.</param>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.FileNameGenerator.FromCurrentDirectory(System.String)">
            <summary>Получить путь к файлу относительно текущей директории.</summary>
            <param name="fileName">Имя файла.</param>
            <returns>Полный путь к файлу.</returns>
        </member>
        <member name="T:Mallenom.Diagnostics.ArrayHelpers">
            <summary>Вспомогательные методы для работы с массивами.</summary>
        </member>
        <member name="M:Mallenom.Diagnostics.ArrayHelpers.AddItemToArray``1(``0[],``0)">
            <summary>Добавляет элемент в массив.</summary>
            <typeparam name="T">Тип элементов массива.</typeparam>
            <param name="array">Массив.</param>
            <param name="item">Добавляемый элемент.</param>
            <returns>Массив, содержащий все элементы из старого массива и указанный элемент.</returns>
            <remarks>Если элемент уже есть в массиве, то функция возвращает <paramref name="array"/>.</remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.ArrayHelpers.RemoveItemFromArray``1(``0[],``0)">
            <summary>Удаляет элемент из указанного массива.</summary>
            <typeparam name="T">Тип элементов массива.</typeparam>
            <param name="array">Массив, из которого требуется удалить элемент.</param>
            <param name="item">Удаляемый элемент.</param>
            <returns>Массив, не содержащий указанного элемента.</returns>
            <remarks>
            Если элемента нет в массиве, то функция возвращает <paramref name="array"/>.
            Если массив содержит несколько экземпляров <paramref name="item"/>, то все они будут удалены.
            </remarks>
        </member>
        <member name="M:Mallenom.Diagnostics.CyclicBuffer`1.Enqueue(`0)">
            <summary>Добавить элемент в буфер.</summary>
            <param name="item">Добавляемый элемент.</param>
            <returns>Если буфер полон, то возвращается вытесняемый элемент, иначе default(T).</returns>
        </member>
        <member name="M:Mallenom.Diagnostics.CyclicBuffer`1.Dequeue">
            <summary>Получить данные из буфера.</summary>
            <returns>Если буфер пуст, то default(T).</returns>
        </member>
        <member name="T:Mallenom.Framework.AssemblyInfo">
            <summary>Информация о сборке.</summary>
        </member>
        <member name="M:Mallenom.Framework.AssemblyInfo.FromCallingAssembly">
            <summary>Возвращает информацию о сборке, из которой вызывается данный метод.</summary>
            <returns>Информация о сборке.</returns>
        </member>
        <member name="M:Mallenom.Framework.AssemblyInfo.FromEntryAssembly">
            <summary>Возвращает информацию о сборке, содержащей точку входа.</summary>
            <returns>Информация о сборке.</returns>
        </member>
        <member name="M:Mallenom.Framework.AssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>Создание <see cref="T:Mallenom.Framework.AssemblyInfo"/>.</summary>
            <param name="assembly">Сборка, по которой собирается информация.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Assembly">
            <summary>Возващает сборку, по которой собирается информация.</summary>
            <value>Сборка, по которой собирается информация.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Title">
            <summary>Возвращает заголовок сборки.</summary>
            <value>Заголовок сборки.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Product">
            <summary>Возвращает название продукта.</summary>
            <value>Название продукта.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Configuration">
            <summary>Возвращает конифигурацию сборки.</summary>
            <value>Конфигурация сборки</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Copyright">
            <summary>Возвращает строку копирайта.</summary>
            <value>Строка копирайта.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Description">
            <summary>Возвращает описание сборки.</summary>
            <value>Описаие сборки.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Company">
            <summary>Возвращает название компании.</summary>
            <value>Название компании.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Trademark">
            <summary>Возвращает информацию о торговой марке.</summary>
            <value>Информация о торговой марке.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.InformationalVersion">
            <summary>Возвращает информативную версию сборки.</summary>
            <value>Информативная версия сборки.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.CompileDate">
            <summary>
            Возвращает дату и время компиляции продукта (по атрибуту <see cref="T:Mallenom.Annotations.AssemblyCompileDateAttribute"/>).
            Может быть <c>null</c>.
            </summary>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.CommitId">
            <summary>Возвращает идентификатор коммита, по которому скомпилирована сборка.</summary>
            <value>Идентификатор коммита, по которому скомпилирована сборка.</value>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.CommitDate">
            <summary>
            Возвращает дату и время компиляции продукта (по атрибуту <see cref="T:Mallenom.Annotations.AssemblyVcsCommitDateAttribute"/>).
            Может быть <c>null</c>.
            </summary>
        </member>
        <member name="P:Mallenom.Framework.AssemblyInfo.Version">
            <summary>Возвращает версию сборки.</summary>
            <value>Версия сборки,</value>
        </member>
        <member name="T:Mallenom.Framework.Dpi">
            <summary>Количество точек на дюйм.</summary>
        </member>
        <member name="P:Mallenom.Framework.Dpi.Default">
            <summary>Возвращает DPI по умолчанию (96x96).</summary>
            <value>96x96</value>
        </member>
        <member name="P:Mallenom.Framework.Dpi.Current">
            <summary>Возвращает текущий системный DPI.</summary>
            <value>Текущий системный DPI.</value>
            <remarks>Если приложение не имеет в манифесте статуса dpi-aware, то всегда возвращает 96x96.</remarks>
        </member>
        <member name="M:Mallenom.Framework.Dpi.GetSystemDpi">
            <summary>Возвращает системный Dpi.</summary>
            <returns>Системный Dpi.</returns>
            <remarks>Если приложение не имеет в манифесте статуса dpi-aware, то всегда возвращает 96x96.</remarks>
        </member>
        <member name="M:Mallenom.Framework.Dpi.#ctor(System.Int32)">
            <summary>Создание <see cref="T:Mallenom.Framework.Dpi"/>.</summary>
            <param name="dpi">Количество пикселей на логический дюйм по осям OX и OY.</param>
        </member>
        <member name="M:Mallenom.Framework.Dpi.#ctor(System.Int32,System.Int32)">
            <summary>Создание <see cref="T:Mallenom.Framework.Dpi"/>.</summary>
            <param name="x">Количество пикселей на логический дюйм по оси OX.</param>
            <param name="y">Количество пикселей на логический дюйм по оси OY.</param>
        </member>
        <member name="P:Mallenom.Framework.Dpi.X">
            <summary>Возвращает количество пикселей на логический дюйм по оси OX.</summary>
            <value>Количество пикселей на логический дюйм по оси OX.</value>
        </member>
        <member name="P:Mallenom.Framework.Dpi.Y">
            <summary>Возвращает количество пикселей на логический дюйм по оси OY.</summary>
            <value>Количество пикселей на логический дюйм по оси OY.</value>
        </member>
        <member name="M:Mallenom.Framework.Dpi.op_Equality(Mallenom.Framework.Dpi,Mallenom.Framework.Dpi)">
            <summary>Оператор сравнения экземпляров <see cref="T:Mallenom.Framework.Dpi"/>.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если экземпляры <see cref="T:Mallenom.Framework.Dpi"/> равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.Dpi.op_Inequality(Mallenom.Framework.Dpi,Mallenom.Framework.Dpi)">
            <summary>Оператор сравнения экземпляров <see cref="T:Mallenom.Framework.Dpi"/>.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если экземпляры <see cref="T:Mallenom.Framework.Dpi"/> не равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.Dpi.GetHashCode">
            <summary>Возвращает хэш-код данного экземпляра <see cref="T:Mallenom.Framework.Dpi"/>.</summary>
            <returns>хэш-код данного экземпляра <see cref="T:Mallenom.Framework.Dpi"/>.</returns>
        </member>
        <member name="M:Mallenom.Framework.Dpi.Equals(System.Object)">
            <summary>Сравнивает данный экземпляр <see cref="T:Mallenom.Framework.Dpi"/> с другим объектом.</summary>
            <param name="obj">Объект для сравнения.</param>
            <returns><c>true</c>, если объекты равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.Dpi.Equals(Mallenom.Framework.Dpi)">
            <summary>Сравнивает данный экземпляр <see cref="T:Mallenom.Framework.Dpi"/> с другим объектом.</summary>
            <param name="other">Объект для сравнения.</param>
            <returns><c>true</c>, если объекты равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.Dpi.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.Framework.Dpi"/>.</summary>
            <returns>Строковое представление данного экземпляра <see cref="T:Mallenom.Framework.Dpi"/>.</returns>
        </member>
        <member name="T:Mallenom.Framework.BitConverterEx">
            <summary>
            Предоставляет перегруженный метод GetBytes(), не создающий экземпляры массивов байт.
            </summary>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>Copies the specified Boolean value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 1 byte.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.Char,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.Char"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.Char"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 2 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.Double,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.Double"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 8 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.Int16"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.Int16"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 2 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.Int32"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.Int32"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 4 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.Int64"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.Int64"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 8 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.Single,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.Single"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.Single"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 4 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.UInt16"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.UInt16"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 2 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.UInt32"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.UInt32"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 4 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="M:Mallenom.Framework.BitConverterEx.GetBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>Copies the specified <see cref="T:System.UInt64"/> value to an array of bytes.</summary>
            <param name="value">A <see cref="T:System.UInt64"/> value.</param>
            <param name="array">Array which receives resulting values.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Writes 8 bytes.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is negative or specifies too small array segment.
            </exception>
        </member>
        <member name="T:Mallenom.Framework.ArrayExtensions">
            <summary>Extension methods for arrays.</summary>
        </member>
        <member name="M:Mallenom.Framework.ArrayExtensions.Clone``1(``0[],System.Int32,System.Int32)">
            <summary>Clones array segment.</summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Array.</param>
            <param name="startIndex">Segment start.</param>
            <param name="length">Segment length.</param>
            <returns>Array segment.</returns>
        </member>
        <member name="T:Mallenom.Framework.CompositeKey">
            <summary>Helper class for creating composite keys.</summary>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey.Create``2(``0,``1)">
            <summary>Creates composite key from 2 parts.</summary>
            <typeparam name="T1">Type of the first part.</typeparam>
            <typeparam name="T2">Type of the second part.</typeparam>
            <param name="key1">First part of the composite key.</param>
            <param name="key2">Second part of the composite key.</param>
            <returns>Created composite key.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey.Create``3(``0,``1,``2)">
            <summary>Creates composite key from 3 parts.</summary>
            <typeparam name="T1">Type of the first part.</typeparam>
            <typeparam name="T2">Type of the second part.</typeparam>
            <typeparam name="T3">Type of the third part.</typeparam>
            <param name="key1">First part of the composite key.</param>
            <param name="key2">Second part of the composite key.</param>
            <param name="key3">Third part of the composite key.</param>
            <returns>Created composite key.</returns>
        </member>
        <member name="T:Mallenom.Framework.CompositeKey`2">
            <summary>Composite key, consisting of 2 parts.</summary>
            <typeparam name="T1">Type of the first part.</typeparam>
            <typeparam name="T2">Type of the second part.</typeparam>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`2.#ctor(`0,`1)">
            <summary>Initializes a new instance of the <see cref="T:Mallenom.Framework.CompositeKey`2"/> struct.</summary>
            <param name="key1">First part of the composite key.</param>
            <param name="key2">Second part of the composite key.</param>
        </member>
        <member name="P:Mallenom.Framework.CompositeKey`2.Key1">
            <summary>Returns first part of the composite key.</summary>
            <value>First part of the composite key.</value>
        </member>
        <member name="P:Mallenom.Framework.CompositeKey`2.Key2">
            <summary>Returns second part of the composite key.</summary>
            <value>Seond part of the composite key.</value>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`2.op_Equality(Mallenom.Framework.CompositeKey{`0,`1},Mallenom.Framework.CompositeKey{`0,`1})">
            <summary>Equality operator.</summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c>, if instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`2.op_Inequality(Mallenom.Framework.CompositeKey{`0,`1},Mallenom.Framework.CompositeKey{`0,`1})">
            <summary>Inequality operator.</summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>false</c>, if instances are equal; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`2.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`2.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`2.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`2.Equals(Mallenom.Framework.CompositeKey{`0,`1})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Mallenom.Framework.CompositeKey`3">
            <summary>Composite key, consisting of 2 parts.</summary>
            <typeparam name="T1">Type of the first part.</typeparam>
            <typeparam name="T2">Type of the second part.</typeparam>
            <typeparam name="T3">Type of the third part.</typeparam>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`3.#ctor(`0,`1,`2)">
            <summary>Initializes a new instance of the <see cref="T:Mallenom.Framework.CompositeKey`3"/> struct.</summary>
            <param name="key1">First part of the composite key.</param>
            <param name="key2">Second part of the composite key.</param>
            <param name="key3">Third part of the composite key.</param>
        </member>
        <member name="P:Mallenom.Framework.CompositeKey`3.Key1">
            <summary>Returns first part of the composite key.</summary>
            <value>First part of the composite key.</value>
        </member>
        <member name="P:Mallenom.Framework.CompositeKey`3.Key2">
            <summary>Returns second part of the composite key.</summary>
            <value>Seond part of the composite key.</value>
        </member>
        <member name="P:Mallenom.Framework.CompositeKey`3.Key3">
            <summary>Returns third part of the composite key.</summary>
            <value>Third part of the composite key.</value>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`3.op_Equality(Mallenom.Framework.CompositeKey{`0,`1,`2},Mallenom.Framework.CompositeKey{`0,`1,`2})">
            <summary>Equality operator.</summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c>, if instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`3.op_Inequality(Mallenom.Framework.CompositeKey{`0,`1,`2},Mallenom.Framework.CompositeKey{`0,`1,`2})">
            <summary>Inequality operator.</summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>false</c>, if instances are equal; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`3.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`3.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`3.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Mallenom.Framework.CompositeKey`3.Equals(Mallenom.Framework.CompositeKey{`0,`1,`2})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Mallenom.Framework.DateTimeExtensions">
            <summary>Extension methods for <see cref="T:System.DateTime"/>.</summary>
        </member>
        <member name="M:Mallenom.Framework.DateTimeExtensions.FormatISO8601(System.DateTime)">
            <summary>Formats date in ISO8601 format (1989-10-24 15:22:03 +0200).</summary>
            <param name="date">Date.</param>
            <returns>ISO8601-formatted date.</returns>
        </member>
        <member name="M:Mallenom.Framework.DateTimeExtensions.FormatRFC2822(System.DateTime)">
            <summary>Formats date in RFC2822 format (Tue, 7 Dec 2010 21:30:44 +0300).</summary>
            <param name="date">Date.</param>
            <returns>RFC2822-formatted date.</returns>
        </member>
        <member name="M:Mallenom.Framework.DateTimeExtensions.ReinterpretAs(System.DateTime,System.DateTimeKind)">
            <summary>Changes DateTime kindwhile keepeng the same date and time.</summary>
            <param name="dateTime">A <see cref="T:System.DateTime"/> value.</param>
            <param name="kind">New <see cref="T:System.DateTimeKind"/>.</param>
            <returns><see cref="T:System.DateTime"/> of specified kind.</returns>
        </member>
        <member name="M:Mallenom.Framework.DateTimeExtensions.ConvertTo(System.DateTime,System.DateTimeKind)">
            <summary>Converts <see cref="T:System.DateTime"/> to a specified kind.</summary>
            <param name="dateTime">A <see cref="T:System.DateTime"/> value.</param>
            <param name="kind"><see cref="T:System.DateTimeKind"/> to convert to.</param>
            <returns>Converted <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="T:Mallenom.Framework.DictionaryExtensions">
            <summary>Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
        </member>
        <member name="M:Mallenom.Framework.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">Dictionary to get value from.</param>
            <param name="key">The key whose value to get.</param>
            <returns>
            Value associated with the specified key or default(<typeparamref name="TValue"/>)
            if specified key is not present in the dictionary.
            </returns>
        </member>
        <member name="M:Mallenom.Framework.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">Dictionary to get value from.</param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultVaue">Value to return if specified key is not found.</param>
            <returns>
            Value associated with the specified key or <paramref name="defaultVaue"/>
            if specified key is not present in the dictionary.
            </returns>
        </member>
        <member name="M:Mallenom.Framework.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">Dictionary to get value from.</param>
            <param name="key">The key whose value to get.</param>
            <param name="getDefaultVaue">Value to return if specified key is not found.</param>
            <returns>
            Value associated with the specified key or result of <paramref name="getDefaultVaue"/>
            if specified key is not present in the dictionary.
            </returns>
        </member>
        <member name="T:Mallenom.Framework.DpiConverter">
            <summary>Переводит размеры, предназначенные для одного DPI, в другой DPI.</summary>
        </member>
        <member name="P:Mallenom.Framework.DpiConverter.DefaultToCurrent">
            <summary>Возвращает конвертер из DPI по умолчанию в текущий системный DPI.</summary>
            <value>Конвертер из DPI по умолчанию в текущий системный DPI.</value>
        </member>
        <member name="M:Mallenom.Framework.DpiConverter.#ctor(Mallenom.Framework.Dpi,Mallenom.Framework.Dpi)">
            <summary>Создание <see cref="T:Mallenom.Framework.DpiConverter"/>.</summary>
            <param name="from">DPI, из которого производится преобразование.</param>
            <param name="to">DPI, в которое производится преобразование.</param>
        </member>
        <member name="P:Mallenom.Framework.DpiConverter.From">
            <summary>Возвращает DPI, из которого происходит преобразование.</summary>
            <value>DPI, из которого производится преобразование.</value>
        </member>
        <member name="P:Mallenom.Framework.DpiConverter.To">
            <summary>Возвращает DPI, в которое происходит преобразование.</summary>
            <value>DPI, в которое производится преобразование.</value>
        </member>
        <member name="M:Mallenom.Framework.DpiConverter.RescaleX(System.Int32)">
            <summary>Преобразует размер или координату по оси OX.</summary>
            <param name="x">Размер или координата по оси OX.</param>
            <returns>Размер или координата для целевого DPI.</returns>
        </member>
        <member name="M:Mallenom.Framework.DpiConverter.RescaleY(System.Int32)">
            <summary>Преобразует размер или координату по оси OY.</summary>
            <param name="y">Размер или координата по оси OY.</param>
            <returns>Размер или координата для целевого DPI.</returns>
        </member>
        <member name="M:Mallenom.Framework.DpiConverter.RescaleX(System.Single)">
            <summary>Преобразует размер или координату по оси OX.</summary>
            <param name="x">Размер или координата по оси OX.</param>
            <returns>Размер или координата для целевого DPI.</returns>
        </member>
        <member name="M:Mallenom.Framework.DpiConverter.RescaleY(System.Single)">
            <summary>Преобразует размер или координату по оси OY.</summary>
            <param name="y">Размер или координата по оси OY.</param>
            <returns>Размер или координата для целевого DPI.</returns>
        </member>
        <member name="T:Mallenom.Framework.GdiPlusDpiConverterExtensions">
            <summary>Расширения для <see cref="T:Mallenom.Framework.DpiConverter"/> для типов GDI+.</summary>
            <remarks>Позволяет не навязывать классу <see cref="T:Mallenom.Framework.DpiConverter"/> зависимость от GDI+.</remarks>
        </member>
        <member name="M:Mallenom.Framework.GdiPlusDpiConverterExtensions.Rescale(Mallenom.Framework.DpiConverter,System.Drawing.Point)">
            <summary>Преобразует точку.</summary>
            <param name="dpiConverter">Конвертер DPI.</param>
            <param name="point">Исходная точка.</param>
            <returns>Преобразованная точка.</returns>
        </member>
        <member name="M:Mallenom.Framework.GdiPlusDpiConverterExtensions.Rescale(Mallenom.Framework.DpiConverter,System.Drawing.PointF)">
            <summary>Преобразует точку.</summary>
            <param name="dpiConverter">Конвертер DPI.</param>
            <param name="point">Исходная точка.</param>
            <returns>Преобразованная точка.</returns>
        </member>
        <member name="M:Mallenom.Framework.GdiPlusDpiConverterExtensions.Rescale(Mallenom.Framework.DpiConverter,System.Drawing.Size)">
            <summary>Преобразует размер.</summary>
            <param name="dpiConverter">Конвертер DPI.</param>
            <param name="size">Исходный размер.</param>
            <returns>Преобразованный размер.</returns>
        </member>
        <member name="M:Mallenom.Framework.GdiPlusDpiConverterExtensions.Rescale(Mallenom.Framework.DpiConverter,System.Drawing.SizeF)">
            <summary>Преобразует размер.</summary>
            <param name="dpiConverter">Конвертер DPI.</param>
            <param name="size">Исходный размер.</param>
            <returns>Преобразованный размер.</returns>
        </member>
        <member name="M:Mallenom.Framework.GdiPlusDpiConverterExtensions.Rescale(Mallenom.Framework.DpiConverter,System.Drawing.Rectangle)">
            <summary>Преобразует прямоугольник.</summary>
            <param name="dpiConverter">Конвертер DPI.</param>
            <param name="rectangle">Исходный прямоугольник.</param>
            <returns>Преобразованный прямоугольник.</returns>
        </member>
        <member name="M:Mallenom.Framework.GdiPlusDpiConverterExtensions.Rescale(Mallenom.Framework.DpiConverter,System.Drawing.RectangleF)">
            <summary>Преобразует прямоугольник.</summary>
            <param name="dpiConverter">Конвертер DPI.</param>
            <param name="rectangle">Исходный прямоугольник.</param>
            <returns>Преобразованный прямоугольник.</returns>
        </member>
        <member name="T:Mallenom.Framework.EventHandlerExtensions">
            <summary>Extension methods for raising events.</summary>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise(System.EventHandler,System.Object)">
            <summary>Raise event.</summary>
            <param name="handler">Event handler.</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Raise event.</summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event args.</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.Func{System.EventArgs})">
            <summary>Raise event.</summary>
            <param name="handler">Event handler.</param>
            <param name="args">Function, returning event args (not called if <paramref name="handler"/> == null).</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Raise event.</summary>
            <typeparam name="T">Type of event args.</typeparam>
            <param name="handler">Event handler.</param>
            <param name="args">Event args.</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,System.Func{``0})">
            <summary>Raise event.</summary>
            <typeparam name="T">Type of event args.</typeparam>
            <param name="handler">Event handler.</param>
            <param name="args">Function, returning event args (not called if <paramref name="handler"/> == null).</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise(System.ComponentModel.EventHandlerList,System.Object,System.Object)">
            <summary>Raise event from <see cref="T:System.ComponentModel.EventHandlerList"/>.</summary>
            <param name="evhList">Event list.</param>
            <param name="event">Event handler key.</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise(System.ComponentModel.EventHandlerList,System.Object,System.Object,System.EventArgs)">
            <summary>Raise event from <see cref="T:System.ComponentModel.EventHandlerList"/>.</summary>
            <param name="evhList">Event list.</param>
            <param name="event">Event handler key.</param>
            <param name="args">Event args.</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise(System.ComponentModel.EventHandlerList,System.Object,System.Object,System.Func{System.EventArgs})">
            <summary>Raise event from <see cref="T:System.ComponentModel.EventHandlerList"/>.</summary>
            <param name="evhList">Event list.</param>
            <param name="event">Event handler key.</param>
            <param name="args">Function, returning event args (not called if event handler is not set).</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise``1(System.ComponentModel.EventHandlerList,System.Object,System.Object,``0)">
            <summary>Raise event from <see cref="T:System.ComponentModel.EventHandlerList"/>.</summary>
            <typeparam name="T">Type of event args.</typeparam>
            <param name="evhList">Event list.</param>
            <param name="event">Event handler key.</param>
            <param name="args">Event args.</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="M:Mallenom.Framework.EventHandlerExtensions.Raise``1(System.ComponentModel.EventHandlerList,System.Object,System.Object,System.Func{``0})">
            <summary>Raise event from <see cref="T:System.ComponentModel.EventHandlerList"/>.</summary>
            <typeparam name="T">Type of event args.</typeparam>
            <param name="evhList">Event list.</param>
            <param name="event">Event handler key.</param>
            <param name="args">Function, returning event args (not called if event handler is not set).</param>
            <param name="sender">Event sender.</param>
        </member>
        <member name="T:Mallenom.Framework.GraphicsExtensions">
            <summary>Extension methods for <see cref="T:System.Drawing.Graphics"/>.</summary>
        </member>
        <member name="T:Mallenom.Framework.LinkedListExtensions">
            <summary>Extension methods for <see cref="T:System.Collections.Generic.LinkedList`1"/>.</summary>
        </member>
        <member name="M:Mallenom.Framework.LinkedListExtensions.EnumerateNodes``1(System.Collections.Generic.LinkedList{``0})">
            <summary>Represent <see cref="T:System.Collections.Generic.LinkedList`1"/> as IEnumerable&lt;LinkedListNode&lt;T&gt;&gt;.</summary>
            <typeparam name="T">Type of list elements.</typeparam>
            <param name="list">Linked list.</param>
            <returns>LinkedListNode-enumerable representation of linked list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.Events.ActivatorEventFactory">
            <summary>Простая фабрика событий, использующая <see cref="T:System.Activator"/>.</summary>
        </member>
        <member name="T:Mallenom.Events.DelegateReference">
            <summary>Вспомогательные методы для создания ссылок на делегаты.</summary>
        </member>
        <member name="T:Mallenom.Events.DelegateReference.StrongDelegateReference">
            <summary>Сильная ссылка на делегат.</summary>
        </member>
        <member name="T:Mallenom.Events.DelegateReference.WeakDelegateReference">
            <summary>Слабая ссылка на делегат.</summary>
        </member>
        <member name="M:Mallenom.Events.DelegateReference.Create(System.Delegate,System.Boolean)">
            <summary>Создает ссылку на делегат.</summary>
            <param name="delegate">Делегат.</param>
            <param name="keepSubscriberReference">Тип создаваемой ссылки (сильная/слабая).</param>
            <returns>Ссылка на делегат.</returns>
        </member>
        <member name="T:Mallenom.Events.EventAggregator">
            <summary>Агрегатор событий.</summary>
            <remarks>Thread-safe.</remarks>
        </member>
        <member name="F:Mallenom.Events.EventAggregator._events">
            <summary>События.</summary>
        </member>
        <member name="F:Mallenom.Events.EventAggregator._eventFactory">
            <summary>Фабрика событий.</summary>
        </member>
        <member name="F:Mallenom.Events.EventAggregator._factoryMethod">
            <summary>Метод создания событий.</summary>
        </member>
        <member name="M:Mallenom.Events.EventAggregator.#ctor(Mallenom.Events.IEventFactory)">
            <summary>Создание <see cref="T:Mallenom.Events.EventAggregator"/>.</summary>
            <param name="eventFactory">Фабрика событий.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventFactory"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Events.EventAggregator.#ctor">
            <summary>Создание <see cref="T:Mallenom.Events.EventAggregator"/>.</summary>
        </member>
        <member name="M:Mallenom.Events.EventAggregator.GetEvent``1">
            <summary>Возвращает указанное событие.</summary>
            <typeparam name="T">Тип события.</typeparam>
            <returns>Событие указанного типа.</returns>
        </member>
        <member name="T:Mallenom.Events.EventBase`1">
            <summary>Базовый класс события с аргументами.</summary>
            <typeparam name="T">Тип аргументов.</typeparam>
            <remarks>Thread-safe.</remarks>
        </member>
        <member name="F:Mallenom.Events.EventBase`1._subscriptions">
            <summary>Список подписок на событие.</summary>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.#ctor(Mallenom.Events.IPublishPrincipal)">
            <summary>Создание <see cref="T:Mallenom.Events.EventBase`1"/>.</summary>
            <param name="publishPrincipal">Объект проверки прав генерации события.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="publishPrincipal"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.#ctor">
            <summary>Создание <see cref="T:Mallenom.Events.EventBase`1"/>.</summary>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.OnUnsubscribed(System.Object,System.EventArgs)">
            <summary>Вызывается при отписке от события.</summary>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.CreateSubscription(Mallenom.Events.IEventDispatcher,System.Action{`0},System.Predicate{`0},System.Boolean)">
            <summary>Создает подписку на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="filter">Фильтр событий.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Созданная подписка.</returns>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Subscribe(System.Action{`0})">
            <summary>Подписывает на событие.</summary>
            <param name="handler">Обработчик события.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Subscribe(System.Action{`0},System.Boolean)">
            <summary>Подписывает на событие.</summary>
            <param name="handler">Обработчик события.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Subscribe(System.Action{`0},System.Predicate{`0})">
            <summary>Подписывает на событие.</summary>
            <param name="handler">Обработчик события.</param>
            <param name="filter">Фильтр событий.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Subscribe(System.Action{`0},System.Predicate{`0},System.Boolean)">
            <summary>Подписывает на событие.</summary>
            <param name="handler">Обработчик события.</param>
            <param name="filter">Фильтр событий.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Subscribe(Mallenom.Events.IEventDispatcher,System.Action{`0})">
            <summary>Подписывает на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventDispatcher"/> == <c>null</c> или <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Subscribe(Mallenom.Events.IEventDispatcher,System.Action{`0},System.Boolean)">
            <summary>Подписывает на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventDispatcher"/> == <c>null</c> или <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Subscribe(Mallenom.Events.IEventDispatcher,System.Action{`0},System.Predicate{`0})">
            <summary>Подписывает на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="filter">Фильтр событий.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventDispatcher"/> == <c>null</c> или <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Subscribe(Mallenom.Events.IEventDispatcher,System.Action{`0},System.Predicate{`0},System.Boolean)">
            <summary>Подписывает на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="filter">Фильтр событий.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventDispatcher"/> == <c>null</c> или <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.SubscribeCore(Mallenom.Events.IEventDispatcher,System.Action{`0},System.Predicate{`0},System.Boolean)">
            <summary>Подписывает на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="filter">Фильтр событий.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Токен для отмены подписки.</returns>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Publish(`0,Mallenom.Events.IPublishIdentity)">
            <summary>Генерирует событие.</summary>
            <param name="identity">Обозначает сущность, вызывающую событие.</param>
            <param name="payload">Аргументы события.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="identity"/> == <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">Нет прав на генерацию события.</exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.Publish(`0)">
            <summary>Генерирует событие.</summary>
            <param name="payload">Аргументы события.</param>
            <exception cref="T:System.InvalidOperationException">Нет прав на генерацию события.</exception>
        </member>
        <member name="M:Mallenom.Events.EventBase`1.PublishCore(`0)">
            <summary>Генерирует событие.</summary>
            <param name="payload">Аргументы события.</param>
        </member>
        <member name="T:Mallenom.Events.EventBase">
            <summary>Базовый класс события без аргументов.</summary>
            <remarks>Thread-safe.</remarks>
        </member>
        <member name="F:Mallenom.Events.EventBase._subscriptions">
            <summary>Список подписок на событие.</summary>
        </member>
        <member name="M:Mallenom.Events.EventBase.#ctor(Mallenom.Events.IPublishPrincipal)">
            <summary>Создание <see cref="T:Mallenom.Events.EventBase"/>.</summary>
            <param name="publishPrincipal">Объект проверки прав генерации события.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="publishPrincipal"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Events.EventBase.#ctor">
            <summary>Создание <see cref="T:Mallenom.Events.EventBase"/>.</summary>
        </member>
        <member name="M:Mallenom.Events.EventBase.OnUnsubscribed(System.Object,System.EventArgs)">
            <summary>Вызывается при отписке от события.</summary>
        </member>
        <member name="M:Mallenom.Events.EventBase.CreateSubscription(Mallenom.Events.IEventDispatcher,System.Action,System.Boolean)">
            <summary>Создает подписку на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Созданная подписка на событие.</returns>
        </member>
        <member name="M:Mallenom.Events.EventBase.Subscribe(System.Action)">
            <summary>Подписывает на событие.</summary>
            <param name="handler">Обработчик события.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase.Subscribe(System.Action,System.Boolean)">
            <summary>Подписывает на событие.</summary>
            <param name="handler">Обработчик события.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase.Subscribe(Mallenom.Events.IEventDispatcher,System.Action)">
            <summary>Подписывает на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventDispatcher"/> == <c>null</c> или <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase.Subscribe(Mallenom.Events.IEventDispatcher,System.Action,System.Boolean)">
            <summary>Подписывает на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Токен для отмены подписки.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventDispatcher"/> == <c>null</c> или <paramref name="handler"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Events.EventBase.SubscribeCore(Mallenom.Events.IEventDispatcher,System.Action,System.Boolean)">
            <summary>Подписывает на событие.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="keepSubscriberRefrenceAlive">Держать ссылку на обработчик или нет.</param>
            <returns>Токен для отмены подписки.</returns>
        </member>
        <member name="M:Mallenom.Events.EventBase.Publish(Mallenom.Events.IPublishIdentity)">
            <summary>Генерирует событие.</summary>
            <param name="identity">Обозначает сущность, вызывающую событие.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="identity"/> == <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">Нет прав на генерацию события.</exception>
        </member>
        <member name="M:Mallenom.Events.EventBase.Publish">
            <summary>Генерирует событие.</summary>
            <exception cref="T:System.InvalidOperationException">Нет прав на генерацию события.</exception>
        </member>
        <member name="M:Mallenom.Events.EventBase.PublishCore">
            <summary>Генерирует событие.</summary>
        </member>
        <member name="T:Mallenom.Events.EventSubscriptionToken">
            <summary>Токен подписки на событие.</summary>
        </member>
        <member name="F:Mallenom.Events.EventSubscriptionToken._isSubscribed">
            <summary>Флаг активности подписки.</summary>
        </member>
        <member name="M:Mallenom.Events.EventSubscriptionToken.#ctor">
            <summary>Создание <see cref="T:Mallenom.Events.EventSubscriptionToken"/>.</summary>
        </member>
        <member name="E:Mallenom.Events.EventSubscriptionToken.Unsubscribed">
            <summary>Вызывается при отписке от события.</summary>
        </member>
        <member name="M:Mallenom.Events.EventSubscriptionToken.OnUnsubscribed">
            <summary>Вызывается при отписке от события.</summary>
        </member>
        <member name="P:Mallenom.Events.EventSubscriptionToken.IsSubscribed">
            <summary>Возвращает флаг активности подписки на событие.</summary>
            <value><c>true</c>, если подписка активна, иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.Events.EventSubscriptionToken.Dispose">
            <summary>Отписывается от события.</summary>
        </member>
        <member name="F:Mallenom.Events.GetEventHandlerInvokerResult.GarbageCollected">
            <summary>Подписчик больше не доступен.</summary>
        </member>
        <member name="F:Mallenom.Events.GetEventHandlerInvokerResult.Rejected">
            <summary>Фильтр не пройден.</summary>
        </member>
        <member name="F:Mallenom.Events.GetEventHandlerInvokerResult.Success">
            <summary>Подписчик должен быть оповещен.</summary>
        </member>
        <member name="T:Mallenom.Events.EventRoot">
            <summary>Базовый класс всех событий.</summary>
        </member>
        <member name="M:Mallenom.Events.EventRoot.#ctor(Mallenom.Events.IPublishPrincipal)">
            <summary>Создание <see cref="T:Mallenom.Events.EventRoot"/>.</summary>
            <param name="principal">Объект проверки прав генерации события.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="principal"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.Events.EventRoot.Principal">
            <summary>Возвращает объект проверки прав генерации события.</summary>
            <value>Объект проверки прав генерации события.</value>
        </member>
        <member name="T:Mallenom.Events.EventSubscription`1">
            <summary>Подписка на событие с аргументами.</summary>
            <typeparam name="T">Тип аргументов события.</typeparam>
        </member>
        <member name="F:Mallenom.Events.EventSubscription`1._handler">
            <summary>Обработчик события.</summary>
        </member>
        <member name="F:Mallenom.Events.EventSubscription`1._filter">
            <summary>Фильтр.</summary>
        </member>
        <member name="M:Mallenom.Events.EventSubscription`1.#ctor(Mallenom.Events.IEventDispatcher,Mallenom.Events.IDelegateReference,Mallenom.Events.IDelegateReference)">
            <summary>Создание <see cref="T:Mallenom.Events.EventSubscription`1"/>.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
            <param name="filter">Фильтр.</param>
        </member>
        <member name="T:Mallenom.Events.EventSubscription">
            <summary>Подписка на событие без аргументов.</summary>
        </member>
        <member name="F:Mallenom.Events.EventSubscription._handler">
            <summary>Обработчик события.</summary>
        </member>
        <member name="M:Mallenom.Events.EventSubscription.#ctor(Mallenom.Events.IEventDispatcher,Mallenom.Events.IDelegateReference)">
            <summary>Создание <see cref="T:Mallenom.Events.EventSubscription"/>.</summary>
            <param name="eventDispatcher">Диспетчер событий.</param>
            <param name="handler">Обработчик события.</param>
        </member>
        <member name="T:Mallenom.Events.IEventDispatcher">
            <summary>Диспетчер событий.</summary>
            <remarks>Определяет способ вызова обработчика события.</remarks>
        </member>
        <member name="M:Mallenom.Events.IEventDispatcher.Execute(System.Action)">
            <summary>Выполнить обработчик события без аргументов.</summary>
            <param name="action">Обработчик события.</param>
        </member>
        <member name="M:Mallenom.Events.IEventDispatcher.Execute``1(System.Action{``0},``0)">
            <summary>Выполнить обработчик события с аргументами.</summary>
            <typeparam name="T">Тип аргументов.</typeparam>
            <param name="action">Обработчик события.</param>
            <param name="payload">Аргументы события.</param>
        </member>
        <member name="T:Mallenom.Events.IDelegateReference">
            <summary>Ссылка на делегат.</summary>
            <remarks>Позволяет иметь слабые ссылки на подписчика в случае необходимости.</remarks>
        </member>
        <member name="P:Mallenom.Events.IDelegateReference.Target">
            <summary>Возвращает делегат.</summary>
            <value>Делегат или <c>null</c>, если он был собран сборщиком мусора.</value>
        </member>
        <member name="T:Mallenom.Events.IEventAggregator">
            <summary>Агрегатор событий.</summary>
        </member>
        <member name="M:Mallenom.Events.IEventAggregator.GetEvent``1">
            <summary>Возвращает указанное событие.</summary>
            <typeparam name="T">Тип события.</typeparam>
            <returns>Событие указанного типа.</returns>
        </member>
        <member name="T:Mallenom.Events.EventDispatcher">
            <summary>Дефолтные диспетчеры событий.</summary>
        </member>
        <member name="P:Mallenom.Events.EventDispatcher.ExecuteOnPublisherThread">
            <summary>Выполняет обработчик в потоке паблишера.</summary>
        </member>
        <member name="P:Mallenom.Events.EventDispatcher.ExecuteOnThreadPool">
            <summary>Выполняет обработчик в пуле потоков.</summary>
        </member>
        <member name="P:Mallenom.Events.EventDispatcher.ExecuteOnDedicatedThread">
            <summary>Выполняет обработчик в отдельном потоке.</summary>
        </member>
        <member name="M:Mallenom.Events.EventDispatcher.FromSynchronizationContext(System.Threading.SynchronizationContext)">
            <summary>Выполняет обработчик события, используя указанный контекст синхронизации.</summary>
            <value>Контекст синхронизации.</value>
        </member>
        <member name="M:Mallenom.Events.EventDispatcher.FromCurrentSynchronizationContext">
            <summary>Выполняет обработчик события, используя текущий контекст синхронизации.</summary>
        </member>
        <member name="T:Mallenom.Events.IEventFactory">
            <summary>Фабрика событий.</summary>
        </member>
        <member name="M:Mallenom.Events.IEventFactory.CreateEvent(System.Type)">
            <summary>Создает событие указанного типа.</summary>
            <param name="eventType">Тип события.</param>
            <returns>Созданное событие.</returns>
        </member>
        <member name="T:Mallenom.Events.IEventHandlerInvoker">
            <summary>Готовый к вызову обработчик события.</summary>
        </member>
        <member name="M:Mallenom.Events.IEventHandlerInvoker.Invoke">
            <summary>Вызвать обработчик события.</summary>
        </member>
        <member name="T:Mallenom.Events.IEventHandlerInvoker`1">
            <summary>Готовый к вызову обработчик события.</summary>
            <typeparam name="T">Тип аргументов события.</typeparam>
        </member>
        <member name="M:Mallenom.Events.IEventHandlerInvoker`1.Invoke(`0)">
            <summary>Вызвать обработчик события.</summary>
            <param name="payload">Аргументы события.</param>
        </member>
        <member name="T:Mallenom.Events.IEventSubscription`1">
            <summary>Подписка на событие с аргументами.</summary>
            <typeparam name="T">Тип аргументов события.</typeparam>
        </member>
        <member name="P:Mallenom.Events.IEventSubscription`1.Token">
            <summary>Возвращает токен данной подписки.</summary>
        </member>
        <member name="M:Mallenom.Events.IEventSubscription`1.GetEventHandlerInvoker(`0,Mallenom.Events.IEventHandlerInvoker{`0}@)">
            <summary>Создает объект для вызова обработчика события по данной подписке.</summary>
            <param name="payload">Аргументы события.</param>
            <param name="eventHandlerInvoker">Объект для вызова обработчика события по данной подписке.</param>
            <returns>Результат операции. <see cref="T:Mallenom.Events.GetEventHandlerInvokerResult"/>.</returns>
        </member>
        <member name="T:Mallenom.Events.IEventSubscription">
            <summary>Подписка на событие без аргументов.</summary>
        </member>
        <member name="P:Mallenom.Events.IEventSubscription.Token">
            <summary>Возвращает токен данной подписки.</summary>
        </member>
        <member name="M:Mallenom.Events.IEventSubscription.GetEventHandlerInvoker(Mallenom.Events.IEventHandlerInvoker@)">
            <summary>Создает объект для вызова обработчика события по данной подписке.</summary>
            <param name="eventHandlerInvoker">Объект для вызова обработчика события по данной подписке.</param>
            <returns>Результат операции. <see cref="T:Mallenom.Events.GetEventHandlerInvokerResult"/>.</returns>
        </member>
        <member name="T:Mallenom.Events.IEventSubscriptionToken">
            <summary>Токен подписки на событие.</summary>
            <remarks>Вызов <see cref="M:IDisposable.Dispose()"/> приведет к отписке от события.</remarks>
        </member>
        <member name="E:Mallenom.Events.IEventSubscriptionToken.Unsubscribed">
            <summary>Вызывается при отписке от события.</summary>
        </member>
        <member name="P:Mallenom.Events.IEventSubscriptionToken.IsSubscribed">
            <summary>Возвращает флаг активности подписки на событие.</summary>
            <value><c>true</c>, если подписка активна, иначе - <c>false</c>.</value>
        </member>
        <member name="T:Mallenom.Events.IPublishIdentity">
            <summary>Субъект, генерирующий событие.</summary>
        </member>
        <member name="P:Mallenom.Events.IPublishIdentity.Name">
            <summary>Возвращает строковый идентификатор субъекта.</summary>
            <value>Строковый идентификатор субъекта.</value>
        </member>
        <member name="T:Mallenom.Events.PublishIdentity">
            <summary>Субъект проверки прав на вызов события.</summary>
        </member>
        <member name="P:Mallenom.Events.PublishIdentity.Any">
            <summary>Субъект по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Events.PublishIdentity.ForType(System.Type)">
            <summary>Субъект, представляемый указанным типом.</summary>
            <param name="type">Тип.</param>
            <returns>Субъект проверки прав на вызов события по указанному типу.</returns>
        </member>
        <member name="M:Mallenom.Events.PublishIdentity.ForType``1">
            <summary>Субъект, представляемый указанным типом.</summary>
            <typeparam name="T">Тип.</typeparam>
            <returns>Субъект проверки прав на вызов события по указанному типу.</returns>
        </member>
        <member name="M:Mallenom.Events.PublishIdentity.ForCallingAssembly">
            <summary>Субъект, представляемый сборкой, из которой вызывается данный метод.</summary>
            <returns>Субъект проверки прав на вызов события по вызывающей сборке.</returns>
        </member>
        <member name="M:Mallenom.Events.PublishIdentity.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Events.PublishIdentity"/>.</summary>
            <param name="name">Имя субъекта.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.Events.PublishIdentity.Name">
            <summary>Возвращает имя субъекта.</summary>
            <value>Имя субъекта.</value>
        </member>
        <member name="M:Mallenom.Events.PublishIdentity.ToString">
            <summary>Возвращает строковое представление объекта <see cref="T:Mallenom.Events.PublishIdentity"/>.</summary>
            <returns>Строковое представление объекта <see cref="T:Mallenom.Events.PublishIdentity"/>.</returns>
        </member>
        <member name="T:Mallenom.Events.IPublishPrincipal">
            <summary>Проверяет права на вызов события.</summary>
        </member>
        <member name="M:Mallenom.Events.IPublishPrincipal.CanPublish(Mallenom.Events.IPublishIdentity)">
            <summary>Определяет, может ли указанная сущность вызвать событие.</summary>
            <param name="identity">Сущность.</param>
            <returns><c>true</c>, если событие может быть вызваноЮ иначе - <c>false</c>.</returns>
        </member>
        <member name="T:Mallenom.Events.PublishPrincipal">
            <summary>Проверяющий права на генерацию события.</summary>
        </member>
        <member name="P:Mallenom.Events.PublishPrincipal.AllowAll">
            <summary>Разрешает всем вызывать событие.</summary>
        </member>
        <member name="P:Mallenom.Events.PublishPrincipal.AllowNone">
            <summary>Никому не разрешает вызывать событие.</summary>
        </member>
        <member name="M:Mallenom.Events.PublishPrincipal.AllowTo(Mallenom.Events.IPublishIdentity)">
            <summary>Разрешает вызывать событие только указанной сущности.</summary>
            <param name="identity">Тот, кому можно вызывать событие.</param>
            <returns>Объект проверки прав.</returns>
        </member>
        <member name="M:Mallenom.Events.PublishPrincipal.AllowTo(Mallenom.Events.IPublishIdentity[])">
            <summary>Разрешает вызывать событие только указанным сущностям.</summary>
            <param name="identities">Те, кому разрешено вызывать событие.</param>
            <returns>Объект проверки прав.</returns>
        </member>
        <member name="M:Mallenom.Events.PublishPrincipal.#ctor(System.Predicate{Mallenom.Events.IPublishIdentity})">
            <summary>Создание <see cref="T:Mallenom.Events.PublishPrincipal"/>.</summary>
            <param name="predicate">Предикат, проверяющий права на вызов события.</param>
        </member>
        <member name="M:Mallenom.Events.PublishPrincipal.CanPublish(Mallenom.Events.IPublishIdentity)">
            <summary>Определяет, может ли указанная сущность вызвать событие.</summary>
            <param name="identity">Сущность.</param>
            <returns><c>true</c>, если событие может быть вызваноЮ иначе - <c>false</c>.</returns>
        </member>
        <member name="T:Mallenom.Localization.AssemblyLocaleLoadResult">
            <summary>Результат загрузки локализаций из сборки.</summary>
        </member>
        <member name="F:Mallenom.Localization.AssemblyLocaleLoadResult.AlreadyChecked">
            <summary>Сборка уже проходила процедуру проверки на наличие локализаций.</summary>
        </member>
        <member name="F:Mallenom.Localization.AssemblyLocaleLoadResult.Loaded">
            <summary>Локализации загружены.</summary>
        </member>
        <member name="F:Mallenom.Localization.AssemblyLocaleLoadResult.NoLocalesFound">
            <summary>В сорке нет локализаций.</summary>
        </member>
        <member name="T:Mallenom.Localization.AssemblyResourceLocaleSource">
            <summary>Источник локализации из ресурса сборки.</summary>
        </member>
        <member name="M:Mallenom.Localization.AssemblyResourceLocaleSource.#ctor(System.Globalization.CultureInfo,System.Reflection.Assembly,System.String)">
            <summary>Создание <see cref="T:Mallenom.Localization.AssemblyResourceLocaleSource"/>.</summary>
            <param name="cultureInfo">Культура, для которой предназначена локализация.</param>
            <param name="assembly">Сборка, в которой находится ресурс.</param>
            <param name="resourceName">Имя ресурса.</param>
        </member>
        <member name="P:Mallenom.Localization.AssemblyResourceLocaleSource.CultureInfo">
            <summary>Возвращает культуру, для которой предназначена локализация.</summary>
            <value>Культура, для которой предназначена локализация.</value>
        </member>
        <member name="P:Mallenom.Localization.AssemblyResourceLocaleSource.Assembly">
            <summary>Возвращает сборку, в которой находится ресурс.</summary>
            <value>Сборка, в которой находится ресурс.</value>
        </member>
        <member name="P:Mallenom.Localization.AssemblyResourceLocaleSource.ResourceName">
            <summary>Возвращает имя ресурса.</summary>
            <value>Имя ресурса.</value>
        </member>
        <member name="M:Mallenom.Localization.AssemblyResourceLocaleSource.Load(Mallenom.Localization.ILocaleLoadContext)">
            <summary>Загружает локализацию.</summary>
            <param name="context">Контекст загрузки локализации.</param>
        </member>
        <member name="T:Mallenom.Localization.ConstantString">
            <summary>Константная строка.</summary>
        </member>
        <member name="M:Mallenom.Localization.ConstantString.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Localization.ConstantString"/>.</summary>
            <param name="value">Значение строки.</param>
        </member>
        <member name="P:Mallenom.Localization.ConstantString.Value">
            <summary>Возвращает значение строки.</summary>
            <value>Значение строки.</value>
        </member>
        <member name="M:Mallenom.Localization.ConstantString.ToString">
            <summary>Возвращает значение строки.</summary>
            <value>Значение строки.</value>
        </member>
        <member name="M:Mallenom.Localization.ConstantString.Mallenom#Localization#IStringSource#GetValueForLocale(Mallenom.Localization.ILocale)">
            <summary>Возвращает значение строки для указанной локали.</summary>
            <param name="locale">Локаль.</param>
            <returns>Значение строки для указанной локали.</returns>
        </member>
        <member name="T:Mallenom.Localization.EnumLocalization">
            <summary>Вспомогательные методы для локализации enum-типов.</summary>
        </member>
        <member name="M:Mallenom.Localization.EnumLocalization.GetDisplayName``1(``0)">
            <summary>Возвращает локализованное описание указанного значения Enum-типа.</summary>
            <typeparam name="T">Тип enum'а.</typeparam>
            <param name="value">Значение enum'а.</param>
            <returns>Локализованное описание указанного значения enum'а.</returns>
        </member>
        <member name="M:Mallenom.Localization.EnumLocalization.GetDisplayName(System.Object)">
            <summary>Возвращает локализованное описание указанного значения Enum-типа.</summary>
            <param name="value">Значение enum'а.</param>
            <returns>Локализованное описание указанного значения enum'а.</returns>
        </member>
        <member name="T:Mallenom.Localization.IStringSource">
            <summary>Источник строки.</summary>
        </member>
        <member name="P:Mallenom.Localization.IStringSource.Value">
            <summary>Возвращает значение строки.</summary>
            <value>Значение строки.</value>
        </member>
        <member name="M:Mallenom.Localization.IStringSource.GetValueForLocale(Mallenom.Localization.ILocale)">
            <summary>Возвращает значение строки для указанной локали.</summary>
            <param name="locale">Локаль.</param>
            <returns>Значение строки для указанной локали.</returns>
        </member>
        <member name="T:Mallenom.Localization.LocalizationScopeAttribute">
            <summary>Обозначает пространство имен локализации.</summary>
        </member>
        <member name="M:Mallenom.Localization.LocalizationScopeAttribute.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Localization.LocalizationScopeAttribute"/>.</summary>
            <param name="localizationScope">Пространство имен локализации.</param>
        </member>
        <member name="P:Mallenom.Localization.LocalizationScopeAttribute.LocalizationScope">
            <summary>Возвращает пространство имен локализации.</summary>
            <value>Пространство имен локализации.</value>
        </member>
        <member name="T:Mallenom.Localization.LocalizedString">
            <summary>Локализованная строка.</summary>
        </member>
        <member name="M:Mallenom.Localization.LocalizedString.#ctor(System.String,System.String)">
            <summary>Создание <see cref="T:Mallenom.Localization.ConstantString"/>.</summary>
            <param name="stringId">Идентификатор строки.</param>
            <param name="fallback">Значенпие по умолчанию.</param>
        </member>
        <member name="P:Mallenom.Localization.LocalizedString.StringId">
            <summary>Возвращает идентификатор строки.</summary>
            <value>Идентфикатор строки.</value>
        </member>
        <member name="P:Mallenom.Localization.LocalizedString.Fallback">
            <summary>Возвращает значение строки по умолчанию.</summary>
            <value>Значение строки по умолчанию.</value>
        </member>
        <member name="P:Mallenom.Localization.LocalizedString.Value">
            <summary>Возвращает значение строки.</summary>
            <value>Значение строки.</value>
        </member>
        <member name="M:Mallenom.Localization.LocalizedString.GetValueForLocale(Mallenom.Localization.ILocale)">
            <summary>Возвращает значение строки для указанной локали.</summary>
            <param name="locale">Локаль.</param>
            <returns>Значение строки для указанной локали.</returns>
        </member>
        <member name="M:Mallenom.Localization.LocalizedString.ToString">
            <summary>Возвращает значение строки.</summary>
            <value>Значение строки.</value>
        </member>
        <member name="T:Mallenom.Localization.StringIdAttribute">
            <summary>Указывает идентификатор лоаклизованной строки.</summary>
        </member>
        <member name="M:Mallenom.Localization.StringIdAttribute.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Localization.StringIdAttribute"/>.</summary>
            <param name="stringId">Идентификатор локализованной строки.</param>
        </member>
        <member name="P:Mallenom.Localization.StringIdAttribute.StringId">
            <summary>Возвращает идентификатор строки.</summary>
            <value>Идентификатор локализованной строки.</value>
        </member>
        <member name="T:Mallenom.Localization.WinForms.ControlExtensions">
            <summary>Расширения для <see cref="T:System.Windows.Forms.Control"/>.</summary>
        </member>
        <member name="M:Mallenom.Localization.WinForms.ControlExtensions.Localize(System.Windows.Forms.Control,Mallenom.Localization.LocalizationScope)">
            <summary>Локализует указанный контрол и его дочерние контролы.</summary>
            <param name="control">Локализуемый контрол.</param>
            <param name="scope">Пространство имен локализации.</param>
        </member>
        <member name="T:Mallenom.Localization.WinForms.ControlTextLocalizationBinding">
            <summary>Локализация текста контрола.</summary>
        </member>
        <member name="T:Mallenom.Localization.WinForms.ElementLocalization">
            <summary>Привязка элемента к системе локализации.</summary>
        </member>
        <member name="T:Mallenom.Localization.WinForms.LocaleSelector">
            <summary>Селектор текущей локализации приложения в виде <see cref="T:System.Windows.Forms.ToolStripMenuItem"/>.</summary>
        </member>
        <member name="E:Mallenom.Localization.WinForms.LocaleSelector.Stopped">
            <summary>Отслеживание текущей локали остановлено.</summary>
        </member>
        <member name="M:Mallenom.Localization.WinForms.LocaleSelector.Create(System.Windows.Forms.ToolStripMenuItem)">
            <summary>Создает селектор локализации в виде подменю указанного элемента.</summary>
            <param name="menuItem">Элемент, для которого будет создан селектор.</param>
            <returns>Селектор локализации.</returns>
        </member>
        <member name="M:Mallenom.Localization.WinForms.LocalizationBinding.UpdateValue">
            <summary>Обновляет значение локализуемого параметра.</summary>
        </member>
        <member name="T:Mallenom.Localization.WinForms.StringLocalizationBinding">
            <summary>Привязка локализованной строки к параметру.</summary>
        </member>
        <member name="M:Mallenom.Localization.WinForms.StringLocalizationBinding.#ctor(System.String,System.String)">
            <summary>Создание <see cref="T:Mallenom.Localization.WinForms.StringLocalizationBinding"/>.</summary>
            <param name="stringId">Идентификатор строки.</param>
            <param name="fallback">Строка, используемая в случае отсутствия значения в локализации.</param>
        </member>
        <member name="P:Mallenom.Localization.WinForms.StringLocalizationBinding.StringId">
            <summary>Возвращает идентификатор строки.</summary>
            <value>Идентификатор строки.</value>
        </member>
        <member name="P:Mallenom.Localization.WinForms.StringLocalizationBinding.Fallback">
            <summary>Возвращает строку, используемую в случае отсутствия значения в локализации.</summary>
            <value>Строка, используемая в случае отсутствия значения в локализации.</value>
        </member>
        <member name="M:Mallenom.Localization.WinForms.StringLocalizationBinding.GetString">
            <summary>Возвращает локализованное значение.</summary>
            <returns>Локализованное значение.</returns>
        </member>
        <member name="T:Mallenom.Localization.WinForms.ToolStripItemExtensions">
            <summary>Расширения для <see cref="T:System.Windows.Forms.ToolStripItem"/>.</summary>
        </member>
        <member name="M:Mallenom.Localization.WinForms.ToolStripItemExtensions.Localize(System.Windows.Forms.ToolStripItem,Mallenom.Localization.LocalizationScope)">
            <summary>Локализует указанный элемент и его дочерние элементы.</summary>
            <param name="item">Локализуемый элемент.</param>
            <param name="scope">Пространство имен локализации.</param>
        </member>
        <member name="T:Mallenom.Localization.WinForms.ToolStripItemToolTipTextLocalizationBinding">
            <summary>Локализация текста всплывающей подсказки ToolStripItem'а.</summary>
        </member>
        <member name="T:Mallenom.Localization.WinForms.ToolStripItemTextLocalizationBinding">
            <summary>Локализация текста ToolStripItem'а.</summary>
        </member>
        <member name="T:Mallenom.Localization.WinForms.ToolTipExtenions">
            <summary>Расширения для <see cref="T:System.Windows.Forms.ToolTip"/>.</summary>
        </member>
        <member name="M:Mallenom.Localization.WinForms.ToolTipExtenions.SetLocalizedToolTip(System.Windows.Forms.ToolTip,System.Windows.Forms.Control,Mallenom.Localization.LocalizationScope,System.String,System.String)">
            <summary>Устанавливает толкализованный текст всплывающей подсказки для контрола.</summary>
            <param name="toolTip">Подсказка.</param>
            <param name="control">Контрол.</param>
            <param name="scope">Пространство имен локализации.</param>
            <param name="stringId">Идентификатор строки.</param>
            <param name="fallback">Строка, используемая в случае отсутствия локализованной.</param>
        </member>
        <member name="M:Mallenom.Localization.WinForms.ToolTipExtenions.SetLocalizedToolTip(System.Windows.Forms.ToolTip,System.Windows.Forms.Control,System.String,System.String)">
            <summary>Устанавливает толкализованный текст всплывающей подсказки для контрола.</summary>
            <param name="toolTip">Подсказка.</param>
            <param name="control">Контрол.</param>
            <param name="stringId">Идентификатор строки.</param>
            <param name="fallback">Строка, используемая в случае отсутствия локализованной.</param>
        </member>
        <member name="T:Mallenom.Localization.ILocale">
            <summary>Локадизация.</summary>
        </member>
        <member name="P:Mallenom.Localization.ILocale.Culture">
            <summary>Возвращает культуру локализации.</summary>
            <value>Культура приложения.</value>
        </member>
        <member name="M:Mallenom.Localization.ILocale.TryGetString(System.String,System.String@)">
            <summary>Возвращает строку с указанным идентификатором.</summary>
            <param name="stringId">Идентификатор строки.</param>
            <param name="value">Строка.</param>
            <returns><c>true</c>, если строка найдена, иначе - <c>false</c>.</returns>
        </member>
        <member name="T:Mallenom.Localization.ILocaleLoadContext">
            <summary>Контекст загрузки локализации.</summary>
        </member>
        <member name="M:Mallenom.Localization.ILocaleLoadContext.SetString(System.String,System.String)">
            <summary>Задает значение строки с указанным идентификатором.</summary>
            <param name="stringId">Идентификатор строки.</param>
            <param name="value">Значение строки.</param>
        </member>
        <member name="T:Mallenom.Localization.ILocaleSource">
            <summary>Источник локализации.</summary>
        </member>
        <member name="M:Mallenom.Localization.ILocaleSource.Load(Mallenom.Localization.ILocaleLoadContext)">
            <summary>Загружает локализацию.</summary>
            <param name="context">Контекст загрузки локализации.</param>
        </member>
        <member name="T:Mallenom.Localization.LocaleExtensions">
            <summary>Расширения для <see cref="T:Mallenom.Localization.ILocale"/>.</summary>
        </member>
        <member name="M:Mallenom.Localization.LocaleExtensions.GetString(Mallenom.Localization.ILocale,System.String,System.String)">
            <summary>Возвращает локализованную строку.</summary>
            <param name="locale">Локализация.</param>
            <param name="stringId">Идентификатор строки.</param>
            <param name="fallback">Значение по умолчанию.</param>
            <returns>Локализованная строка.</returns>
        </member>
        <member name="T:Mallenom.Localization.LocalizationScope">
            <summary>Пространство имен локализации.</summary>
        </member>
        <member name="P:Mallenom.Localization.LocalizationScope.Root">
            <summary>Корневое пространство имен локализации.</summary>
        </member>
        <member name="M:Mallenom.Localization.LocalizationScope.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Localization.LocalizationScope"/>.</summary>
            <param name="prefix">Префикс пространства имен локализации.</param>
        </member>
        <member name="P:Mallenom.Localization.LocalizationScope.Prefix">
            <summary>Возвращает префикс пространства имен локализации.</summary>
            <value>Префикс пространства имен локализации.</value>
        </member>
        <member name="M:Mallenom.Localization.LocalizationScope.GetFullStringId(System.String)">
            <summary>Возвращает полный идентификатор локализованной строки.</summary>
            <param name="stringId">Идентификатор локализованной строки.</param>
            <returns>Идентификатор локализованной строки.</returns>
        </member>
        <member name="M:Mallenom.Localization.LocalizationScope.op_Addition(Mallenom.Localization.LocalizationScope,System.String)">
            <summary>Возвращает полный идентификатор локализованной строки.</summary>
            <param name="scope">Пространство имен локализации.</param>
            <param name="stringId">Идентификатор локализованной строки.</param>
            <returns>Идентификатор локализованной строки.</returns>
        </member>
        <member name="T:Mallenom.Localization.ICurrentLocaleObserver">
            <summary>Интерфейс объекта, зависимого от выбранной локализации.</summary>
        </member>
        <member name="E:Mallenom.Localization.ICurrentLocaleObserver.Stopped">
            <summary>Объект прекратил отслеживание изменений локализации.</summary>
        </member>
        <member name="M:Mallenom.Localization.ICurrentLocaleObserver.NotifyChanged">
            <summary>Вызывается при изменении текущей локализации.</summary>
        </member>
        <member name="T:Mallenom.Localization.Locale">
            <summary>Локализация.</summary>
        </member>
        <member name="F:Mallenom.Localization.Locale._current">
            <summary>Текущая локализация.</summary>
        </member>
        <member name="F:Mallenom.Localization.Locale._listeners">
            <summary>Объекты, следящие за локализацией.</summary>
        </member>
        <member name="F:Mallenom.Localization.Locale._unprocessedSources">
            <summary>Незагруженные источники.</summary>
        </member>
        <member name="P:Mallenom.Localization.Locale.Current">
            <summary>Возвращает и устанавливает текущую локализацию.</summary>
            <value>Текущая локализация.</value>
        </member>
        <member name="M:Mallenom.Localization.Locale.OnCurrentChanged">
            <summary>Вызывается при изменении локализации.</summary>
        </member>
        <member name="M:Mallenom.Localization.Locale.ObserveCurrentChanged(Mallenom.Localization.ICurrentLocaleObserver)">
            <summary>Следить за изменением локализации.</summary>
            <param name="listener">Объект, следящий за локализацией.</param>
        </member>
        <member name="F:Mallenom.Localization.Locale._strings">
            <summary>Словарь локализованных строк.</summary>
        </member>
        <member name="M:Mallenom.Localization.Locale.#ctor(System.Globalization.CultureInfo)">
            <summary>Создание <see cref="T:Mallenom.Localization.Locale"/>.</summary>
            <param name="culture">Култура.</param>
        </member>
        <member name="P:Mallenom.Localization.Locale.Culture">
            <summary>Возвращает культуру данной локализации.</summary>
            <value>Культура локализации.</value>
        </member>
        <member name="M:Mallenom.Localization.Locale.TryGetString(System.String,System.String@)">
            <summary>Возвращает строку с указанным идентификатором.</summary>
            <param name="stringId">Идентификатор строки.</param>
            <param name="value">Строка.</param>
            <returns><c>true</c>, если строка найдена, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Localization.Locale.LoadAllUnprocessedLocales">
            <summary>Загружает все необработанные источники локализации.</summary>
        </member>
        <member name="M:Mallenom.Localization.Locale.ToString">
            <summary>Возвращает строковое представление данной локализации.</summary>
            <returns>Строковое представление данной локализации.</returns>
        </member>
        <member name="T:Mallenom.Localization.Locales">
            <summary>Локализации.</summary>
        </member>
        <member name="F:Mallenom.Localization.Locales.Log">
            <summary>Лог.</summary>
        </member>
        <member name="M:Mallenom.Localization.Locales.LoadFromAssembly(System.Reflection.Assembly)">
            <summary>Ищет и регистрирует ресурсы локализации из указанной сборки.</summary>
            <param name="assembly">Сборка, в которой будет произведен поиск ресурсов локализации.</param>
            <returns>Результат поиска и регистрации ресурсов локализации в указанной сборке.</returns>
            <remarks>Одну и ту же сборку можно безопасно указывать многократно - поиск производится только один раз.</remarks>
        </member>
        <member name="M:Mallenom.Localization.Locales.AddLocaleSource(System.Globalization.CultureInfo,Mallenom.Localization.ILocaleSource)">
            <summary>Добавляет источник локализационных данных.</summary>
            <param name="culture">Культура, для которй предназначены данные.</param>
            <param name="localeSource">Источник данных локализации.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="culture"/> == <c>null</c> или <paramref name="localeSource"/> == <c>null</c>.
            </exception>
        </member>
        <member name="F:Mallenom.Localization.Locales._locales">
            <summary>Словарь локализаций.</summary>
        </member>
        <member name="P:Mallenom.Localization.Locales.Default">
            <summary>Возвращает локализацию по умолчанию.</summary>
            <value>Локализация по умолчанию.</value>
        </member>
        <member name="P:Mallenom.Localization.Locales.Known">
            <summary>Возвращает список доступных локализаций.</summary>
            <value>Список доступных локализаций.</value>
        </member>
        <member name="M:Mallenom.Localization.XmlLocaleFile.Load(System.IO.Stream,Mallenom.Localization.ILocaleLoadContext)">
            <summary>Загружает локализацию из XML-файла.</summary>
            <param name="stream">Поток с данными XML-файла.</param>
            <param name="context">Контекст загрузки локализации.</param>
        </member>
        <member name="T:Mallenom.Primitives.PointF">
            <summary>Точка в двухмерном пространстве.</summary>
        </member>
        <member name="P:Mallenom.Primitives.PointF.Empty">
            <summary>Возвращает точку с координатами (0; 0).</summary>
        </member>
        <member name="M:Mallenom.Primitives.PointF.#ctor(System.Single,System.Single)">
            <summary>Создает точку с указанными координатами.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
        </member>
        <member name="M:Mallenom.Primitives.PointF.#ctor(Mallenom.Primitives.Size)">
            <summary>Создает точку с координатами их указанного размера.</summary>
            <param name="size">Размер, который будет использован в качестве координат.</param>
        </member>
        <member name="M:Mallenom.Primitives.PointF.#ctor(Mallenom.Primitives.SizeF)">
            <summary>Создает точку с координатами их указанного размера.</summary>
            <param name="size">Размер, который будет использован в качестве координат.</param>
        </member>
        <member name="P:Mallenom.Primitives.PointF.X">
            <summary>Возвращает координату X.</summary>
            <value>Координата X.</value>
        </member>
        <member name="P:Mallenom.Primitives.PointF.Y">
            <summary>Возвращает координату Y.</summary>
            <value>Координата Y.</value>
        </member>
        <member name="P:Mallenom.Primitives.PointF.IsEmpty">
            <summary>Возвращает флаг нулевой точки.</summary>
            <value><c>true</c>, если точка имеет координаты (0; 0), иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.Primitives.PointF.op_Equality(Mallenom.Primitives.PointF,Mallenom.Primitives.PointF)">
            <summary>Оператор равенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.op_Inequality(Mallenom.Primitives.PointF,Mallenom.Primitives.PointF)">
            <summary>Оператор неравенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды не равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.op_Addition(Mallenom.Primitives.PointF,Mallenom.Primitives.SizeF)">
            <summary>Оператор сложения.</summary>
            <param name="point">Точка.</param>
            <param name="size">Размер.</param>
            <returns>Результат сложения.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.op_Subtraction(Mallenom.Primitives.PointF,Mallenom.Primitives.SizeF)">
            <summary>Оператор сложения.</summary>
            <param name="point">Точка.</param>
            <param name="size">Размер.</param>
            <returns>Результат вычитания.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.op_Implicit(Mallenom.Primitives.Point)~Mallenom.Primitives.PointF">
            <summary>Конвертирует точку <see cref="T:Mallenom.Primitives.Point"/> в <see cref="T:Mallenom.Primitives.PointF"/>.</summary>
            <param name="point">Конвертируемая точка <see cref="T:Mallenom.Primitives.Point"/>.</param>
            <returns>Соответствующая точка <see cref="T:Mallenom.Primitives.PointF"/>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.Offset(System.Single,System.Single)">
            <summary>Возвращает новую точку, полученную смещением координат данной.</summary>
            <param name="dx">Смещение координаты X.</param>
            <param name="dy">Смещение координаты Y.</param>
            <returns>Смещенная точка.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.Equals(System.Object)">
            <summary>Сравнивает данный экземпляр с другим объектом.</summary>
            <param name="obj">Объект для сравнения.</param>
            <returns><c>true</c>, если объекты равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.Equals(Mallenom.Primitives.PointF)">
            <summary>Сравнивает данный экземпляр с другим.</summary>
            <param name="other">Экземпляр для сравнения.</param>
            <returns><c>true</c>, если экземпляры равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.GetHashCode">
            <summary>Возвращает хэш-код даного экземпляра.</summary>
            <returns>Хэш-код данного экземпляра.</returns>
        </member>
        <member name="M:Mallenom.Primitives.PointF.ToString">
            <summary>Возвращает строковое представление данной точки.</summary>
            <returns>Строковое представление данной точки.</returns>
        </member>
        <member name="T:Mallenom.Primitives.Point">
            <summary>Точка в двухмерном пространстве.</summary>
        </member>
        <member name="P:Mallenom.Primitives.Point.Empty">
            <summary>Возвращает точку с координатами (0; 0).</summary>
        </member>
        <member name="M:Mallenom.Primitives.Point.Ceiling(Mallenom.Primitives.PointF)">
            <summary>Округляет кверху координаты указанной точки.</summary>
            <param name="point">Точка.</param>
            <returns>Точка с округленными значениями координат.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.Truncate(Mallenom.Primitives.PointF)">
            <summary>Округляет книзу координаты указанной точки.</summary>
            <param name="point">Точка.</param>
            <returns>Точка с округленными значениями координат.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.Round(Mallenom.Primitives.PointF)">
            <summary>Округляет координаты указанной точки.</summary>
            <param name="point">Точка.</param>
            <returns>Точка с округленными значениями координат.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.#ctor(System.Int32,System.Int32)">
            <summary>Создает точку с указанными координатами.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
        </member>
        <member name="M:Mallenom.Primitives.Point.#ctor(Mallenom.Primitives.Size)">
            <summary>Создает точку с координатами их указанного размера.</summary>
            <param name="size">Размер, который будет использован в качестве координат.</param>
        </member>
        <member name="P:Mallenom.Primitives.Point.X">
            <summary>Возвращает координату X.</summary>
            <value>Координата X.</value>
        </member>
        <member name="P:Mallenom.Primitives.Point.Y">
            <summary>Возвращает координату Y.</summary>
            <value>Координата Y.</value>
        </member>
        <member name="P:Mallenom.Primitives.Point.IsEmpty">
            <summary>Возвращает флаг нулевой точки.</summary>
            <value><c>true</c>, если точка имеет координаты (0; 0), иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.Primitives.Point.op_Equality(Mallenom.Primitives.Point,Mallenom.Primitives.Point)">
            <summary>Оператор равенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.op_Inequality(Mallenom.Primitives.Point,Mallenom.Primitives.Point)">
            <summary>Оператор неравенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды не равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.op_Addition(Mallenom.Primitives.Point,Mallenom.Primitives.Size)">
            <summary>Оператор сложения.</summary>
            <param name="point">Точка.</param>
            <param name="size">Размер.</param>
            <returns>Результат сложения.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.op_Subtraction(Mallenom.Primitives.Point,Mallenom.Primitives.Size)">
            <summary>Оператор сложения.</summary>
            <param name="point">Точка.</param>
            <param name="size">Размер.</param>
            <returns>Результат вычитания.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.Offset(System.Int32,System.Int32)">
            <summary>Возвращает новую точку, полученную смещением координат данной.</summary>
            <param name="dx">Смещение координаты X.</param>
            <param name="dy">Смещение координаты Y.</param>
            <returns>Смещенная точка.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.Equals(System.Object)">
            <summary>Сравнивает данный экземпляр с другим объектом.</summary>
            <param name="obj">Объект для сравнения.</param>
            <returns><c>true</c>, если объекты равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.Equals(Mallenom.Primitives.Point)">
            <summary>Сравнивает данный экземпляр с другим.</summary>
            <param name="other">Экземпляр для сравнения.</param>
            <returns><c>true</c>, если экземпляры равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.GetHashCode">
            <summary>Возвращает хэш-код даного экземпляра.</summary>
            <returns>Хэш-код данного экземпляра.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Point.ToString">
            <summary>Возвращает строковое представление данной точки.</summary>
            <returns>Строковое представление данной точки.</returns>
        </member>
        <member name="T:Mallenom.Primitives.RectangleF">
            <summary>Прямоуголльник.</summary>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.Empty">
            <summary>Возвращает пустой прямоугольник.</summary>
            <value>Пустой прямоугольник.</value>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Ceiling(Mallenom.Primitives.RectangleF)">
            <summary>Округляет кверху координаты и размеры указанного прямоугольника.</summary>
            <param name="rectangle">Прямоугольник.</param>
            <returns>Прямоугольник с округленными значениями координат и размера.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Truncate(Mallenom.Primitives.RectangleF)">
            <summary>Округляет книзу координаты и размеры указанного прямоугольника.</summary>
            <param name="rectangle">Прямоугольник.</param>
            <returns>Прямоугольник с округленными значениями координат и размера.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Round(Mallenom.Primitives.RectangleF)">
            <summary>Округляет координаты и размеры указанного прямоугольника.</summary>
            <param name="rectangle">Прямоугольник.</param>
            <returns>Прямоугольник с округленными значениями координат и размера.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>Создает прямоугольник по известным координатам его границ.</summary>
            <param name="left">X-координата левой границы.</param>
            <param name="top">Y-координата верхней границы.</param>
            <param name="right">X-координата за правой границей прямоугольника.</param>
            <param name="bottom">Y-координата за нижней границей прямоугольника.</param>
            <returns>Описанный прямоугольник.</returns>
            <remarks>Правая и нижняя границы не входят в прямоугольник.</remarks>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Intersect(Mallenom.Primitives.RectangleF,Mallenom.Primitives.RectangleF)">
            <summary>Возвращает прямоугольник, находящийся на пересечении указанных прямоугольников.</summary>
            <param name="a">Первый прямоугольник.</param>
            <param name="b">Второй прямоугольник.</param>
            <returns>Прямоугольник на пересечении указанных прямоугольников.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Intersect(Mallenom.Primitives.RectangleF[])">
            <summary>Возвращает прямоугольник, находящийся на пересечении указанных прямоугольников.</summary>
            <param name="rectangles">Прямоугольники.</param>
            <returns>Прямоугольник на пересечении указанных прямоугольников.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Union(Mallenom.Primitives.RectangleF,Mallenom.Primitives.RectangleF)">
            <summary>Возвращает наименьший прямоугольник, содержащий указанные прямоугольники.</summary>
            <param name="a">Первый прямоугольник.</param>
            <param name="b">Второй прямоугольник.</param>
            <returns>Прямоугольник, содержащий указанные прямоугольники.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Union(Mallenom.Primitives.RectangleF[])">
            <summary>Возвращает наименьший прямоугольник, содержащий все указанные прямоугольники.</summary>
            <param name="rectangles">Прямоугольники.</param>
            <returns>Прямоугольник, содержащий указанные прямоугольники.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.#ctor(Mallenom.Primitives.Point,Mallenom.Primitives.Size)">
            <summary>Создает прямоугольник с указанными координатами и размером.</summary>
            <param name="location">Координаты левого верхнего угла прямоугольника.</param>
            <param name="size">Размеры прямоугольника.</param>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.#ctor(Mallenom.Primitives.PointF,Mallenom.Primitives.SizeF)">
            <summary>Создает прямоугольник с указанными координатами и размером.</summary>
            <param name="location">Координаты левого верхнего угла прямоугольника.</param>
            <param name="size">Размеры прямоугольника.</param>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Создает прямоугольник с указанными координатами и размером.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
            <param name="width">Ширина прямоугольника.</param>
            <param name="height">Высота прямоугольника.</param>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.X">
            <summary>Возвращает координату X левого верхнего угла прямоугольника.</summary>
            <value>Координата X верхнего левого угла прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.Y">
            <summary>Возвращает координату Y левого верхнего угла прямоугольника.</summary>
            <value>Координата Y верхнего левого угла прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.Width">
            <summary>Возвращает ширину прямоугольника.</summary>
            <value>Ширина прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.Height">
            <summary>Возвращает высоту прямоугольника.</summary>
            <value>Высота прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.Location">
            <summary>Возвращает координаты левого верхнего угла прямоугольника.</summary>
            <value>Координаты верхнего левого угла прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.Size">
            <summary>Возвращает размер прямоугольника.</summary>
            <value>Размер прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.Right">
            <summary>Возвращает X-координату за правой границы прямоугольника.</summary>
            <value>Координата правой границы прямоугольника.</value>
            <remarks>Правая граница не входит в прямоугольник.</remarks>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.Bottom">
            <summary>Возвращает Y-координату за нижней границы прямоугольника.</summary>
            <value>Координата нижней границы прямоугольника.</value>
            <remarks>Нижняя граница не входит в прямоугольник.</remarks>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.IsEmpty">
            <summary>Возвращает флаг пустого прямоугольника.</summary>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.HasPositiveSize">
            <summary>Возвращает признак положительного (&gt; 0) размера прямоугольника.</summary>
            <value><c>true</c>, если прямоугольник имеет положительные размеры, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Primitives.RectangleF.HasNonNegativeSize">
            <summary>Возвращает признак неотрицательного (&gt;= 0) размера прямоугольника.</summary>
            <value><c>true</c>, если прямоугольник имеет неотрицательные размеры, иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.op_Equality(Mallenom.Primitives.RectangleF,Mallenom.Primitives.RectangleF)">
            <summary>Оператор равенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.op_Inequality(Mallenom.Primitives.RectangleF,Mallenom.Primitives.RectangleF)">
            <summary>Оператор неравенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды не равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.op_Implicit(Mallenom.Primitives.Rectangle)~Mallenom.Primitives.RectangleF">
            <summary>Конвертирует прямоугольник <see cref="T:Mallenom.Primitives.Rectangle"/> в <see cref="T:Mallenom.Primitives.RectangleF"/>.</summary>
            <param name="rectangle">Конвертируемвый прямоугольник точка <see cref="T:Mallenom.Primitives.Rectangle"/>.</param>
            <returns>Соответствующий прямоугольник <see cref="T:Mallenom.Primitives.RectangleF"/>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Offset(System.Single,System.Single)">
            <summary>Возвращает новый прямоугольник, полученный смещением координат данного.</summary>
            <param name="dx">Смещение координаты X.</param>
            <param name="dy">Смещение координаты Y.</param>
            <returns>Смещенный прямоугольник.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Contains(System.Single,System.Single)">
            <summary>Проверяет, содержится ли указанная точка в данном прямоугольнике.</summary>
            <param name="x">X-координата проверяемой точки</param>
            <param name="y">Y-координата проверяемой точки.</param>
            <returns><c>true</c>, если точка содержится в прямоугольнике, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Contains(Mallenom.Primitives.Point)">
            <summary>Проверяет, содержится ли указанная точка в данном прямоугольнике.</summary>
            <param name="point">Проверяемая точка.</param>
            <returns><c>true</c>, если точка содержится в прямоугольнике, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Contains(Mallenom.Primitives.PointF)">
            <summary>Проверяет, содержится ли указанная точка в данном прямоугольнике.</summary>
            <param name="point">Проверяемая точка.</param>
            <returns><c>true</c>, если точка содержится в прямоугольнике, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Contains(Mallenom.Primitives.Rectangle)">
            <summary>Проверяет, содержится ли указанный прямоугольник в данном прямоугольнике.</summary>
            <param name="rect">Проверяемвый прямоугольник.</param>
            <returns><c>true</c>, если прямоугольник содержится, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Contains(Mallenom.Primitives.RectangleF)">
            <summary>Проверяет, содержится ли указанный прямоугольник в данном прямоугольнике.</summary>
            <param name="rect">Проверяемвый прямоугольник.</param>
            <returns><c>true</c>, если прямоугольник содержится, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Inflate(System.Single,System.Single)">
            <summary>Увеличивает/уменьшает прямоуглник во всех направлениях на указанную величину.</summary>
            <param name="width">Увеличение по горизонтали.</param>
            <param name="height">Увеличение по вертикали.</param>
            <returns>Увеличенный/уменьшенный прямоугольник.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Inflate(Mallenom.Primitives.Size)">
            <summary>Увеличивает/уменьшает прямоуглник во всех направлениях на указанную величину.</summary>
            <param name="size">Увеличение/уменьшение.</param>
            <returns>Увеличенный/уменьшенный прямоугольник.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Inflate(Mallenom.Primitives.SizeF)">
            <summary>Увеличивает/уменьшает прямоуглник во всех направлениях на указанную величину.</summary>
            <param name="size">Увеличение/уменьшение.</param>
            <returns>Увеличенный/уменьшенный прямоугольник.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.IntersectsWith(Mallenom.Primitives.Rectangle)">
            <summary>Проверяет, пересекается ли данный прямоугольник с другим прямоугольником.</summary>
            <param name="rect">Проверяемый прямоугольник.</param>
            <returns><c>true</c>, если прямоугольники пересекаются, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.IntersectsWith(Mallenom.Primitives.RectangleF)">
            <summary>Проверяет, пересекается ли данный прямоугольник с другим прямоугольником.</summary>
            <param name="rect">Проверяемый прямоугольник.</param>
            <returns><c>true</c>, если прямоугольники пересекаются, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Equals(System.Object)">
            <summary>Сравнивает данный экземпляр с другим объектом.</summary>
            <param name="obj">Объект для сравнения.</param>
            <returns><c>true</c>, если объекты равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.Equals(Mallenom.Primitives.RectangleF)">
            <summary>Сравнивает данный экземпляр с другим.</summary>
            <param name="other">Экземпляр для сравнения.</param>
            <returns><c>true</c>, если экземпляры равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.GetHashCode">
            <summary>Возвращает хэш-код даного экземпляра.</summary>
            <returns>Хэш-код данного экземпляра.</returns>
        </member>
        <member name="M:Mallenom.Primitives.RectangleF.ToString">
            <summary>Возвращает строковое представление данной точки.</summary>
            <returns>Строковое представление данной точки.</returns>
        </member>
        <member name="T:Mallenom.Primitives.Rectangle">
            <summary>Прямоуголльник.</summary>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.Empty">
            <summary>Возвращает пустой прямоугольник.</summary>
            <value>Пустой прямоугольник.</value>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Создает прямоугольник по известным координатам его границ.</summary>
            <param name="left">X-координата левой границы.</param>
            <param name="top">Y-координата верхней границы.</param>
            <param name="right">X-координата за правой границей прямоугольника.</param>
            <param name="bottom">Y-координата за нижней границей прямоугольника.</param>
            <returns>Описанный прямоугольник.</returns>
            <remarks>Правая и нижняя границы не входят в прямоугольник.</remarks>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Intersect(Mallenom.Primitives.Rectangle,Mallenom.Primitives.Rectangle)">
            <summary>Возвращает прямоугольник, находящийся на пересечении указанных прямоугольников.</summary>
            <param name="a">Первый прямоугольник.</param>
            <param name="b">Второй прямоугольник.</param>
            <returns>Прямоугольник на пересечении указанных прямоугольников.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Intersect(Mallenom.Primitives.Rectangle[])">
            <summary>Возвращает прямоугольник, находящийся на пересечении указанных прямоугольников.</summary>
            <param name="rectangles">Прямоугольники.</param>
            <returns>Прямоугольник на пересечении указанных прямоугольников.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Union(Mallenom.Primitives.Rectangle,Mallenom.Primitives.Rectangle)">
            <summary>Возвращает наименьший прямоугольник, содержащий указанные прямоугольники.</summary>
            <param name="a">Первый прямоугольник.</param>
            <param name="b">Второй прямоугольник.</param>
            <returns>Прямоугольник, содержащий указанные прямоугольники.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Union(Mallenom.Primitives.Rectangle[])">
            <summary>Возвращает наименьший прямоугольник, содержащий все указанные прямоугольники.</summary>
            <param name="rectangles">Прямоугольники.</param>
            <returns>Прямоугольник, содержащий указанные прямоугольники.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.#ctor(Mallenom.Primitives.Point,Mallenom.Primitives.Size)">
            <summary>Создает прямоугольник с указанными координатами и размером.</summary>
            <param name="location">Координаты левого верхнего угла прямоугольника.</param>
            <param name="size">Размеры прямоугольника.</param>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Создает прямоугольник с указанными координатами и размером.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
            <param name="width">Ширина прямоугольника.</param>
            <param name="height">Высота прямоугольника.</param>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.X">
            <summary>Возвращает координату X левого верхнего угла прямоугольника.</summary>
            <value>Координата X верхнего левого угла прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.Y">
            <summary>Возвращает координату Y левого верхнего угла прямоугольника.</summary>
            <value>Координата Y верхнего левого угла прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.Width">
            <summary>Возвращает ширину прямоугольника.</summary>
            <value>Ширина прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.Height">
            <summary>Возвращает высоту прямоугольника.</summary>
            <value>Высота прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.Location">
            <summary>Возвращает координаты левого верхнего угла прямоугольника.</summary>
            <value>Координаты верхнего левого угла прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.Size">
            <summary>Возвращает размер прямоугольника.</summary>
            <value>Размер прямоугольника.</value>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.Right">
            <summary>Возвращает X-координату за правой границы прямоугольника.</summary>
            <value>Координата правой границы прямоугольника.</value>
            <remarks>Правая граница не входит в прямоугольник.</remarks>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.Bottom">
            <summary>Возвращает Y-координату за нижней границы прямоугольника.</summary>
            <value>Координата нижней границы прямоугольника.</value>
            <remarks>Нижняя граница не входит в прямоугольник.</remarks>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.IsEmpty">
            <summary>Возвращает флаг пустого прямоугольника.</summary>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.HasPositiveSize">
            <summary>Возвращает признак положительного (&gt; 0) размера прямоугольника.</summary>
            <value><c>true</c>, если прямоугольник имеет положительные размеры, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Primitives.Rectangle.HasNonNegativeSize">
            <summary>Возвращает признак неотрицательного (&gt;= 0) размера прямоугольника.</summary>
            <value><c>true</c>, если прямоугольник имеет неотрицательные размеры, иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.op_Equality(Mallenom.Primitives.Rectangle,Mallenom.Primitives.Rectangle)">
            <summary>Оператор равенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.op_Inequality(Mallenom.Primitives.Rectangle,Mallenom.Primitives.Rectangle)">
            <summary>Оператор неравенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды не равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>Возвращает новый прямоугольник, полученный смещением координат данного.</summary>
            <param name="dx">Смещение координаты X.</param>
            <param name="dy">Смещение координаты Y.</param>
            <returns>Смещенный прямоугольник.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>Проверяет, содержится ли указанная точка в данном прямоугольнике.</summary>
            <param name="x">X-координата проверяемой точки</param>
            <param name="y">Y-координата проверяемой точки.</param>
            <returns><c>true</c>, если точка содержится в прямоугольнике, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Contains(Mallenom.Primitives.Point)">
            <summary>Проверяет, содержится ли указанная точка в данном прямоугольнике.</summary>
            <param name="point">Проверяемая точка.</param>
            <returns><c>true</c>, если точка содержится в прямоугольнике, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Contains(Mallenom.Primitives.Rectangle)">
            <summary>Проверяет, содержится ли указанный прямоугольник в данном прямоугольнике.</summary>
            <param name="rect">Проверяемвый прямоугольник.</param>
            <returns><c>true</c>, если прямоугольник содержится, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>Увеличивает/уменьшает прямоуглник во всех направлениях на указанную величину.</summary>
            <param name="width">Увеличение по горизонтали.</param>
            <param name="height">Увеличение по вертикали.</param>
            <returns>Увеличенный/уменьшенный прямоугольник.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Inflate(Mallenom.Primitives.Size)">
            <summary>Увеличивает/уменьшает прямоуглник во всех направлениях на указанную величину.</summary>
            <param name="size">Увеличение/уменьшение.</param>
            <returns>Увеличенный/уменьшенный прямоугольник.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.IntersectsWith(Mallenom.Primitives.Rectangle)">
            <summary>Проверяет, пересекается ли данный прямоугольник с другим прямоугольником.</summary>
            <param name="rect">Проверяемый прямоугольник.</param>
            <returns><c>true</c>, если прямоугольники пересекаются, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Equals(System.Object)">
            <summary>Сравнивает данный экземпляр с другим объектом.</summary>
            <param name="obj">Объект для сравнения.</param>
            <returns><c>true</c>, если объекты равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.Equals(Mallenom.Primitives.Rectangle)">
            <summary>Сравнивает данный экземпляр с другим.</summary>
            <param name="other">Экземпляр для сравнения.</param>
            <returns><c>true</c>, если экземпляры равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.GetHashCode">
            <summary>Возвращает хэш-код даного экземпляра.</summary>
            <returns>Хэш-код данного экземпляра.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Rectangle.ToString">
            <summary>Возвращает строковое представление данной точки.</summary>
            <returns>Строковое представление данной точки.</returns>
        </member>
        <member name="T:Mallenom.Primitives.SizeF">
            <summary>Размер.</summary>
        </member>
        <member name="P:Mallenom.Primitives.SizeF.Empty">
            <summary>Возвращает размер (0; 0).</summary>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.#ctor(System.Single,System.Single)">
            <summary>Создает размер.</summary>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.#ctor(Mallenom.Primitives.Point)">
            <summary>Создает размер.</summary>
            <param name="point">Точка, координаты которой будут использованы в качестве размеров.</param>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.#ctor(Mallenom.Primitives.PointF)">
            <summary>Создает размер.</summary>
            <param name="point">Точка, координаты которой будут использованы в качестве размеров.</param>
        </member>
        <member name="P:Mallenom.Primitives.SizeF.Width">
            <summary>Возвращает ширину.</summary>
            <value>Ширина.</value>
        </member>
        <member name="P:Mallenom.Primitives.SizeF.Height">
            <summary>Возвращает высоту.</summary>
            <value>Высота.</value>
        </member>
        <member name="P:Mallenom.Primitives.SizeF.IsEmpty">
            <summary>Возвращает флаг нулевого размера.</summary>
            <value><c>true</c>, если ширина и высота равны 0, иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.op_Addition(Mallenom.Primitives.SizeF,Mallenom.Primitives.SizeF)">
            <summary>Складывает 2 размера.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns>Результат сложения размеров.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.op_Subtraction(Mallenom.Primitives.SizeF,Mallenom.Primitives.SizeF)">
            <summary>Вычитает 2 размера.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns>Результат вычитания размеров.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.op_UnaryNegation(Mallenom.Primitives.SizeF)">
            <summary>Оператор отрицания.</summary>
            <param name="size">Размер.</param>
            <returns>Результат отрицания.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.op_Equality(Mallenom.Primitives.SizeF,Mallenom.Primitives.SizeF)">
            <summary>Оператор равенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.op_Inequality(Mallenom.Primitives.SizeF,Mallenom.Primitives.SizeF)">
            <summary>Оператор неравенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды не равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.op_Implicit(Mallenom.Primitives.Size)~Mallenom.Primitives.SizeF">
            <summary>Конвертирует размер <see cref="T:Mallenom.Primitives.Size"/> в <see cref="T:Mallenom.Primitives.SizeF"/>.</summary>
            <param name="size">Конвертируемый размер <see cref="T:Mallenom.Primitives.Size"/>.</param>
            <returns>Соответствующий размер <see cref="T:Mallenom.Primitives.SizeF"/>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.Offset(System.Int32,System.Int32)">
            <summary>Возвращает новый размер, полученный изменением данного.</summary>
            <param name="dx">Смещение по оси OX.</param>
            <param name="dy">Смещение по оси OY.</param>
            <returns>Смещенная точка.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.Equals(System.Object)">
            <summary>Сравнивает данный экземпляр с другим объектом.</summary>
            <param name="obj">Объект для сравнения.</param>
            <returns><c>true</c>, если объекты равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.Equals(Mallenom.Primitives.SizeF)">
            <summary>Сравнивает данный экземпляр с другим.</summary>
            <param name="other">Экземпляр для сравнения.</param>
            <returns><c>true</c>, если экземпляры равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.GetHashCode">
            <summary>Возвращает хэш-код даного экземпляра.</summary>
            <returns>Хэш-код данного экземпляра.</returns>
        </member>
        <member name="M:Mallenom.Primitives.SizeF.ToString">
            <summary>Возвращает строковое представление данной точки.</summary>
            <returns>Строковое представление данной точки.</returns>
        </member>
        <member name="T:Mallenom.Primitives.Size">
            <summary>Размер.</summary>
        </member>
        <member name="P:Mallenom.Primitives.Size.Empty">
            <summary>Возвращает размер (0; 0).</summary>
        </member>
        <member name="M:Mallenom.Primitives.Size.Ceiling(Mallenom.Primitives.SizeF)">
            <summary>Округляет кверху указанный размер.</summary>
            <param name="size">Размер.</param>
            <returns>Размер с округленными значениями.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.Truncate(Mallenom.Primitives.SizeF)">
            <summary>Округляет книзу указанный размер.</summary>
            <param name="size">Размер.</param>
            <returns>Размер с округленными значениями.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.Round(Mallenom.Primitives.SizeF)">
            <summary>Округляет указанный размер.</summary>
            <param name="size">Размер.</param>
            <returns>Размер с округленными значениями.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.#ctor(System.Int32,System.Int32)">
            <summary>Создает размер.</summary>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
        </member>
        <member name="M:Mallenom.Primitives.Size.#ctor(Mallenom.Primitives.Point)">
            <summary>Создает размер.</summary>
            <param name="point">Точка, координаты которой будут использованы в качестве размеров.</param>
        </member>
        <member name="P:Mallenom.Primitives.Size.Width">
            <summary>Возвращает ширину.</summary>
            <value>Ширина.</value>
        </member>
        <member name="P:Mallenom.Primitives.Size.Height">
            <summary>Возвращает высоту.</summary>
            <value>Высота.</value>
        </member>
        <member name="P:Mallenom.Primitives.Size.IsEmpty">
            <summary>Возвращает флаг нулевого размера.</summary>
            <value><c>true</c>, если ширина и высота равны 0, иначе - <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.Primitives.Size.op_Addition(Mallenom.Primitives.Size,Mallenom.Primitives.Size)">
            <summary>Складывает 2 размера.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns>Результат сложения размеров.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.op_Subtraction(Mallenom.Primitives.Size,Mallenom.Primitives.Size)">
            <summary>Вычитает 2 размера.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns>Результат вычитания размеров.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.op_UnaryNegation(Mallenom.Primitives.Size)">
            <summary>Оператор отрицания.</summary>
            <param name="size">Размер.</param>
            <returns>Результат отрицания.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.op_Equality(Mallenom.Primitives.Size,Mallenom.Primitives.Size)">
            <summary>Оператор равенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.op_Inequality(Mallenom.Primitives.Size,Mallenom.Primitives.Size)">
            <summary>Оператор неравенства.</summary>
            <param name="left">Левый операнд.</param>
            <param name="right">Правый операнд.</param>
            <returns><c>true</c>, если операнды не равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.Offset(System.Int32,System.Int32)">
            <summary>Возвращает новый размер, полученный изменением данного.</summary>
            <param name="dx">Смещение по оси OX.</param>
            <param name="dy">Смещение по оси OY.</param>
            <returns>Смещенная точка.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.Equals(System.Object)">
            <summary>Сравнивает данный экземпляр с другим объектом.</summary>
            <param name="obj">Объект для сравнения.</param>
            <returns><c>true</c>, если объекты равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.Equals(Mallenom.Primitives.Size)">
            <summary>Сравнивает данный экземпляр с другим.</summary>
            <param name="other">Экземпляр для сравнения.</param>
            <returns><c>true</c>, если экземпляры равны, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.GetHashCode">
            <summary>Возвращает хэш-код даного экземпляра.</summary>
            <returns>Хэш-код данного экземпляра.</returns>
        </member>
        <member name="M:Mallenom.Primitives.Size.ToString">
            <summary>Возвращает строковое представление данной точки.</summary>
            <returns>Строковое представление данной точки.</returns>
        </member>
        <member name="T:Mallenom.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources._class">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources._namespace">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.cancel">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.check">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.clear">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.clock">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.collapse">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.Collapse_large">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.copy1">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.debug">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.DEFAULT_EMAIL">
            <summary>
              Looks up a localized string similar to bug@mallenom.ru.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.EMAIL_MESSAGE">
            <summary>
              Looks up a localized string similar to Сообщение об ошибке скопировано в буфер обмена, вставьте его в тело сообщения (комбинация Ctrl+V) или при помощи контекстного меню..
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.error">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.exception">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.expand">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.Expand_large">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.fatal">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.file">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.filter">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.folder">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.folder1">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.img_error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.img_error_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.img_info">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.img_info_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.img_trace_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.img_warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.img_warning_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.info">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.mail">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.OBJECT_CANNOT_BE_NULL">
            <summary>
              Looks up a localized string similar to The object of type &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.ok">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.pause">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.play">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.refresh">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.search">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.STRING_ARGS_MUST_NOT_BE_EMPTY">
            <summary>
              Looks up a localized string similar to The string argument must not be empty..
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.STRING_ARGS_MUST_NOT_BE_EMPTY_OR_WHITE_SPACE">
            <summary>
              Looks up a localized string similar to The string argument must not be empty or white space..
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.TabStrip">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.uncheck">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Mallenom.Properties.Resources.warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:Mallenom.Reflection.IParameterValue">
            <summary>Провайдер значения параметра.</summary>
        </member>
        <member name="M:Mallenom.Reflection.IParameterValue.TryGetValueFor(System.Reflection.ParameterInfo,System.Object@)">
            <summary>Возвращает значение для указанного параметра.</summary>
            <param name="parameterInfo">Информация о параметре.</param>
            <param name="value">Значение параметра.</param>
            <returns>
            <c>true</c>, если значение может быть использовано для 
            указанного параметра, иначе - <c>false</c>.
            </returns>
        </member>
        <member name="T:Mallenom.Reflection.MatchedConstructor">
            <summary>Конструктор, для которого подобраны параметры.</summary>
        </member>
        <member name="M:Mallenom.Reflection.MatchedConstructor.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>Создание <see cref="T:Mallenom.Reflection.MatchedConstructor"/>.</summary>
            <param name="constructorInfo">Информация о конструкторе.</param>
            <param name="parameterValues">Подобранные значения параметров.</param>
        </member>
        <member name="P:Mallenom.Reflection.MatchedConstructor.ConstructedType">
            <summary>Возвращает тип, экземпляр которого создает конструктор.</summary>
            <value>Тип, экземпляр которого создает конструктор.</value>
        </member>
        <member name="P:Mallenom.Reflection.MatchedConstructor.ConstructorInfo">
            <summary>Возвращает информацию о конструкторе.</summary>
            <value>Информация о конструкторе.</value>
        </member>
        <member name="P:Mallenom.Reflection.MatchedConstructor.ParameterValuesCount">
            <summary>Возвращает количество параметров конструктора.</summary>
            <value>Количество параметров конструктора.</value>
        </member>
        <member name="P:Mallenom.Reflection.MatchedConstructor.ParameterValuesRaw">
            <summary>Возвращает значения параметров конструктора.</summary>
            <value>Значения параметров конструктора.</value>
        </member>
        <member name="P:Mallenom.Reflection.MatchedConstructor.ParameterValues">
            <summary>Возвращает значения параметров конструктора.</summary>
            <value>Значения параметров конструктора.</value>
        </member>
        <member name="M:Mallenom.Reflection.MatchedConstructor.Invoke">
            <summary>Вызывает конструктор.</summary>
            <returns>Созданный объект.</returns>
        </member>
        <member name="M:Mallenom.Reflection.MatchedConstructor.ToExpression">
            <summary>Возвращает выражение, соответствующее вызову конструктора с подобранными параметрами.</summary>
            <returns>Выражение, соответствующее вызову конструктора с подобранными параметрами.</returns>
        </member>
        <member name="M:Mallenom.Reflection.MatchedConstructor.ToLambdaExpression">
            <summary>Возвращает лямбда-выражение, соответствующее вызову конструктора с подобранными параметрами.</summary>
            <returns>Лямбда-выражение, соответствующее вызову конструктора с подобранными параметрами.</returns>
        </member>
        <member name="M:Mallenom.Reflection.MatchedConstructor.Compile">
            <summary>Создает делегат, вызывающий конструктор с подобранными параметрами.</summary>
            <returns>Делегат, вызывающий конструктор с подобранными параметрами.</returns>
            <remarks>Делегат будет иметь тип <see cref="T:System.Func`1"/>, где T - тип создаваемого объекта.</remarks>
        </member>
        <member name="T:Mallenom.Reflection.MatchedMethod">
            <summary>Метод, для которого подобраны параметры.</summary>
        </member>
        <member name="M:Mallenom.Reflection.MatchedMethod.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>Создание <see cref="T:Mallenom.Reflection.MatchedMethod"/>.</summary>
            <param name="methodInfo">Информация о методе.</param>
            <param name="parameterValues">Значения аргументов метода</param>
        </member>
        <member name="P:Mallenom.Reflection.MatchedMethod.MethodInfo">
            <summary>Возвращает информацию о методе.</summary>
            <value>Информация о методе.</value>
        </member>
        <member name="P:Mallenom.Reflection.MatchedMethod.ParameterValuesCount">
            <summary>Возвращает количество параметров метода.</summary>
            <value>Количество параметров метода.</value>
        </member>
        <member name="P:Mallenom.Reflection.MatchedMethod.ParameterValuesRaw">
            <summary>Возвращает значения параметров метода.</summary>
            <value>Значения параметров метода.</value>
        </member>
        <member name="P:Mallenom.Reflection.MatchedMethod.ParameterValues">
            <summary>Возвращает значения параметров метода.</summary>
            <value>Значения параметров метода.</value>
        </member>
        <member name="M:Mallenom.Reflection.MatchedMethod.Invoke(System.Object)">
            <summary>Вызывает метод.</summary>
            <param name="instance">Экземпляр, для котроого будет вызван метод (<c>null</c> для статических методов).</param>
            <returns>Возвращаемое значение метода.</returns>
        </member>
        <member name="M:Mallenom.Reflection.MatchedMethod.ToParametrizedExpression(System.Linq.Expressions.Expression)">
            <summary>Возвращает выражение, соответствующее вызову метода с подобранными параметрами.</summary>
            <param name="instance">Выражение, возвращающее экземпляр, для котроого будет вызван метод (<c>null</c> для статических методов).</param>
            <returns>Выражение, соответствующее вызову метода с подобранными параметрами.</returns>
        </member>
        <member name="M:Mallenom.Reflection.MatchedMethod.ToExpression(System.Object)">
            <summary>Возвращает выражение, соответствующее вызову метода с подобранными параметрами.</summary>
            <param name="instance">Экземпляр, для котроого будет вызван метод (<c>null</c> для статических методов).</param>
            <returns>Выражение, соответствующее вызову метода с подобранными параметрами.</returns>
        </member>
        <member name="M:Mallenom.Reflection.MatchedMethod.ToParametrizedLambdaExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>Возвращает выражение, соответствующее вызову метода с подобранными параметрами.</summary>
            <param name="instance">Выражение, возвращающее экземпляр, для котроого будет вызван метод (<c>null</c> для статических методов).</param>
            <returns>Выражение, соответствующее вызову метода с подобранными параметрами.</returns>
        </member>
        <member name="M:Mallenom.Reflection.MatchedMethod.ToLambdaExpression(System.Object)">
            <summary>Возвращает выражение, соответствующее вызову метода с подобранными параметрами.</summary>
            <param name="instance">Экземпляр, для котроого будет вызван метод (<c>null</c> для статических методов).</param>
            <returns>Выражение, соответствующее вызову метода с подобранными параметрами.</returns>
        </member>
        <member name="M:Mallenom.Reflection.MatchedMethod.Compile(System.Object)">
            <summary>Создает делегат, вызывающий метод с подобранными параметрами.</summary>
            <param name="instance">Экземпляр, для котроого будет вызван метод (<c>null</c> для статических методов).</param>
            <returns>Делегат, вызывающий метод с подобранными параметрами.</returns>
            <remarks>Делегат будет иметь тип <see cref="T:System.Func`1"/>, где T - тип возвращаемого значения, или <see cref="T:System.Action"/>.</remarks>
        </member>
        <member name="M:Mallenom.Reflection.MatchedMethod.Compile">
            <summary>Создает делегат, вызывающий метод с подобранными параметрами.</summary>
            <returns>Делегат, вызывающий метод с подобранными параметрами.</returns>
            <remarks>
            Делегат будет иметь тип <see cref="T:System.Func`1"/>, <see cref="T:System.Func`2"/>, <see cref="T:System.Action"/>, или <see cref="T:System.Action`1"/>
            в зависимости от типа возвращаемого значения и типа метода.
            .</remarks>
        </member>
        <member name="T:Mallenom.Reflection.ParameterValue">
            <summary>Методы для создания провайдеров значений параметров.</summary>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValue.Create``1(System.String,``0)">
            <summary>Создает провайдер значения для параметра.</summary>
            <typeparam name="T">Тип значения аргумента.</typeparam>
            <param name="parameterName">Имя параметра.</param>
            <param name="value">Значение аргумента.</param>
            <returns>Провайдер значения параметра.</returns>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValue.Create``1(System.Int32,``0)">
            <summary>Создает провайдер значения для параметра.</summary>
            <typeparam name="T">Тип значения аргумента.</typeparam>
            <param name="ordinal">Порядковый номер аргумента.</param>
            <param name="value">Значение аргумента.</param>
            <returns>Провайдер значения параметра.</returns>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValue.Create``1(``0)">
            <summary>Создает провайдер значения для параметра.</summary>
            <typeparam name="T">Тип значения аргумента.</typeparam>
            <param name="value">Значение аргумента.</param>
            <returns>Провайдер значения параметра.</returns>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValue.Create(System.String,System.Object)">
            <summary>Создает провайдер значения для параметра.</summary>
            <param name="parameterName">Имя параметра.</param>
            <param name="value">Значение аргумента.</param>
            <returns>Провайдер значения параметра.</returns>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValue.Create(System.Int32,System.Object)">
            <summary>Создает провайдер значения для параметра с указанным порядковым номером.</summary>
            <param name="ordinal">Порядковый номер аргумента.</param>
            <param name="value">Значение аргумента.</param>
            <returns>Провайдер значения параметра.</returns>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValue.Create(System.Object)">
            <summary>Создает провайдер значения для параметра.</summary>
            <param name="value">Значение аргумента.</param>
            <returns>Провайдер значения параметра.</returns>
        </member>
        <member name="T:Mallenom.Reflection.ParameterValueMatcher">
            <summary>Вспомогательный класс для подбора значений параметров методов.</summary>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValueMatcher.TryMatchMethod(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Mallenom.Reflection.IParameterValue})">
            <summary>Подбирает значения аргументов для указанного метода.</summary>
            <param name="method">Информация о методе.</param>
            <param name="parameterValues">Провайдеры значений аргументов методв.</param>
            <returns>
            Метод с подобранными значениями аргументов или <c>null</c>,
            если не удалось подобрать значения.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValueMatcher.TryMatchConstructor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Mallenom.Reflection.IParameterValue})">
            <summary>Подбирает значения аргументов для указанного конструктора.</summary>
            <param name="constructor">Информация о конструкторе.</param>
            <param name="parameterValues">Провайдеры значений аргументов конструктора.</param>
            <returns>
            Конструктор с подобранными значениями аргументов или <c>null</c>,
            если не удалось подобрать значения.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="constructor"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Reflection.ParameterValueMatcher.FindInvokableConstructors(System.Type,System.Collections.Generic.IEnumerable{Mallenom.Reflection.IParameterValue},System.Reflection.BindingFlags)">
            <summary>Ищет конструкторы, которые можно вызвать, имея указанный набор параметров.</summary>
            <param name="type">Тип, конструктор которого будет подобран.</param>
            <param name="parameterValues">Провайдеры значений параметров конструктора.</param>
            <param name="flags">Флаг поиска конструктора.</param>
            <returns>Список конструкторов с подобранными параметрами.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.Setup.Settings.IntervalSettingMetadata`1">
            <summary>Параметры свойства.</summary>
            <typeparam name="T">Тип значения свойства.</typeparam>
        </member>
        <member name="P:Mallenom.Setup.Settings.IntervalSettingMetadata`1.MinimumValue">
            <summary>Возвращает и устанавливает минимальное значение свойства.</summary>
            <value>Минимальное значение свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.IntervalSettingMetadata`1.MaximumValue">
            <summary>Возвращает и устакнавливает максимальное значение свойства.</summary>
            <value>Максимальное значение свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.IntervalSettingMetadata`1.Step">
            <summary>Возвращает и устакнавливает шаг изменения значения свойства.</summary>
            <value>Шаг изменения значения свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.IntervalSettingMetadata`1.SafeMode">
            <summary>Возвращает и устанавливает флаг безопасного режима.</summary>
            <value>Флаг безопасного режима.</value>
        </member>
        <member name="T:Mallenom.Setup.Settings.ParameterMetadata">
            <summary>Метаданные параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.ParameterMetadata.Name">
            <summary>Возвращает и устанавливает имя свойства.</summary>
            <value>Имя значения свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.ParameterMetadata.DisplayNameSource">
            <summary>Возвращает и устанавливает источник строки с отображаемым имя свойства.</summary>
            <value>Источник строки с отоюражаемым именем свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.ParameterMetadata.IsAdvanced">
            <summary>Возвращает и устанавливает флаг advanced-свойства.</summary>
            <value>Флаг advanced-свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.ParameterMetadata.Category">
            <summary>Возвращает и устанавливает категорию свойства.</summary>
            <value>Категория свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.ParameterMetadata.DescriptionSource">
            <summary>Возвращает и устанавливает описание параметра.</summary>
            <value>Описание параметра.</value>
        </member>
        <member name="T:Mallenom.Setup.Settings.RestrictedSettingMetadata`1">
            <summary>Параметры свойства.</summary>
            <typeparam name="T">Тип значения свойства.</typeparam>
        </member>
        <member name="P:Mallenom.Setup.Settings.RestrictedSettingMetadata`1.ValidValues">
            <summary>Возвращает и устанавливает список допустимых значений.</summary>
            <value>Список допустимых значений.</value>
        </member>
        <member name="T:Mallenom.Setup.Settings.SettingMetadata`1">
            <summary>Параметры свойства.</summary>
            <typeparam name="T">Тип значения свойства.</typeparam>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingMetadata`1.ValueStorage">
            <summary>Возвращает и устанавливает хранилище значения свойства.</summary>
            <value>Хранилище значения свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingMetadata`1.DefaultValue">
            <summary>Возвращает и устанавливает значение свойства по умолчанию.</summary>
            <value>Значение свойства по умолчанию.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingMetadata`1.FormatString">
            <summary>Возвращает и устанавливает строку форматирования значения свойства.</summary>
            <value>Строка форматирования значения свойства.</value>
        </member>
        <member name="T:Mallenom.Setup.Settings.StringSettingMetadata">
            <summary>Метаданный строкового свойства.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.StringSettingMetadata.ValidateValue">
            <summary>Возвращает и устанавливает предикат валидации значения.</summary>
            <value>Предикат валидации значения.</value>
        </member>
        <member name="T:Mallenom.Setup.Settings.SettingsSetupControlProvider">
            <summary>Провайдер контрола настройки для объекта, реализующего settings через атрибуты.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingsSetupControlProvider.CreateControl(System.Object)">
            <summary>Создать контрол настройки.</summary>
            <param name="obj">Настраиваемый объект.</param>
            <returns>Контрол настройки объекта.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.BaseBidirectionalBinding`2">
            <summary>Двунаправленная связь параметров.</summary>
            <typeparam name="TSourceValue">Тип значения связываемого параметра.</typeparam>
            <typeparam name="TTargetValue">Тип значения параметра, с которым устанавливается связь.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`1})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.BaseBidirectionalBinding`2"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Finalize">
            <summary>Деструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Sync">
            <summary>Синхронизировать значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Push(`0)">
            <summary>Вычисление значения параметра, с которым установлена связь.</summary>
            <param name="value">Значение параметра-инициатора связи.</param>
            <returns>Значение для параметра, с которым установлена связь.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Pull(`1)">
            <summary>Вычисление значения параметра-инициатора связи..</summary>
            <param name="value">Значение параметра, с которым установлена связь.</param>
            <returns>Значение для параметра-инициатора связи.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.SourceSetting">
            <summary>Параметр-инициатор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.TargetSetting">
            <summary>Параметр, с которым установлена связь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Source">
            <summary>Параметр-инициатор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Target">
            <summary>Параметр, с которым установлена связь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Direction">
            <summary>Направление связи.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Dispose(System.Boolean)">
            <summary>Освободить ресурсы.</summary>
            <param name="disposing">Освободить managed-ресурсы.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseBidirectionalBinding`2.Dispose">
            <summary>Освободить ресурсы.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.BidirectionalBinding`1">
            <summary>Двунаправленная связь параметров.</summary>
            <typeparam name="T">Тип значений параметров.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.BidirectionalBinding`1.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`0})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.BidirectionalBinding`1"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BidirectionalBinding`1.Push(`0)">
            <summary>Вычисление значения параметра, с которым установлена связь.</summary>
            <param name="value">Значение параметра-инициатора связи.</param>
            <returns>Значение для параметра, с которым установлена связь.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BidirectionalBinding`1.Pull(`0)">
            <summary>Вычисление значения параметра-инициатора связи..</summary>
            <param name="value">Значение параметра, с которым установлена связь.</param>
            <returns>Значение для параметра-инициатора связи.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.BidirectionalBinding`2">
            <summary>Однонаправленная pull-связь параметров.</summary>
            <typeparam name="TSourceValue">Тип значения связываемого параметра.</typeparam>
            <typeparam name="TTargetValue">Тип значения параметра, с которым устанавливается связь.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.BidirectionalBinding`2.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`1},Mallenom.Setup.Settings.PullDelegate{`0,`1},Mallenom.Setup.Settings.PushDelegate{`0,`1})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PullBinding`2"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
            <param name="pullFunc">Делегат преобразования <typeparamref name="TTargetValue"/> в <typeparamref name="TSourceValue"/>.</param>
            <param name="pushFunc">Делегат преобразования <typeparamref name="TSourceValue"/> в <typeparamref name="TTargetValue"/>.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BidirectionalBinding`2.Pull(`1)">
            <summary>Вычисление значения параметра-инициатора связи..</summary>
            <param name="value">Значение параметра, с которым установлена связь.</param>
            <returns>Значение для параметра-инициатора связи.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BidirectionalBinding`2.Push(`0)">
            <summary>Вычисление значения параметра, с которым установлена связь.</summary>
            <param name="value">Значение параметра-инициатора связи.</param>
            <returns>Значение для параметра, с которым установлена связь.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.ISettingBinding">
            <summary>Связь 2х параметров.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.ISettingBinding.Source">
            <summary>Параметр-инициатор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.ISettingBinding.Target">
            <summary>Параметр, с которым установлена связь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.ISettingBinding.Direction">
            <summary>Направление связи.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.BindingDirection">
            <summary>Направление связи.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.BindingDirection.Pull">
            <summary>От цели к источнику.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.BindingDirection.Push">
            <summary>От источника к цели.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.BindingDirection.Bidirectional">
            <summary>Двунаправленная.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.BasePullBinding`2">
            <summary>Однонаправленная pull-связь параметров.</summary>
            <typeparam name="TSourceValue">Тип значения связываемого параметра.</typeparam>
            <typeparam name="TTargetValue">Тип значения параметра, с которым устанавливается связь.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePullBinding`2.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`1})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.BasePullBinding`2"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePullBinding`2.Finalize">
            <summary>Деструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePullBinding`2.Sync">
            <summary>Синхронизировать значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePullBinding`2.Pull(`1)">
            <summary>Вычисление значения параметра-инициатора связи..</summary>
            <param name="value">Значение параметра, с которым установлена связь.</param>
            <returns>Значение для параметра-инициатора связи.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePullBinding`2.SourceSetting">
            <summary>Параметр-инициатор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePullBinding`2.TargetSetting">
            <summary>Параметр, с которым установлена связь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePullBinding`2.Source">
            <summary>Параметр-инициатор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePullBinding`2.Target">
            <summary>Параметр, с которым установлена связь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePullBinding`2.Direction">
            <summary>Направление связи.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePullBinding`2.Dispose(System.Boolean)">
            <summary>Освободить ресурсы.</summary>
            <param name="disposing">Освободить managed-ресурсы.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePullBinding`2.Dispose">
            <summary>Освободить ресурсы.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.PullBinding`1">
            <summary>Однонаправленная pull-связь параметров.</summary>
            <typeparam name="T">Тип значений параметров.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.PullBinding`1.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`0})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PullBinding`1"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PullBinding`1.Pull(`0)">
            <summary>Вычисление значения параметра-инициатора связи..</summary>
            <param name="value">Значение параметра, с которым установлена связь.</param>
            <returns>Значение для параметра-инициатора связи.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.PullDelegate`2">
            <summary>pull-делетат.</summary>
            <typeparam name="TSourceValue">Тип значения связываемого параметра.</typeparam>
            <typeparam name="TTargetValue">Тип значения параметра, с которым устанавливается связь.</typeparam>
            <param name="value">Значение параметра, с которым установлена связь.</param>
            <returns>Значение для параметра-инициатора связи.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.PullBinding`2">
            <summary>Однонаправленная pull-связь параметров.</summary>
            <typeparam name="TSourceValue">Тип значения связываемого параметра.</typeparam>
            <typeparam name="TTargetValue">Тип значения параметра, с которым устанавливается связь.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.PullBinding`2.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`1},Mallenom.Setup.Settings.PullDelegate{`0,`1})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PullBinding`2"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
            <param name="pullFunc">Делегат преобразования <typeparamref name="TTargetValue"/> в <typeparamref name="TSourceValue"/>.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PullBinding`2.Pull(`1)">
            <summary>Вычисление значения параметра-инициатора связи..</summary>
            <param name="value">Значение параметра, с которым установлена связь.</param>
            <returns>Значение для параметра-инициатора связи.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.BasePushBinding`2">
            <summary>Однонаправленная push-связь параметров.</summary>
            <typeparam name="TSourceValue">Тип значения связываемого параметра.</typeparam>
            <typeparam name="TTargetValue">Тип значения параметра, с которым устанавливается связь.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePushBinding`2.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`1})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.BasePushBinding`2"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePushBinding`2.Finalize">
            <summary>Деструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePushBinding`2.Sync">
            <summary>Синхронизировать значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePushBinding`2.Push(`0)">
            <summary>Вычисление значения параметра, с которым установлена связь.</summary>
            <param name="value">Значение параметра-инициатора связи.</param>
            <returns>Значение для параметра, с которым установлена связь.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePushBinding`2.SourceSetting">
            <summary>Параметр-инициатор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePushBinding`2.TargetSetting">
            <summary>Параметр, с которым установлена связь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePushBinding`2.Source">
            <summary>Параметр-инициатор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePushBinding`2.Target">
            <summary>Параметр, с которым установлена связь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BasePushBinding`2.Direction">
            <summary>Направление связи.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePushBinding`2.Dispose(System.Boolean)">
            <summary>Освободить ресурсы.</summary>
            <param name="disposing">Освободить managed-ресурсы.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BasePushBinding`2.Dispose">
            <summary>Освободить ресурсы.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.PushBinding`1">
            <summary>Однонаправленная push-связь параметров.</summary>
            <typeparam name="T">Тип значений параметров.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.PushBinding`1.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`0})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PushBinding`2"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PushBinding`1.Push(`0)">
            <summary>Вычисление значения параметра, с которым установлена связь.</summary>
            <param name="value">Значение параметра-инициатора связи.</param>
            <returns>Значение для параметра, с которым установлена связь.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.PushDelegate`2">
            <summary>push-делетат.</summary>
            <typeparam name="TSourceValue">Тип значения связываемого параметра.</typeparam>
            <typeparam name="TTargetValue">Тип значения параметра, с которым устанавливается связь.</typeparam>
            <param name="value">Значение параметра-инициатора связи.</param>
            <returns>Значение для параметра, с которым установлена связь.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.PushBinding`2">
            <summary>Однонаправленная push-связь параметров.</summary>
            <typeparam name="TSourceValue">Тип значения связываемого параметра.</typeparam>
            <typeparam name="TTargetValue">Тип значения параметра, с которым устанавливается связь.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.PushBinding`2.#ctor(Mallenom.Setup.Settings.ISetting{`0},Mallenom.Setup.Settings.ISetting{`1},Mallenom.Setup.Settings.PushDelegate{`0,`1})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PushBinding`2"/>.</summary>
            <param name="sourceSetting">Связываемый параметр.</param>
            <param name="targetSetting">Параметр, с которым устанавливается связь.</param>
            <param name="pushFunc">Делегат преобразования <typeparamref name="TSourceValue"/> в <typeparamref name="TTargetValue"/>.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PushBinding`2.Push(`0)">
            <summary>Вычисление значения параметра, с которым установлена связь.</summary>
            <param name="value">Значение параметра-инициатора связи.</param>
            <returns>Значение для параметра, с которым установлена связь.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.SerializationFlags">
            <summary>Опции сериализации.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.SerializationFlags.None">
            <summary>Default.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.SerializationFlags.ForceSaveDefaultValue">
            <summary>Сохранить значение параметра, даже если оно равно значению по умолчанию.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.DeserializationFlags">
            <summary>Опции десериализации.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.DeserializationFlags.None">
            <summary>Default.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.DeserializationFlags.DoNotForceDefaultValue">
            <summary>Не устанавливать значение параметра по умолчанию, если параметр отсутствует в конфигурации.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.ISettingControlProvider">
            <summary>Интерфейс провайдера контролов настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ISettingControlProvider.CreateSettingControl(Mallenom.Setup.Settings.INamedParameter,Mallenom.Setup.Settings.SettingControlOptions)">
            <summary>Создать контрол настройки.</summary>
            <param name="parameter">Параметр.</param>
            <param name="options"></param>
            <returns>Контрол.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.ISettingFilter">
            <summary>Интерфейс фильтра настроек.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ISettingFilter.Filter(Mallenom.Setup.Settings.INamedParameter)">
            <summary>Фильтрация настроек.</summary>
            <param name="setting">Настройка.</param>
            <returns>true = настройка прошла фильтр.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.ISettingNameProvider">
            <summary>Интерфейс для объекта, идентифицируемого в конфиге уникальным именем.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.ISettingNameProvider.SettingName">
            <summary>Уникальное имя объекта.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.ISettingRepository">
            <summary>Хранилище параметров.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ISettingRepository.GetNamespaces">
            <summary>Получить список пространств имен.</summary>
            <returns>Список пространств имен.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.ISettingRepository.GetParameters(System.String)">
            <summary>Получить списко параметров в пространстве имен <paramref name="nameSpace"/>.</summary>
            <param name="nameSpace">Пространство имен.</param>
            <returns>Список параметров.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.SettingRepository">
            <summary>Хранилище параметров.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SettingRepository"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingRepository.Item(System.String,System.String)">
            <summary>Получить параметр по его имени.</summary>
            <param name="nameSpace">Пространтво имен, в котором расположен параметр.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Параметр.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.GetSetupControlForNamespace(Mallenom.Setup.Settings.ISettingFilter,System.String)">
            <summary>
            Получить контрол для настройки всех параметров в пространстве имен <paramref name="nameSpace"/>.
            </summary>
            <param name="filter">Фильтр настроек.</param>
            <param name="nameSpace">Пространство имен.</param>
            <returns>Контрол для настройки параметров.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.GetSetupControlForNamespace(System.String)">
            <summary>
            Получить контрол для настройки всех параметров в пространстве имен <paramref name="nameSpace"/>.
            </summary>
            <param name="nameSpace">Пространство имен.</param>
            <returns>Контрол для настройки параметров.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.RegisterParameters(System.String,System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.INamedParameter})">
            <summary>Зарегистрировать параметры.</summary>
            <param name="nameSpace">Пространство имен.</param>
            <param name="parameters">Список параметров.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.RegisterParameter(System.String,Mallenom.Setup.Settings.INamedParameter)">
            <summary>Зарегистрировать параметр.</summary>
            <param name="nameSpace">Пространство имен.</param>
            <param name="parameter">Регистрируемый параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.UnregisterParameter(System.String,Mallenom.Setup.Settings.INamedParameter)">
            <summary>Отменить решистрацию параметра.</summary>
            <param name="nameSpace">Пространство имен.</param>
            <param name="parameter">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.UnregisterParameter(System.String,System.String)">
            <summary>Отменить решистрацию параметра.</summary>
            <param name="nameSpace">Пространство имен.</param>
            <param name="parameterName">Имя параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.UnregisterParameters(System.String)">
            <summary>Отменить регистрацию всех параметров в пространстве имен.</summary>
            <param name="nameSpace">Пространство имен.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.GetNamespaces(System.String)">
            <summary>Получить список пространств имен.</summary>
            <param name="nameSpace">Родительское пространство имен.</param>
            <returns>Список пространств имен, находящихся в пространстве <paramref name="nameSpace"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.GetNamespaces">
            <summary>Получить список пространств имен.</summary>
            <returns>Список пространств имен.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.GetParameters(System.String)">
            <summary>Получить списко параметров в пространстве имен <paramref name="nameSpace"/>.</summary>
            <param name="nameSpace">Пространство имен.</param>
            <returns>Список параметров.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.SaveToConfig(Mallenom.Systems.Config.Configuration)">
            <summary>Сохранить значения параметров в конфигурации <paramref name="configuration"/>.</summary>
            <param name="configuration">Конфигурация для хранения значений параметров.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingRepository.LoadFromConfig(Mallenom.Systems.Config.Configuration)">
            <summary>Загрузить значения параметров из конфигурации <paramref name="configuration"/>.</summary>
            <param name="configuration">Конфигурация, хранящая значения параметров.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.SettingAttribute">
            <summary>Атрибут, определяющий необходимость генерации <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/> для поля или свойства объекта.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.SettingAttribute.Log">
            <summary>Лог.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SettingAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SettingAttribute"/>.</summary>
            <param name="displayName">Отображаемое имя параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.#ctor(System.String,System.Object)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SettingAttribute"/>.</summary>
            <param name="displayName">Отображаемое имя параметра.</param>
            <param name="defaultValue">Значение параметра по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.#ctor(System.String,System.Object,System.Object,System.Object)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SettingAttribute"/>.</summary>
            <param name="displayName">Отображаемое имя параметра.</param>
            <param name="defaultValue">Значение параметра по умолчанию.</param>
            <param name="minValue">Минимальное значение параметра.</param>
            <param name="maxValue">Максимальное значение параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.#ctor(System.String,System.Object,System.Object,System.Object,System.String)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SettingAttribute"/>.</summary>
            <param name="displayName">Отображаемое имя параметра.</param>
            <param name="defaultValue">Значение параметра по умолчанию.</param>
            <param name="minValue">Минимальное значение параметра.</param>
            <param name="maxValue">Максимальное значение параметра.</param>
            <param name="description">Описание параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.GetCategory(System.String)">
            <summary>Получить категорию по ее имени.</summary>
            <param name="name">Имя категории.</param>
            <returns>Категория с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.GetCategoryFromStringId(System.String)">
            <summary>Получить категорию по идентификатору строки.</summary>
            <param name="stringId">Идентификаптор строки с именем категории.</param>
            <returns>Категория.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.DisplayName">
            <summary>Отображаемое имя параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.DisplayNameStringId">
            <summary>Идентификатор строки с отображаемым именем параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.OrderId">
            <summary>Порядковый номер.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.CategoryName">
            <summary>Имя категории, к которой принадлежит параметр.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.CategoryNameStringId">
            <summary>Возвращает и устанавливает идентификатор строки с именем категории.</summary>
            <value>Идентификатор строки с именем категории.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.FormatString">
            <summary>Строка, определяющая преобразование значение параметра в строку.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.Category">
            <summary>Категория, к которой принадлежит параметр.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.Default">
            <summary>Значение параметра по умолчанию.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.Maximum">
            <summary>Максимальное значение параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.Minimum">
            <summary>Минимальное значение параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.Step">
            <summary>Шаг изменения значения параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.Advanced">
            <summary>Параметр является продвинутым.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.Description">
            <summary>Описание параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingAttribute.DescriptionStringId">
            <summary>Идентификатор строки с описанием параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.Unbox``1(System.Object,``0)">
            <summary>
            Преобразует значение из типа <see cref="T:System.Object"/> в значение типа <typeparamref name="T"/>.
            Если <paramref name="value"/> хранит значение типа <typeparamref name="T"/>, то выполняется unboxing.
            Если <paramref name="value"/> хранит значение другого типа, предпринимается попытка конвертации.
            </summary>
            <typeparam name="T">Тип, к которому необходимо привести значение <paramref name="value"/>.</typeparam>
            <param name="value">Приводимое значение.</param>
            <param name="def">Значение по умолчанию.</param>
            <returns><paramref name="value"/>, преобразованное в тип <typeparamref name="T"/>, или <paramref name="def"/>, если преобразование невозможно.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.CreateSetting(Mallenom.Setup.Settings.ISettingValueStorage,System.Type,System.String)">
            <summary>Создает объект нужного типа, поддерживающий <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="type">Тип параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>Объект нужного типа, поддерживающий <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.GetSettings(System.Object)">
            <summary>Получить список всех <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/> для объекта <paramref name="obj"/>.</summary>
            <param name="obj">Объект, для которого требуется сгенерировать список всех параметров.</param>
            <returns>Список всех <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/> для объекта <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.GetSettings(System.Type)">
            <summary>Получить список всех <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/> для статического объекта типа <paramref name="type"/>.</summary>
            <param name="type">Объект, для которого требуется сгенерировать список всех параметров.</param>
            <returns>Список всех <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/> для объекта <paramref name="type"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.ResetObject(System.Object,System.Boolean)">
            <summary>Сбросить настройки объекта на значения по умолчанию.</summary>
            <param name="obj">Объект.</param>
            <param name="resetStatic">Сбросить статические параметры объекта.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.ResetObject(System.Object)">
            <summary>Сбросить настройки объекта на значения по умолчанию.</summary>
            <param name="obj">Объект.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.ResetObject(System.Type)">
            <summary>Сбросить статические настройки объекта на значения по умолчанию.</summary>
            <param name="type">Тип объекта.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.CreateSetting(System.Object,System.Reflection.PropertyInfo)">
            <summary>Создает <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/>, привязанный к свойству <paramref name="prop"/> объекта <paramref name="obj"/>.</summary>
            <param name="obj">Объект, содержащий свойство <paramref name="prop"/>.</param>
            <param name="prop">Свойство объекта, хранящее значение параметра.</param>
            <returns><see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/>, привязанный к свойству <paramref name="prop"/> объекта <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingAttribute.CreateSetting(System.Object,System.Reflection.FieldInfo)">
            <summary>Создает <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/>, привязанный к полю <paramref name="field"/> объекта <paramref name="obj"/>.</summary>
            <param name="obj">Объект, содержащий поле <paramref name="field"/>.</param>
            <param name="field">Поле объекта, хранящее значение параметра.</param>
            <returns><see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/>, привязанный к полю <paramref name="field"/> объекта <paramref name="obj"/>.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.BaseAction">
            <summary>Базовый параметр-действие.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseAction.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="category">Категория параметра.</param>
            <param name="advanced">Параметр является расширенным.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseAction.Perform">
            <summary>Выполнить действие.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.BaseIntervalSetting`1">
            <summary>Базовый класс интервального параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Settings.BaseIntervalSetting`1._formatString">
            <summary>Строка форматирования.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.BaseIntervalSetting`1._safeMode">
            <summary>Автокорректировка значений, выходящих за пределы диапазона.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные свойства.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">Автокорректировка значений.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">Автокорректировка значений.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.SetValueSafe(`0)">
            <summary>Безопасная устновка значения параметра.</summary>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.FixValue(`0)">
            <summary>Привести значение к допустимому.</summary>
            <param name="value">Приводимое значение.</param>
            <returns>Допустимое значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.ValidateValue(`0)">
            <summary>Проверка значения на принадлежность диапазону [min; max].</summary>
            <param name="value">Проверяемое значение.</param>
            <returns>True, если значение параметра может быть установлено в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.RaiseMinMaxChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.BaseIntervalSetting`1.MinMaxChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.RaiseStepChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.BaseIntervalSetting`1.StepChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.SetMinMaxStep(`0,`0,`0)">
            <summary>Установить новые значение минимума, максимума и шага измения значения.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.SetMinMax(`0,`0)">
            <summary>Установить новые значение минимума и максимума.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.SetStep(`0)">
            <summary>Установить новое значение шага.</summary>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.FormatValue(`0)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="E:Mallenom.Setup.Settings.BaseIntervalSetting`1.MinMaxChanged">
            <summary>Событие - минимум/максимум изменились.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.BaseIntervalSetting`1.StepChanged">
            <summary>Событие - шаг изменен.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.Mallenom#Setup#Settings#IIntervalSetting#GetMinimum">
            <summary>Минимальное значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.Mallenom#Setup#Settings#IIntervalSetting#GetMaximum">
            <summary>Максимальное значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseIntervalSetting`1.Mallenom#Setup#Settings#IIntervalSetting#GetStep">
            <summary>Шаг.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseIntervalSetting`1.Minimum">
            <summary>Минимальное значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseIntervalSetting`1.Maximum">
            <summary>Максимальное значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseIntervalSetting`1.Step">
            <summary>Шаг.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.BaseParameter">
            <summary>Базовый класс параметра.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.BaseParameter._settingControlOptions">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseParameter.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя парметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="category">Категория параметра.</param>
            <param name="advanced">Параметр является расширенным.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseParameter.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseParameter.Name">
            <summary>Имя парметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseParameter.DisplayNameSource">
            <summary>Возвращает источник строки с отображаемым именем параметра.</summary>
            <value>Источник строки с отображаемым именем параметра.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseParameter.DisplayName">
            <summary>Дружественное имя параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseParameter.DescriptionSource">
            <summary>Возвращает источник строки с описанием параметра.</summary>
            <value>Источник строки с описанием параметра.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseParameter.Description">
            <summary>Описание параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseParameter.Category">
            <summary>Категория параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseParameter.Advanced">
            <summary>Параметр является прасширенным.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseParameter.SettingControlOptions">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseParameter.CreateSettingControl">
            <summary>Создать контрол для настройки параметра.</summary>
            <returns>Созданный контрол.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseParameter.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Setup.BaseParameter"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Setup.BaseParameter"/>.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.BaseRestrictedSetting`2">
            <summary>Параметр, значением которого является объект некоторого класса.</summary>
            <typeparam name="TValue">Тип значения параметра.</typeparam>
            <typeparam name="TIdentifier">Тип идентификатора значения.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Settings.BaseRestrictedSetting`2._validItems">
            <summary>Список возможных значений параметра.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.BaseRestrictedSetting`2.ValidValuesUpdated">
            <summary>Список допустимых значений обновлен.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.#ctor(Mallenom.Setup.Settings.RestrictedSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные свойства.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseRestrictedSetting`2.ValidValuesCount">
            <summary>Число допустимых значений параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.GetValidValues">
            <summary>Получить допустимые значения параметра, представленные уникальными строковыми значениями.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseRestrictedSetting`2.ValidValues">
            <summary>Список допустимых значений параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.FillValues(System.Collections.Generic.IList{`0})">
            <summary>Заполнить список допустимыми значениями параметра.</summary>
            <param name="list">Список.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.GetValidValue(System.Int32)">
            <summary>Получить допустимое значение по индексу.</summary>
            <param name="index">Индекс.</param>
            <returns>Значение с индексом <paramref name="index"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.RaiseValidValuesUpdated">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.BaseRestrictedSetting`2.ValidValuesUpdated"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.ValidateValue(`0)">
            <summary>Проверка значения на принадлежность списку допустимых значений.</summary>
            <param name="value">Проверяемое значение.</param>
            <returns>True, если значение параметра может быть установлено в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.GetIdentifier(`0)">
            <summary>Получить идентификатор значения.</summary>
            <param name="value">Значение.</param>
            <returns>Идентификатор.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.SaveToConfigCore(Mallenom.Systems.Config.PropertyBag,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="pb">Хранилище настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.SaveToConfigCore(Mallenom.Systems.Config.Configuration,System.String,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Оъект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.LoadFromConfigCore(Mallenom.Systems.Config.PropertyBag,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="pb">Хранилище настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.LoadFromConfigCore(Mallenom.Systems.Config.Configuration,System.String,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`2.FormatValue(`0)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.BaseRestrictedSetting`1">
            <summary>Параметр, значением которого является объект некоторого класса.</summary>
            <typeparam name="TValue">Тип значения параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`1.#ctor(Mallenom.Setup.Settings.RestrictedSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные свойства.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseRestrictedSetting`1.GetIdentifier(`0)">
            <summary>Получить идентификатор значения.</summary>
            <param name="value">Значение.</param>
            <returns>Идентификатор.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.BaseSetting`1">
            <summary>Базовый класс параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Settings.BaseSetting`1._default">
            <summary>Значение параметра по умолчанию.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.BaseSetting`1._valueStorage">
            <summary>Хранилище текущего значения параметра.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.BaseSetting`1._readOnly">
            <summary>Параметр только для чтения.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.BaseSetting`1.ReadOnlyChanged">
            <summary>Событие - свойство <see cref="P:Mallenom.Setup.Settings.BaseSetting`1.ReadOnly"/> изменено.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.BaseSetting`1.Changed">
            <summary>Событие - значение парметра изменено.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.BaseSetting`1.ValueChanged">
            <summary>Событие - значение парметра изменено.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="category">Категория параметра.</param>
            <param name="advanced">Параметр является расширенным.</param>
            <param name="def">Значение параметра по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="category">Категория параметра.</param>
            <param name="advanced">Параметр является расширенным.</param>
            <param name="def">Значение параметра по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.Bind(Mallenom.Setup.Settings.IGeneralSetting)">
            <summary>Установить двунаправленную связь с другим параметром.</summary>
            <param name="setting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.Bind(Mallenom.Setup.Settings.IGeneralSetting,Mallenom.Setup.Settings.BindingDirection)">
            <summary>Установить связь с другим параметром.</summary>
            <param name="setting">Параметр, с которым устанавливается связь.</param>
            <param name="direction">Направление связи.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.Bind``1(Mallenom.Setup.Settings.IGeneralSetting,System.Object[])">
            <summary>Установить связь с другим параметром.</summary>
            <typeparam name="TBinding">
            Тип связи. Должен иметь конструктор вида .ctor(IGeneralSetting source, IGeneralSetting target, ...)
            </typeparam>
            <param name="setting">Параметр, с которым устанавливается связь.</param>
            <param name="args">Дополнительные параметры для конструктора <typeparamref name="TBinding"/>.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.Bind``1(Mallenom.Setup.Settings.IGeneralSetting)">
            <summary>Установить связь с другим параметром.</summary>
            <typeparam name="TBinding">
            Тип связи. Должен иметь конструктор вида .ctor(IGeneralSetting source, IGeneralSetting target, ...)
            </typeparam>
            <param name="setting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.IsBoundTo(Mallenom.Setup.Settings.IGeneralSetting)">
            <summary>Проверка наличия связи с другим параметром.</summary>
            <param name="setting">Параметр, наличие связи с которым проверяется.</param>
            <returns>true, если данный параметр связан с <paramref name="setting"/>.</returns>
            <remarks>Связь считается направленной, и проверяется только исходящая связь.</remarks>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.Unbind(Mallenom.Setup.Settings.IGeneralSetting)">
            <summary>Удалить связь с другим параметром.</summary>
            <param name="setting">Параметр, cвязь c которым необходимо удалить.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseSetting`1.ReadOnly">
            <summary>Свойство только для чтения.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SetDefault">
            <summary>Установить значение по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.GetDefaultValue">
            <summary>Получить значение параметра по умолчанию.</summary>
            <returns>Значение параметра по умолчанию.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SetValue(System.Object)">
            <summary>Установить значение параметра.</summary>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.GetValue">
            <summary>Получить значение параметра.</summary>
            <returns>Значение параметра.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseSetting`1.ValueType">
            <summary>Тип значения.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfigCore(Mallenom.Systems.Config.PropertyBag,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="pb">Хранилище настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfigCore(Mallenom.Systems.Config.Configuration,System.String,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfig(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfig(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfig(Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="pb">Хранилище настроек.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfig(Mallenom.Systems.Config.PropertyBag,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="pb">Хранилище настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfig(Mallenom.Systems.Config.Configuration,System.String)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SaveToConfig(Mallenom.Systems.Config.Configuration,System.String,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfigCore(Mallenom.Systems.Config.PropertyBag,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="pb">Хранилище настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfigCore(Mallenom.Systems.Config.Configuration,System.String,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfig(Mallenom.Storage.IObjectStorageReader)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfig(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfig(Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="pb">Хранилище настроек.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfig(Mallenom.Systems.Config.PropertyBag,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="pb">Хранилище настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfig(Mallenom.Systems.Config.Configuration,System.String)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.LoadFromConfig(Mallenom.Systems.Config.Configuration,System.String,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseSetting`1.Value">
            <summary>Значение параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.BaseSetting`1.Default">
            <summary>Значение параметра по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.ValidateValue(`0)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.FixValue(`0)">
            <summary>Привести значение к допустимому.</summary>
            <param name="value">Приводимое значение.</param>
            <returns>Допустимое значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.FormatValue(`0)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.AreEqual(`0,`0)">
            <summary>Проверка значений на равенство.</summary>
            <param name="val1">Значение 1.</param>
            <param name="val2">Значение 2.</param>
            <returns>true, если <paramref name="val1"/> == <paramref name="val2"/>, иначе false.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.SetValueSafe(`0)">
            <summary>Установка значения параметра без валидации.</summary>
            <param name="value">Новое значение параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.RaiseChanged(`0)">
            <summary>Вызвать события <see cref="E:Mallenom.Setup.Settings.BaseSetting`1.Changed"/> и <see cref="E:Mallenom.Setup.Settings.BaseSetting`1.ValueChanged"/>.</summary>
            <param name="oldValue">Старое значение параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BaseSetting`1.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Setup.BaseSetting"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Setup.BaseSetting"/>.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.ValueChangedEventArgs`1">
            <summary>Аргументы события - значение изменено.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Settings.ValueChangedEventArgs`1._oldValue">
            <summary>Старое значение.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.ValueChangedEventArgs`1._newValue">
            <summary>Новое значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>Конструктор.</summary>
            <param name="oldValue">Старое значение</param>
            <param name="newValue">Новое значение</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.ValueChangedEventArgs`1.OldValue">
            <summary>Старое значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.ValueChangedEventArgs`1.NewValue">
            <summary>Новое значение.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.INamedParameter">
            <summary>Объект, имеющий представление в виде <see cref="T:Mallenom.Setup.Controls.BaseSettingControl"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.INamedParameter.Name">
            <summary>Название.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.INamedParameter.DisplayName">
            <summary>Дружественное название.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.INamedParameter.Description">
            <summary>Описание.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.INamedParameter.Category">
            <summary>Категория, к которой относится параметр.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.INamedParameter.Advanced">
            <summary>Является ли параметр расширенным.</summary>
            <remarks>Расширенным считается экспериментальный параметр, малозначимый или опасный для изменения.</remarks>
        </member>
        <member name="P:Mallenom.Setup.Settings.INamedParameter.SettingControlOptions">
            <summary>Опции создаваемого контрола настройки.</summary>
            <exception cref="T:InvalidOperationException">Попытка установить значение == null.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.INamedParameter.CreateSettingControl">
            <summary>Создать элемент управления для управления параметром.</summary>
            <returns>Созданный элемент управления.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.IAction">
            <summary>Параметр-действие.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IAction.Perform">
            <summary>Выполнить действие.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.IGeneralSetting">
            <summary>Обобщенный интерфейс настройки.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.IGeneralSetting.ReadOnlyChanged">
            <summary>Событие - значение свойства <see cref="P:Mallenom.Setup.Settings.IGeneralSetting.ReadOnly"/> изменено.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.IGeneralSetting.Changed">
            <summary>Событие - значение изменено.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.Bind(Mallenom.Setup.Settings.IGeneralSetting)">
            <summary>Установить двунаправленную связь с другим параметром.</summary>
            <param name="setting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.Bind(Mallenom.Setup.Settings.IGeneralSetting,Mallenom.Setup.Settings.BindingDirection)">
            <summary>Установить связь с другим параметром.</summary>
            <param name="setting">Параметр, с которым устанавливается связь.</param>
            <param name="direction">Направление связи.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.Bind``1(Mallenom.Setup.Settings.IGeneralSetting,System.Object[])">
            <summary>Установить связь с другим параметром.</summary>
            <typeparam name="TBinding">
            Тип связи. Должен иметь конструктор вида .ctor(source, target, ...)
            </typeparam>
            <param name="setting">Параметр, с которым устанавливается связь.</param>
            <param name="args">Дополнительные параметры для конструктора <typeparamref name="TBinding"/>.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.Bind``1(Mallenom.Setup.Settings.IGeneralSetting)">
            <summary>Установить связь с другим параметром.</summary>
            <typeparam name="TBinding">
            Тип связи. Должен иметь конструктор вида .ctor(IGeneralSetting source, IGeneralSetting target, ...)
            </typeparam>
            <param name="setting">Параметр, с которым устанавливается связь.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.IsBoundTo(Mallenom.Setup.Settings.IGeneralSetting)">
            <summary>Проверка наличия связи с другим параметром.</summary>
            <param name="setting">Параметр, наличие связи с которым проверяется.</param>
            <returns>true, если данный параметр связан с <paramref name="setting"/>.</returns>
            <remarks>Связь считается направленной, и проверяется только исходящая связь.</remarks>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.Unbind(Mallenom.Setup.Settings.IGeneralSetting)">
            <summary>Удалить связь с другим параметром.</summary>
            <param name="setting">Параметр, cвязь c которым необходимо удалить.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.IGeneralSetting.ReadOnly">
            <summary>Только для чтения.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.SetDefault">
            <summary>Установить значение по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.SetValue(System.Object)">
            <summary>Установить значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <exception cref="T:ArgumentException">Значение <paramref name="value"/> недопустимо для данного параметра.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.GetValue">
            <summary>Получить значение параметра.</summary>
            <returns>Значение параметра.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.IGeneralSetting.ValueType">
            <summary>Тип значения.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.GetDefaultValue">
            <summary>Получить значение параметра по умолчанию.</summary>
            <returns>Значение параметра по умолчанию.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.SaveToConfig(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Сохранить параметр в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <exception cref="T:ArgumentNullException"><paramref name="writer"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.SaveToConfig(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить параметр в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
            <exception cref="T:ArgumentNullException"><paramref name="writer"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.SaveToConfig(Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить параметр в конфигурацию.</summary>
            <param name="pb">Хранилище настроек.</param>
            <exception cref="T:ArgumentNullException"><paramref name="pb"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.SaveToConfig(Mallenom.Systems.Config.PropertyBag,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить параметр в конфигурацию.</summary>
            <param name="pb">Хранилище настроек.</param>
            <param name="flags">Опции сериализации.</param>
            <exception cref="T:ArgumentNullException"><paramref name="pb"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.SaveToConfig(Mallenom.Systems.Config.Configuration,System.String)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.SaveToConfig(Mallenom.Systems.Config.Configuration,System.String,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.LoadFromConfig(Mallenom.Storage.IObjectStorageReader)">
            <summary>Загрузить параметр из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <exception cref="T:ArgumentNullException"><paramref name="reader"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.LoadFromConfig(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить параметр из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
            <exception cref="T:ArgumentNullException"><paramref name="reader"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.LoadFromConfig(Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузить параметр из конфигурации.</summary>
            <param name="pb">Хранилище настроек.</param>
            <exception cref="T:ArgumentNullException"><paramref name="pb"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.LoadFromConfig(Mallenom.Systems.Config.PropertyBag,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить параметр из конфигурации.</summary>
            <param name="pb">Хранилище настроек.</param>
            <param name="flags">Опции десериализации.</param>
            <exception cref="T:ArgumentNullException"><paramref name="pb"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.LoadFromConfig(Mallenom.Systems.Config.Configuration,System.String)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IGeneralSetting.LoadFromConfig(Mallenom.Systems.Config.Configuration,System.String,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="config">Хранилище настроек.</param>
            <param name="section">Секция.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.ISetting`1">
            <summary>Интерфейс параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="E:Mallenom.Setup.Settings.ISetting`1.ValueChanged">
            <summary>Событие - значение изменено.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.ISetting`1.Value">
            <summary>Значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.ISetting`1.Default">
            <summary>Значение по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ISetting`1.ValidateValue(`0)">
            <summary>Проверить значение.</summary>
            <param name="value">Проверяемое значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.ISetting`1.FormatValue(`0)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.IIntervalSetting">
            <summary>Интерфейс параметра, ограниченного минимальным и максимальным значениями.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.IIntervalSetting.MinMaxChanged">
            <summary>Событие - минимум/максимум изменились.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.IIntervalSetting.StepChanged">
            <summary>Событие - шаг изменен.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IIntervalSetting.GetMinimum">
            <summary>Получить минимальное значение.</summary>
            <returns>Минимальное значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.IIntervalSetting.GetMaximum">
            <summary>Получить максимальное значение.</summary>
            <returns>Максимальное значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.IIntervalSetting.GetStep">
            <summary>Получить шаг.</summary>
            <returns>Шаг.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.IIntervalSetting`1">
            <summary>Интерфейс параметра, ограниченного минимальным и максимальным значениями.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="P:Mallenom.Setup.Settings.IIntervalSetting`1.Minimum">
            <summary>Минимальное значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.IIntervalSetting`1.Maximum">
            <summary>Максимальное значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.IIntervalSetting`1.Step">
            <summary>Шаг.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.IRestrictedSetting">
            <summary>Интерфейс параметра, ограниченного набором допустимых значений.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.IRestrictedSetting.ValidValuesUpdated">
            <summary>Список допустимых значений обновлен.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.IRestrictedSetting.ValidValuesCount">
            <summary>Количество допустимых значений параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IRestrictedSetting.GetValidValues">
            <summary>Получить допустимые значения параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.IRestrictedSetting`1">
            <summary>Интерфейс параметра, ограниченного набором допустимых значений.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="P:Mallenom.Setup.Settings.IRestrictedSetting`1.ValidValues">
            <summary>Допустимые значения параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IRestrictedSetting`1.GetValidValue(System.Int32)">
            <summary>Получить допустимое значение по индексу.</summary>
            <param name="index">Индекс.</param>
            <returns>Допустимое значение с индексом <paramref name="index"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.IRestrictedSetting`1.FillValues(System.Collections.Generic.IList{`0})">
            <summary>Заполнить список допустимыми значениями.</summary>
            <param name="list">Список для заполнения.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.ISettingValueStorage">
            <summary>Интерфейс объекта, хранящего текущее значение <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ISettingValueStorage.GetValue">
            <summary>Получить текущее значение параметра.</summary>
            <returns>Текущее значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.ISettingValueStorage.SetValue(System.Object)">
            <summary>Установить значение параметра.</summary>
            <param name="value">Новое значение параметра.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.ISettingValueStorage`1">
            <summary>Интерфейс объекта, хранящего текущее значение <see cref="T:Mallenom.Setup.Settings.IGeneralSetting"/>.</summary>
            <typeparam name="T">Тип значения.</typeparam>
        </member>
        <member name="P:Mallenom.Setup.Settings.ISettingValueStorage`1.Value">
            <summary>Текущее значение параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.InternalSettingValueStorage">
            <summary>Хранит значение параметра в собственной внутренней переменной.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.InternalSettingValueStorage.Create(System.Type)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.InternalSettingValueStorage`1"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.InternalSettingValueStorage.Create(System.Type,System.Object)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.InternalSettingValueStorage`1"/>.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.InternalSettingValueStorage`1">
            <summary>Хранит значение параметра в собственной внутренней переменной.</summary>
            <typeparam name="T">Тип значения.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.InternalSettingValueStorage`1.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.InternalSettingValueStorage`1"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.InternalSettingValueStorage`1.#ctor(`0)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.InternalSettingValueStorage`1"/>.</summary>
            <param name="value">Начальное значение параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.InternalSettingValueStorage`1.GetValue">
            <summary>Получить текущее значение параметра.</summary>
            <returns>Текущее значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.InternalSettingValueStorage`1.SetValue(System.Object)">
            <summary>Установить значение параметра.</summary>
            <param name="value">Новое значение параметра.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.InternalSettingValueStorage`1.Value">
            <summary>Значение параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.FieldSettingValueStorage">
            <summary>Хранит значение параметра в поле объекта.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage.Create(System.Object,System.Reflection.FieldInfo)">
            <summary>Создать хранилище.</summary>
            <param name="obj">Объект, поле которого хранит значение параметра.</param>
            <param name="field">Описание поля, хранящего значение.</param>
            <returns>Хранилище для поля <paramref name="field"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage.Create(System.Reflection.FieldInfo)">
            <summary>Создать хранилище.</summary>
            <param name="field">Описание статического поля, хранящего значение.</param>
            <returns>Хранилище для поля <paramref name="field"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage.Create(System.Type,System.String)">
            <summary>Создать хранилище.</summary>
            <param name="type">Тип, статическое поле которого хранит значение.</param>
            <param name="fieldName">Имя поля, хранящего значение.</param>
            <returns>Хранилище для поля <paramref name="fieldName"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage.Create``1(System.String)">
            <summary>Создать хранилище.</summary>
            <typeparam name="T">Тип, статическое поле которого хранит значение.</typeparam>
            <param name="fieldName">Имя поля, хранящего значение.</param>
            <returns>Хранилище для поля <paramref name="fieldName"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage.Create(System.Object,System.String)">
            <summary>Создать хранилище.</summary>
            <param name="obj">Объект, поле которого хранит значение параметра.</param>
            <param name="fieldName">Имя поля, хранящего значение.</param>
            <returns>Хранилище для поля <paramref name="fieldName"/>.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FieldSettingValueStorage`1">
            <summary>Хранит значение параметра в поле объекта.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage`1.#ctor(System.Reflection.FieldInfo)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.FieldSettingValueStorage`1"/>.</summary>
            <param name="fieldInfo">Описание статического поля, хранящего значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage`1.#ctor(System.Type,System.String)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.FieldSettingValueStorage`1"/>.</summary>
            <param name="type">Тип, статическое поле которого хранит значение.</param>
            <param name="fieldName">Имя статического поля, хранящего значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage`1.#ctor(System.Object,System.Reflection.FieldInfo)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.FieldSettingValueStorage`1"/>.</summary>
            <param name="obj">Объект, в поле которого хранится значение параметра.</param>
            <param name="fieldInfo">Описание поля, хранящего значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage`1.#ctor(System.Object,System.String)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.FieldSettingValueStorage`1"/>.</summary>
            <param name="obj">Объект, в поле которого хранится значение параметра.</param>
            <param name="fieldName">Имя поля, хранящего значение.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.FieldSettingValueStorage`1.Object">
            <summary>Объект, содержащий поле (null для статического поля).</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.FieldSettingValueStorage`1.FieldInfo">
            <summary>Поле, хранящее значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage`1.GetValue">
            <summary>Получить текущее значение параметра.</summary>
            <returns>Текущее значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.FieldSettingValueStorage`1.SetValue(System.Object)">
            <summary>Установить значение параметра.</summary>
            <param name="value">Новое значение параметра.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.FieldSettingValueStorage`1.Value">
            <summary>Значение параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.PropertySettingValueStorage">
            <summary>Хранит значение параметра в свойстве объекта.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage.Create(System.Object,System.Reflection.PropertyInfo)">
            <summary>Создать хранилище.</summary>
            <param name="obj">Объект, свойство которого хранит значение параметра.</param>
            <param name="property">Описание свойства, хранящего значение.</param>
            <returns>Хранилище для свойства <paramref name="property"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage.Create(System.Reflection.PropertyInfo)">
            <summary>Создать хранилище.</summary>
            <param name="property">Описание статического свойства, хранящего значение.</param>
            <returns>Хранилище для свойства <paramref name="property"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage.Create(System.Type,System.String)">
            <summary>Создать хранилище.</summary>
            <param name="type">Тип, статическое поле которого хранит значение.</param>
            <param name="propertyName">Имя статического свойства, хранящего значение.</param>
            <returns>Хранилище для свойства <paramref name="propertyName"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage.Create``1(System.String)">
            <summary>Создать хранилище.</summary>
            <typeparam name="T">Тип, статическое поле которого хранит значение.</typeparam>
            <param name="propertyName">Имя статического свойства, хранящего значение.</param>
            <returns>Хранилище для свойства <paramref name="propertyName"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage.Create(System.Object,System.String)">
            <summary>Создать хранилище.</summary>
            <param name="obj">Объект, свойство которого хранит значение параметра.</param>
            <param name="propertyName">Имя свойства, хранящего значение.</param>
            <returns>Хранилище для свойства <paramref name="propertyName"/>.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.PropertySettingValueStorage`1">
            <summary>Хранит значение параметра в свойстве объекта.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PropertySettingValueStorage`1"/>.</summary>
            <param name="propertyInfo">Описание статического свойства, хранящего значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage`1.#ctor(System.Type,System.String)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PropertySettingValueStorage`1"/>.</summary>
            <param name="type">Тип, статическое поле которого хранит значение.</param>
            <param name="propertyName">Имя статического свойства, хранящего значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage`1.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PropertySettingValueStorage`1"/>.</summary>
            <param name="obj">Объект, свойство которого хранит значение параметра.</param>
            <param name="propertyInfo">Описание свойства, хранящего значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage`1.#ctor(System.Object,System.String)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PropertySettingValueStorage`1"/>.</summary>
            <param name="obj">Объект, свойство которого хранит значение параметра.</param>
            <param name="propertyName">Имя свойства, хранящего значение.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.PropertySettingValueStorage`1.Object">
            <summary>Объект, свойство которого хранит значение (null для статических свойств).</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.PropertySettingValueStorage`1.PropertyInfo">
            <summary>Свойство, хранящее значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage`1.GetValue">
            <summary>Получить текущее значение параметра.</summary>
            <returns>Текущее значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PropertySettingValueStorage`1.SetValue(System.Object)">
            <summary>Установить значение параметра.</summary>
            <param name="value">Новое значение параметра.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.PropertySettingValueStorage`1.Value">
            <summary>Значение параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.VirtualSettingStorage`1">
            <summary>Возвращает и устанавливает значение с помощью функций пользователя.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.VirtualSettingStorage`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.VirtualSettingStorage`1"/></summary>
            <param name="getFunc">Функция, возвращающая значение.</param>
            <param name="setFunc">Функция, устанавливающая значение.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getFunc"/> == null или <paramref name="setFunc"/> == null.</exception>
        </member>
        <member name="P:Mallenom.Setup.Settings.VirtualSettingStorage`1.Value">
            <summary>Значение параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.VirtualSettingStorage`1.GetValue">
            <summary>Получить текущее значение параметра.</summary>
            <returns>Текущее значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.VirtualSettingStorage`1.SetValue(System.Object)">
            <summary>Установить значение параметра.</summary>
            <param name="value">Новое значение параметра.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.SettingCategory">
            <summary>Категория настройки.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.SettingCategory.Default">
            <summary>По умолчанию (без категории).</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingCategory.#ctor(System.String,System.String)">
            <summary>Конструктор.</summary>
            <param name="name">Имя.</param>
            <param name="displayName">Дружественное имя для отображения в интерфейсе.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingCategory.#ctor(System.String,Mallenom.Localization.IStringSource)">
            <summary>Конструктор.</summary>
            <param name="name">Имя.</param>
            <param name="displayNameSource">Источник строки с отображаемым именем категории.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingCategory.Name">
            <summary>Имя категории.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingCategory.DisplayNameSource">
            <summary>Возвращает источник строки с отображаемым именем свойства.</summary>
            <value>Тсточник строки с отображаемым итменем свойства.</value>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingCategory.DisplayName">
            <summary>Дружественное имя категории.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingCategory.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Setup.Settings.SettingCategory"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Setup.Settings.SettingCategory"/>.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingCategory.SettingName">
            <summary>Имя свойства.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.BooleanSetting">
            <summary>Логический параметр.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.#ctor(Mallenom.Setup.Settings.SettingMetadata{System.Boolean})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные совйства.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Boolean},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.#ctor(System.String,System.String,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.AreEqual(System.Boolean,System.Boolean)">
            <summary>Проверка значений на равенство.</summary>
            <param name="val1">Значение 1.</param>
            <param name="val2">Значение 2.</param>
            <returns>True, если значения val1 и val2 равны, иначе False.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.ValidateValue(System.Boolean)">
            <summary>Проверить значение параметра.</summary>
            <param name="value">Проверяемое значение.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.BooleanSetting.FormatValue(System.Boolean)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.ColorSetting">
            <summary>Цветовой параметр.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.#ctor(Mallenom.Setup.Settings.SettingMetadata{System.Drawing.Color})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные свойства.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Drawing.Color},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.#ctor(System.String,System.String,System.String,System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.#ctor(System.String,System.String,System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.ValidateValue(System.Drawing.Color)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.ColorSetting.FormatValue(System.Drawing.Color)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.DateTimeSetting">
            <summary>Дата/время.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.DateTime})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные совйства.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.DateTime},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(System.String,System.String,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.#ctor(System.String,System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DateTimeSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.DelegateAction">
            <summary>Параметр-действие, выпоняющий в качестве действия некоторый делегат.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.DelegateAction.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.Windows.Forms.MethodInvoker)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="category">Категория параметра.</param>
            <param name="advanced">Параметр является расширенным.</param>
            <param name="actionDelegate">Делегат, выполняющий нжное действие.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DelegateAction.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Windows.Forms.MethodInvoker)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="category">Категория параметра.</param>
            <param name="actionDelegate">Делегат, выполняющий нжное действие.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DelegateAction.#ctor(System.String,System.String,System.Windows.Forms.MethodInvoker)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="actionDelegate">Делегат, выполняющий нжное действие.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DelegateAction.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.DelegateAction.Perform">
            <summary>Выполнить действие.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.EnumSetting`1">
            <summary>Параметр, принимающий одно из значений enum.</summary>
            <typeparam name="T">Тип enum.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(Mallenom.Setup.Settings.RestrictedSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(System.String,System.String,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.EnumSetting`1.#ctor(System.String,System.String,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.FlagSetting`1">
            <summary>Параметр, значением которого является комбинация битовых флагов.</summary>
            <typeparam name="T">Тип значения параметра (предпочтительно enum).</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(Mallenom.Setup.Settings.RestrictedSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(System.String,System.String,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.#ctor(System.String,System.String,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.ValidateValue(`0)">
            <summary>Проверить значение параметра.</summary>
            <param name="value">Проверяемое значение.</param>
            <returns>true.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.FlagSetting`1.FlagList">
            <summary>Список флагов.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.FlagSetting`1.FlagCount">
            <summary>Количество флагов.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FlagSetting`1.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FloatSetting`1">
            <summary>Вещественный параметр.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step"></param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step"></param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step"></param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,`0,`0,`0,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step"></param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(System.String,System.String,System.String,`0,`0,`0,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step"></param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step"></param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.#ctor(System.String,System.String,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step"></param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting`1.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FloatSetting">
            <summary>Вещественный параметр <see cref="T:System.Single"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Single})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Single},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FloatSetting.#ctor(System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.DoubleSetting">
            <summary>Вещественный параметр <see cref="T:System.Double"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Double})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Double},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(System.String,System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.DoubleSetting.#ctor(System.String,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.IntegerSetting`1">
            <summary>Целочисленный параметр.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,`0,`0,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(System.String,System.String,System.String,`0,`0,`0)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.#ctor(System.String,System.String,System.String,`0,`0,`0,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting`1.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.ByteSetting">
            <summary>Целочисленный параметр <see cref="T:System.Byte"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Byte})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Byte},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Byte,System.Byte,System.Byte)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Byte,System.Byte,System.Byte)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(System.String,System.String,System.String,System.Byte,System.Byte,System.Byte)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ByteSetting.#ctor(System.String,System.String,System.String,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.ShortSetting">
            <summary>Целочисленный параметр <see cref="T:System.Int16"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Int16})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Int16},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int16,System.Int16,System.Int16)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Int16,System.Int16,System.Int16)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(System.String,System.String,System.String,System.Int16,System.Int16,System.Int16)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ShortSetting.#ctor(System.String,System.String,System.String,System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.IntegerSetting">
            <summary>Целочисленный параметр <see cref="T:System.Int32"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Int32})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Int32},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IntegerSetting.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.IPAddressSetting">
            <summary><see cref="T:System.Net.IPAddress"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.#ctor(Mallenom.Setup.Settings.SettingMetadata{System.Net.IPAddress})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Net.IPAddress},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Net.IPAddress)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Net.IPAddress)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Net.IPAddress)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Net.IPAddress)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Net.IPAddress)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.#ctor(System.String,System.String,System.String,System.Net.IPAddress)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.#ctor(System.String,System.String,System.Net.IPAddress)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.ValidateValue(System.Net.IPAddress)">
            <summary>Проверить значение параметра.</summary>
            <param name="value">Проверяемое значение.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPAddressSetting.FormatValue(System.Net.IPAddress)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.IPEndPointSetting">
            <summary><see cref="T:System.Net.IPEndPoint"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.#ctor(Mallenom.Setup.Settings.SettingMetadata{System.Net.IPEndPoint})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Net.IPEndPoint},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.Net.IPEndPoint)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.Net.IPEndPoint)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.Net.IPEndPoint)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Net.IPEndPoint)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.#ctor(System.String,System.String,System.Net.IPEndPoint)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.ValidateValue(System.Net.IPEndPoint)">
            <summary>Проверить значение параметра.</summary>
            <param name="value">Проверяемое значение.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.IPEndPointSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.NumericSetting`2">
            <summary>Числовой параметр.</summary>
            <typeparam name="TInteger">Тип целочисленного значения.</typeparam>
            <typeparam name="TFloat">Тип вещественного значения.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`1,`1,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`1,`1,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`1,`1,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,`0,`0,`0,`1,`1)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,`0,`0,`0,`1,`1)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(System.String,System.String,System.String,`0,`0,`0,`1,`1)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,`0,`0,`0,`1,`1,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode"></param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.#ctor(System.String,System.String,System.String,`0,`0,`0,`1,`1,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode"></param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.ComputeRealValue(`0)">
            <summary>Вычислить значение в естественных для параметра единицах измерения.</summary>
            <param name="val">Значение параметра.</param>
            <returns>Вычисленное значение.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.NumericSetting`2.FloatValue">
            <summary>Фактическое значение регулируемого параметра в принятых единицах измерения.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.NumericSetting`2.MinimumValue">
            <summary>Минимальное фактическое значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.NumericSetting`2.MaximumValue">
            <summary>Максимальное фактическое значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.FormatValue(`0)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting`2.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.NumericSetting">
            <summary>Числовой параметр.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Int32})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Int32},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode"></param>
        </member>
        <member name="M:Mallenom.Setup.Settings.NumericSetting.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="minVal">Минимальное значение параметра в требуемых единицах измерения.</param>
            <param name="maxVal">Максимальное значение параметра в требуемых единицах измерения.</param>
            <param name="safeMode"></param>
        </member>
        <member name="T:Mallenom.Setup.Settings.ObjectSetting`1">
            <summary>Параметр, значением которого является объект некоторого класса.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <remarks>Класс <typeparamref name="T"/> может поддерживать <see cref="T:Mallenom.Setup.Settings.ISettingNameProvider"/> для привязки к конфигурационному файлу.</remarks>
        </member>
        <member name="M:Mallenom.Setup.Settings.ObjectSetting`1.#ctor(Mallenom.Setup.Settings.RestrictedSettingMetadata{`0})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ObjectSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{`0},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ObjectSetting`1.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ObjectSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ObjectSetting`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ObjectSetting`1.#ctor(System.String,System.String,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validItems">Список допустимых значений параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.ObjectSetting`1.GetIdentifier(`0)">
            <summary>Получить строковое значение параметра.</summary>
            <param name="value">Значение параметра.</param>
            <returns>Строковое значение параметра.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.PointFSetting">
            <summary>Параметр-координаты.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Drawing.PointF})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Drawing.PointF},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(System.String,System.String,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.#ctor(System.String,System.String,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.ValidateValue(System.Drawing.PointF)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.FixValue(System.Drawing.PointF)">
            <summary>Привести значение к допустимому.</summary>
            <param name="value">Приводимое значение.</param>
            <returns>Допустимое значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.RaiseMinMaxChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.PointFSetting.MinMaxChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.RaiseStepChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.PointFSetting.StepChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.SetMinMaxStep(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Установить новые значение минимума, максимума и шага измения значения.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.SetMinMax(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Установить новые значение минимума и максимума.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointFSetting.SetStep(System.Drawing.PointF)">
            <summary>Установить новое значение шага.</summary>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.PointFSetting.Minimum">
            <summary>Минимальные координаты.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.PointFSetting.Maximum">
            <summary>Максимальные координаты.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.PointFSetting.Step">
            <summary>Шаг изменения координат.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.PointFSetting.MinMaxChanged">
            <summary>Событие - минимум/максимум изменились.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.PointFSetting.StepChanged">
            <summary>Событие - шаг изменен.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.PointSetting">
            <summary>Параметр-координаты.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Drawing.Point})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Drawing.Point},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(System.String,System.String,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.#ctor(System.String,System.String,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.PointSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.ValidateValue(System.Drawing.Point)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.FixValue(System.Drawing.Point)">
            <summary>Привести значение к допустимому.</summary>
            <param name="value">Приводимое значение.</param>
            <returns>Допустимое значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.RaiseMinMaxChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.PointSetting.MinMaxChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.RaiseStepChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.PointSetting.StepChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.SetMinMaxStep(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>Установить новые значение минимума, максимума и шага измения значения.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.SetMinMax(System.Drawing.Point,System.Drawing.Point)">
            <summary>Установить новые значение минимума и максимума.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.PointSetting.SetStep(System.Drawing.Point)">
            <summary>Установить новое значение шага.</summary>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.PointSetting.Minimum">
            <summary>Минимальные координаты.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.PointSetting.Maximum">
            <summary>Максимальные координаты.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.PointSetting.Step">
            <summary>Шаг изменения координат.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.PointSetting.MinMaxChanged">
            <summary>Событие - минимум/максимум изменились.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.PointSetting.StepChanged">
            <summary>Событие - шаг изменен.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.RectangleFSetting">
            <summary>Параметр-прямоугольник.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Drawing.RectangleF})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Drawing.RectangleF},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(System.String,System.String,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.#ctor(System.String,System.String,System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.ValidateValue(System.Drawing.RectangleF)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.FixValue(System.Drawing.RectangleF)">
            <summary>Привести значение к допустимому.</summary>
            <param name="value">Приводимое значение.</param>
            <returns>Допустимое значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.RectangleFSetting.Minimum">
            <summary>Минимальное значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.RectangleFSetting.Maximum">
            <summary>Максимальное значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.RectangleFSetting.Step">
            <summary>Шаг изменения.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.RaiseMinMaxChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.RectangleFSetting.MinMaxChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.RaiseStepChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.RectangleFSetting.StepChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.SetMinMaxStep(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>Установить новые значение минимума, максимума и шага измения значения.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.SetMinMax(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>Установить новые значение минимума и максимума.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleFSetting.SetStep(System.Drawing.RectangleF)">
            <summary>Установить новое значение шага.</summary>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="E:Mallenom.Setup.Settings.RectangleFSetting.MinMaxChanged">
            <summary>Событие - минимум/максимум изменились.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.RectangleFSetting.StepChanged">
            <summary>Событие - шаг изменен.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.RectangleSetting">
            <summary>Параметр-прямоугольник.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Drawing.Rectangle})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Drawing.Rectangle},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(System.String,System.String,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.#ctor(System.String,System.String,System.String,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.RectangleSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.ValidateValue(System.Drawing.Rectangle)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.FixValue(System.Drawing.Rectangle)">
            <summary>Привести значение к допустимому.</summary>
            <param name="value">Приводимое значение.</param>
            <returns>Допустимое значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.RaiseMinMaxChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.RectangleSetting.MinMaxChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.RaiseStepChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.RectangleSetting.StepChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.SetMinMaxStep(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Установить новые значение минимума, максимума и шага измения значения.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.SetMinMax(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Установить новые значение минимума и максимума.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.RectangleSetting.SetStep(System.Drawing.Rectangle)">
            <summary>Установить новое значение шага.</summary>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.RectangleSetting.Minimum">
            <summary>Минимальное значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.RectangleSetting.Maximum">
            <summary>Максимальное значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.RectangleSetting.Step">
            <summary>Шаг изменения.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.RectangleSetting.MinMaxChanged">
            <summary>Событие - минимум/максимум изменились.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.RectangleSetting.StepChanged">
            <summary>Событие - шаг изменен.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.SimpleBaseParameter`1">
            <summary>Класс для вставки пользовательского контрола <typeparamref name="TControl"/> в <see cref="T:Mallenom.Setup.SettingsSetupControl"/>.</summary>
            <typeparam name="TControl">Тип пользовательского контрола.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.SimpleBaseParameter`1.#ctor(Mallenom.Setup.Settings.ParameterMetadata)">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SimpleBaseParameter`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="name">Имя парметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="category">Категория параметра.</param>
            <param name="advanced">Параметр является расширенным.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SimpleBaseParameter`1.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory)">
            <summary>Конструктор.</summary>
            <param name="name">Имя парметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
            <param name="category">Категория параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SimpleBaseParameter`1.#ctor(System.String,System.String)">
            <summary>Конструктор.</summary>
            <param name="name">Имя парметра.</param>
            <param name="displayName">Имя параметра для отображения пользователю.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SimpleBaseParameter`1.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="P:Mallenom.Setup.Settings.SimpleBaseParameter`1.SettingControlOptions">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.SizeFSetting">
            <summary>Параметр-размер.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Drawing.SizeF})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Drawing.SizeF},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(System.String,System.String,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.#ctor(System.String,System.String,System.String,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeFSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.ValidateValue(System.Drawing.SizeF)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.FixValue(System.Drawing.SizeF)">
            <summary>Привести значение к допустимому.</summary>
            <param name="value">Приводимое значение.</param>
            <returns>Допустимое значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.RaiseMinMaxChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.SizeFSetting.MinMaxChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.RaiseStepChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.SizeFSetting.StepChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.SetMinMaxStep(System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>Установить новые значение минимума, максимума и шага измения значения.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.SetMinMax(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>Установить новые значение минимума и максимума.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeFSetting.SetStep(System.Drawing.SizeF)">
            <summary>Установить новое значение шага.</summary>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.SizeFSetting.Minimum">
            <summary>Минимальный размер.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SizeFSetting.Maximum">
            <summary>Максимальный размер.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SizeFSetting.Step">
            <summary>Шаг изменения размера.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.SizeFSetting.MinMaxChanged">
            <summary>Событие - минимум/максимум изменились.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.SizeFSetting.StepChanged">
            <summary>Событие - шаг изменен.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.SizeSetting">
            <summary>Параметр-размер.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.Drawing.Size})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.Drawing.Size},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(System.String,System.String,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.#ctor(System.String,System.String,System.String,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.SizeSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.ValidateValue(System.Drawing.Size)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.FixValue(System.Drawing.Size)">
            <summary>Привести значение к допустимому.</summary>
            <param name="value">Приводимое значение.</param>
            <returns>Допустимое значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.SaveToConfigCore(Mallenom.Storage.IObjectStorageWriter,Mallenom.Setup.Settings.SerializationFlags)">
            <summary>Сохранить значение параметра в конфигурацию.</summary>
            <param name="writer">Объект для записи настроек.</param>
            <param name="flags">Опции сериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.LoadFromConfigCore(Mallenom.Storage.IObjectStorageReader,Mallenom.Setup.Settings.DeserializationFlags)">
            <summary>Загрузить значение параметра из конфигурации.</summary>
            <param name="reader">Объект для чтения настроек.</param>
            <param name="flags">Опции десериализации.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.RaiseMinMaxChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.SizeSetting.MinMaxChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.RaiseStepChanged">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Setup.Settings.SizeSetting.StepChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.SetMinMaxStep(System.Drawing.Size,System.Drawing.Size,System.Drawing.Size)">
            <summary>Установить новые значение минимума, максимума и шага измения значения.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.SetMinMax(System.Drawing.Size,System.Drawing.Size)">
            <summary>Установить новые значение минимума и максимума.</summary>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SizeSetting.SetStep(System.Drawing.Size)">
            <summary>Установить новое значение шага.</summary>
            <param name="step">Шаг изменения значения.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.SizeSetting.Minimum">
            <summary>Минимальный размер.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SizeSetting.Maximum">
            <summary>Максимальный размер.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SizeSetting.Step">
            <summary>Шаг изменения размера.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.SizeSetting.MinMaxChanged">
            <summary>Событие - минимум/максимум изменились.</summary>
        </member>
        <member name="E:Mallenom.Setup.Settings.SizeSetting.StepChanged">
            <summary>Событие - шаг изменен.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.StringSetting">
            <summary>Строковый параметр.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.StringSetting._validatePredicate">
            <summary>Предикат для проверки значений.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.DefaultPredicate(System.String)">
            <summary>Предикат по умолчанию.</summary>
            <param name="value">Значение.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(Mallenom.Setup.Settings.StringSettingMetadata)">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.String},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Predicate{System.String})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validatePredicate">Предикат для проверки строк на применимость к данному параметру.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Predicate{System.String})">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validatePredicate">Предикат для проверки строк на применимость к данному параметру.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.Predicate{System.String})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validatePredicate">Предикат для проверки строк на применимость к данному параметру.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.Predicate{System.String})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validatePredicate">Предикат для проверки строк на применимость к данному параметру.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(System.String,System.String,System.String,System.Predicate{System.String})">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="validatePredicate">Предикат для проверки строк на применимость к данному параметру.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.#ctor(System.String,System.String,System.String)">
            <summary>Конструктор.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.ValidateValue(System.String)">
            <summary>Проверить значение на возможность применения к данному параметру.</summary>
            <param name="value">Значение.</param>
            <returns>Возможность установки значения параметра в <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.StringSetting.AreEqual(System.String,System.String)">
            <summary>Проверка значений на равенство.</summary>
            <param name="val1">Значение 1.</param>
            <param name="val2">Значение 2.</param>
            <returns>true, если <paramref name="val1"/> == <paramref name="val2"/>, иначе false.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.TimeSpanSetting">
            <summary>Параметр, представляющий отрезок времени.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(Mallenom.Setup.Settings.IntervalSettingMetadata{System.TimeSpan})">
            <summary>Конструктор.</summary>
            <param name="metadata">Метаданные.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage{System.TimeSpan},System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(Mallenom.Setup.Settings.ISettingValueStorage,System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="storage">Хранилище для значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="step">Шаг.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.Boolean,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="advanced">Настройка для опытных пользователей.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(System.String,System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(System.String,System.String,Mallenom.Setup.Settings.SettingCategory,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="category">Категория.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.#ctor(System.String,System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/>.</summary>
            <param name="name">Имя параметра.</param>
            <param name="displayName">Имя для отображения в интерфейсе.</param>
            <param name="formatString">Формат строки при отображении значения.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум.</param>
            <param name="def">Значение по умолчанию.</param>
            <param name="safeMode">В случае выхода значения за границы интервала, приводить его к граничным значениям автоматически.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.TimeSpanSetting.CreateDefaultSettingControlOptions">
            <summary>Создать опции контрола настройки по умолчанию.</summary>
            <returns>Опции контрола настройки.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.SettingControlOptions">
            <summary>Опции создаваемого параметром контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingControlOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="settingControlProvider">Провайдер контрола настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.SettingControlProvider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.BufferMode">
            <summary>Режим буферизации.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.WatchSettingChanges">
            <summary>Отображать изменения параметра, произведенные извне.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.ToolTip">
            <summary>Всплывающая подсказка.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.Image">
            <summary>Изображение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.NullValueString">
            <summary>Строка, замещающая значение, если оно null.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.NullValueStringSource">
            <summary>Возвращает и устанавливает источник строки, замещающей нулевое значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.SettingToControlTransform">
            <summary>
            Функция преобразования значения из типа параметра в отображаемое в контроле значение.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.SettingControlOptions.ControlToSettingTransform">
            <summary>
            Функция преобразования значения, отображаемого в контроле в значение, сохраняемое в параметре.
            </summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.SettingControlOptionsEx`1">
            <summary>Опции для определенного вида контрола <typeparamref name="TControl"/>.</summary>
            <typeparam name="TControl">Тип контрола.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingControlOptionsEx`1.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контролов настройки.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.SettingControlOptionsEx`1.ApplyTo(`0)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Settings.ControlBufferMode">
            <summary>Режим буферизации для контрола.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.ControlBufferMode.Inherit">
            <summary>Использовать настройку <see cref="M:Mallenom.Setup.SettingSetupControl.BufferedMode"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.ControlBufferMode.ForceBuffered">
            <summary>Форсировать буферизацию.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.ControlBufferMode.ForceImmediate">
            <summary>Форсировать немедленное обновление значения свойства при изменении контрола.</summary>
        </member>
        <member name="T:Mallenom.Setup.Settings.FilterAllowAll">
            <summary>Фильтр - разрешить все.</summary>
        </member>
        <member name="F:Mallenom.Setup.Settings.FilterAllowAll.Instance">
            <summary>Экземпляр фильтра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterAllowAll.Filter(Mallenom.Setup.Settings.INamedParameter)">
            <summary>Фильтрация настроек.</summary>
            <param name="setting">Настройка.</param>
            <returns>true.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FilterByLists`1">
            <summary>Фильтрация по спискам допустимых/запрещенных значений характеристик параметра.</summary>
            <typeparam name="T">Тип характеристики параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByLists`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="allowed">Разрешенные характеристики.</param>
            <param name="removed">Запрещенные характеристики.</param>
            <param name="allowUnmatched">Пропуск параметров, не входящих в списки разрешенных/запрещенных.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.FilterByLists`1.Allowed">
            <summary>Разрешенные имена параметров.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.FilterByLists`1.Removed">
            <summary>Запрещенные имена параметров.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.FilterByLists`1.AllowUnmatched">
            <summary>Пропуск параметров, не входящих в списки разрешенных/запрещенных.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByLists`1.Fits(Mallenom.Setup.Settings.INamedParameter,`0)">
            <summary>Определение принадлежности параметра классу <paramref name="value"/>.</summary>
            <param name="setting">Параметр.</param>
            <param name="value">Класс параметров.</param>
            <returns>true/false.</returns>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByLists`1.Filter(Mallenom.Setup.Settings.INamedParameter)">
            <summary>Фильтрация настроек.</summary>
            <param name="setting">Настройка.</param>
            <returns>true = фильтр пройден.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FilterByName">
            <summary>Фильтр - по именам.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByName.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="allowed">Разрешенные имена.</param>
            <param name="removed">Запрещенные имена.</param>
            <param name="allowUnmatched">Пропуск параметров, не входящих в списки разрешенных/запрещенных.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByName.Fits(Mallenom.Setup.Settings.INamedParameter,System.String)">
            <summary>Проверка имени параметра.</summary>
            <param name="setting">Параметр.</param>
            <param name="value">Имя.</param>
            <returns>Имя парметра = <paramref name="value"/>.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FilterByCategory">
            <summary>Фильтр - по категориям.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByCategory.#ctor(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.SettingCategory},System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.SettingCategory},System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="allowed">Разрешенные категории.</param>
            <param name="removed">Запрещенные категории.</param>
            <param name="allowUnmatched">Пропуск параметров, не входящих в списки разрешенных/запрещенных.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByCategory.Fits(Mallenom.Setup.Settings.INamedParameter,Mallenom.Setup.Settings.SettingCategory)">
            <summary>Проверка категории параметра.</summary>
            <param name="setting">Параметр.</param>
            <param name="value">Имя.</param>
            <returns>Категория парметра = <paramref name="value"/>.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FilterByAdvanced">
            <summary>Фильтр - по Advanced.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByAdvanced.#ctor(System.Boolean,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="allowNonAdvanced">Разрешить не-Advanced параметры.</param>
            <param name="allowAdvanced">Разрешить Advanced параметры.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByAdvanced.#ctor(System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="allowAdvanced">Разрешить Advanced параметры.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByAdvanced.#ctor">
            <summary>Конструктор (разрешить не-Advanced, запретить Advanced).</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.FilterByAdvanced.AllowAdvanced">
            <summary>Разрешить Advanced параметры.</summary>
        </member>
        <member name="P:Mallenom.Setup.Settings.FilterByAdvanced.AllowNonAdvanced">
            <summary>Разрешить не-Advanced параметры.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByAdvanced.Filter(Mallenom.Setup.Settings.INamedParameter)">
            <summary>Проверка категории параметра.</summary>
            <param name="setting">Параметр.</param>
            <returns>true, если фильтр пройден.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FilterByPredicate">
            <summary>Фильтрация с помощью функции-предиката.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByPredicate.#ctor(System.Predicate{Mallenom.Setup.Settings.INamedParameter})">
            <summary>Конструктор.</summary>
            <param name="predicate">Предикат.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterByPredicate.Filter(Mallenom.Setup.Settings.INamedParameter)">
            <summary>Фильтрация настроек.</summary>
            <param name="setting">Настройка.</param>
            <returns>true = фильтр пройден.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.FilterChain">
            <summary>Фильтр - цепочка фильтров.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterChain.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterChain.#ctor(Mallenom.Setup.Settings.ISettingFilter[])">
            <summary>Конструктор.</summary>
            <param name="filters">Список фильтров цепочки.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterChain.AddFilter(Mallenom.Setup.Settings.ISettingFilter)">
            <summary>Добавить фильтр в цепочку.</summary>
            <param name="filter">Добавляемый фильтр.</param>
        </member>
        <member name="M:Mallenom.Setup.Settings.FilterChain.Filter(Mallenom.Setup.Settings.INamedParameter)">
            <summary>Фильтрация настроек.</summary>
            <param name="setting">Настройка.</param>
            <returns>true = фильтр пройден.</returns>
        </member>
        <member name="T:Mallenom.Setup.Settings.ValueDisplayNameAttribute">
            <summary>Атрибут для указания отображаемого имени объекта.</summary>
        </member>
        <member name="M:Mallenom.Setup.Settings.ValueDisplayNameAttribute.#ctor(System.String)">
            <summary>Конструктор.</summary>
            <param name="displayName">Отображаемое имя.</param>
        </member>
        <member name="P:Mallenom.Setup.Settings.ValueDisplayNameAttribute.DisplayName">
            <summary>Отображаемое имя.</summary>
        </member>
        <member name="T:Mallenom.Setup.SetupControlProviderBase`1">
            <summary>Базовый класс провайдера контрола настройки объекта.</summary>
            <typeparam name="T">Тип настраиваемого объекта.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.SetupControlProviderBase`1.CreateControl(`0)">
            <summary>Создать контрол настройки.</summary>
            <param name="obj">Настраиваемый объект.</param>
            <returns>Контрол настройки объекта.</returns>
        </member>
        <member name="M:Mallenom.Setup.SetupControlProviderBase`1.CreateControl(System.Object)">
            <summary>Создать контрол настройки.</summary>
            <param name="obj">Настраиваемый объект.</param>
            <returns>Контрол настройки объекта.</returns>
        </member>
        <member name="T:Mallenom.Setup.CommonSetupControl">
            <summary>Базовый класс контрола настройки.</summary>
            <remarks>
            <para>
            Каждый контрол, лежащий на форме, при изменении данных
            должен вызывать метод <see cref="M:Mallenom.Setup.CommonSetupControl.Modify"/>.
            </para>
            <para>
            Для предотвращения вызова <see cref="M:Mallenom.Setup.CommonSetupControl.Modify"/> в конструкторе,
            необходимо в начале конструктора вызвать метод <see cref="M:Mallenom.Setup.CommonSetupControl.SuspendModify"/>,
            в конце <see cref="M:Mallenom.Setup.CommonSetupControl.ResetModify"/>.
            </para>
            </remarks>
        </member>
        <member name="E:Mallenom.Setup.CommonSetupControl.Modified">
            <summary>Генерируется при вызове <see cref="M:Mallenom.Setup.CommonSetupControl.Modify"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.CommonSetupControl.Text">
            <summary>Заголовок страницы настройки. Необходимя для отобржения в дизайнере VS.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.Modify">
            <summary>Указать, что призошли изменения в контролах.</summary>
        </member>
        <member name="P:Mallenom.Setup.CommonSetupControl.IsModify">
            <summary>True - было изменено значение параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.BeforeSetup">
            <summary>Вызывается перед настройкой модулей.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.ControlShow">
            <summary>Вызывается при выборе вкладки с контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.ControlHide">
            <summary>Вызывается при скрытии (выборе другой) вкладки с контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.AfterSetup">
            <summary>Вызывается после настройкой модулей. Не важно нажата 'ОК' или 'Отмена'.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.UpdateControl">
            <summary>Обновить контрол параметрами из модуля.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.Apply">
            <summary>Применить параметры введенные пользователем. Нажатие 'ОК' или 'Применить'.</summary>
        </member>
        <member name="P:Mallenom.Setup.CommonSetupControl.SupportsSetDefaults">
            <summary>Контрол поддерживает установку параметров на значения по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.SetDefaults">
            <summary>Установить настройки по умолчанию</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.InternalBeforeSetup">
            <summary>Вызывается перед настройкой модулей.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.InternalUpdateControl">
            <summary>Обновить контрол параметрами из модуля.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.InternalControlShow">
            <summary>Вызывается при выборе вкладки с контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.InternalControlHide">
            <summary>Вызывается при скрытии (выборе другой) вкладки с контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.InternalApply">
            <summary>Применить параметры введенные пользователем. Нажатие 'ОК' или 'Применить'.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.InternalAfterSetup">
            <summary>Вызывается после настройкой модулей. Не важно нажата 'ОК' или 'Отмена'.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.InternalSetDefaults">
            <summary>Установить настройки по умолчанию</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.OnModify">
            <summary>Вызывает событие <see cref="E:Mallenom.Setup.CommonSetupControl.Modified"/>.</summary>
            <remarks>При переопределении метода необходимо вызвать
            метод базового класса для вызова события <see cref="E:Mallenom.Setup.CommonSetupControl.Modified"/>.</remarks>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.SuspendModify">
            <summary>Приостанавливает генерацию <see cref="E:Mallenom.Setup.CommonSetupControl.Modified"/> и установку флага <see cref="P:Mallenom.Setup.CommonSetupControl.IsModify"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.CommonSetupControl.ResumeModify">
            <summary>Возобновляет генерацию <see cref="E:Mallenom.Setup.CommonSetupControl.Modified"/> и установку флага <see cref="P:Mallenom.Setup.CommonSetupControl.IsModify"/>.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.AdjustableSettingControl`3">
            <summary>
            <see cref="T:Mallenom.Setup.Controls.BaseSettingControl"/>, который управляется пользователем через <typeparamref name="TModificatorControl"/>.
            </summary>
            <typeparam name="TSetting">Тип параметра.</typeparam>
            <typeparam name="TValue">Тип значения параметра.</typeparam>
            <typeparam name="TModificatorControl">Тип контрола-модификатора параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Controls.AdjustableSettingControl`3.#ctor(System.Drawing.Rectangle)">
            <summary>Конструктор.</summary>
            <param name="customControlBounds">Положение контрола настройки параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.AdjustableSettingControl`3.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.AdjustableSettingControl`3.ApplyExtendedControlSettings">
            <summary>Применить дополнительные параметры к управляющему контролу.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.AdjustableSettingControl`3.ModificatorControl">
            <summary>Контрол, управляющий значением параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.BaseSettingControl">
            <summary>Базовый элемент управления настройки параметра.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.BaseSettingControl.Log">
            <summary>Лог.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.BaseSettingControl.GenericSettingControlProvider`1">
            <summary>Провайдер контрола настройки параметра.</summary>
            <typeparam name="T">Тип контрола.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.#ctor(System.Int32)">
            <summary>Конструктор.</summary>
            <param name="customHeight">Высота контрола.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.BaseSettingControl.NamedParameter">
            <summary>INamedParameter.</summary>
        </member>
        <member name="E:Mallenom.Setup.Controls.BaseSettingControl.ValueChanged">
            <summary>Событие - значение изменено.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.RaiseValueChanged">
            <summary>Сгенерировать событие - значение изменено.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.DefaultOnChanged(System.Object,System.EventArgs)">
            <summary>Процедура по умолчнию для обработки изменения значения параметра пользователем.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.BeginUpdate">
            <summary>Запретить генерацию события <see cref="E:Mallenom.Setup.Controls.BaseSettingControl.ValueChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.EndUpdate">
            <summary>Разрешить генерацию события <see cref="E:Mallenom.Setup.Controls.BaseSettingControl.ValueChanged"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.DisableControls">
            <summary>Отключить элементы настройки параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.EnableControls">
            <summary>Включить элементы настройки параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.BaseSettingControl.PreferredLabelAreaWidth">
            <summary>Предпочтительная ширина области, отображающей метку.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.SetLabelAreaWidth(System.Int32)">
            <summary>Установить ширину области, отображающей метку.</summary>
            <param name="width">Ширина области, отображающей метку.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.BaseSettingControl.BufferedMode">
            <summary>Режим буферизации.</summary>
            <remarks>Если false, изменения применяются немедленно, иначе только после вызова <see cref="M:Mallenom.Setup.Controls.BaseSettingControl.ApplyValue"/>.</remarks>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.SetDefaultValue">
            <summary>Установить значение по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.RefreshValue">
            <summary>Отобразить текущее значение свойства.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.ApplyValue">
            <summary>Установить значение параметра, заданное пользователем.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.LoadSavedValue">
            <summary>Установить значение, которое было сохранено (или изначальное, если <see cref="M:Mallenom.Setup.Controls.BaseSettingControl.SaveCurrentValue"/> не вызывалось).</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.BaseSettingControl.SaveCurrentValue">
            <summary>Сохранить текущее значение, чтобы иметь возможность восстановить его с помощью <see cref="M:Mallenom.Setup.Controls.BaseSettingControl.LoadSavedValue"/>.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.DateTimePickerOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.DateTimePicker"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.DateTimePickerOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контролоа настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerOptions.ShowUpDown">
            <summary>Отображать контрол UpDown для редактирования.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerOptions.CustomFormat">
            <summary>Пользовательский формат даты/времени.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerOptions.Format">
            <summary>Формат даты/времени.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerOptions.DropDownAlign">
            <summary>Сторона, с которой раскрывается календарь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerOptions.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.DateTimePickerOptions.ApplyTo(System.Windows.Forms.DateTimePicker)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.ButtonOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.Button"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ButtonOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.ButtonOptions.ApplyTo(System.Windows.Forms.Button)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.ColorButtonOptions">
            <summary>Опции для контрола <see cref="T:Mallenom.Controls.ColorButton"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ColorButtonOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.ColorButtonOptions.ApplyTo(Mallenom.Controls.ColorButton)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.ComboBoxOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.ComboBox"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ComboBoxOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxOptions.MaxDropDownItems">
            <summary>Максимальное количество элементов, отображаемое в выпадающем списке.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxOptions.DrawMode">
            <summary>Способ отрисовки.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxOptions.DrawItemEventHandler">
            <summary>Обработчик события отрисовки элемента.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxOptions.MeasureItemEventHandler">
            <summary>Обработчик события измерения элемента.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxOptions.ItemHeight">
            <summary>Высота элемента в <see cref="T:System.Windows.Forms.ComboBox"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxOptions.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ComboBoxOptions.ApplyTo(System.Windows.Forms.ComboBox)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.TextBoxOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.TextBox"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TextBoxOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.TextBoxOptions.ApplyTo(System.Windows.Forms.TextBox)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.FolderTextBoxOptions">
            <summary>Опции для контрола <see cref="T:Mallenom.Setup.Controls.FolderTextBoxSettingControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FolderTextBoxOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.FolderTextBoxOptions.DialogDescription">
            <summary>Описание в диалоге выбора директории.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FolderTextBoxOptions.ApplyTo(Mallenom.Controls.FolderTextBox)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.FileTextBoxOptions">
            <summary>Опции для контрола <see cref="T:Mallenom.Setup.Controls.FileTextBoxSettingControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FileTextBoxOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.FileTextBoxOptions.Filter">
            <summary>Фильтр для диалога выбора файла.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.FileTextBoxOptions.DialogDescription">
            <summary>Описание в диалоге выбора файла.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.FileTextBoxOptions.AddExtension">
            <summary>Автоматически добавлять расширение к имени файла.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.FileTextBoxOptions.DefaultExtension">
            <summary>Расширение по умочанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FileTextBoxOptions.ApplyTo(Mallenom.Controls.FileTextBox)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.CheckBoxOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.CheckBox"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.CheckBoxOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.CheckBoxOptions.Appearance">
            <summary>Внешний вид.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.CheckBoxOptions.ApplyTo(System.Windows.Forms.CheckBox)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.RadioButtonOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.RadioButton"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RadioButtonOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.RadioButtonOptions.Appearance">
            <summary>Внешний вид.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RadioButtonOptions.ApplyTo(System.Windows.Forms.RadioButton)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.LabelOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.Label"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelOptions.ApplyTo(System.Windows.Forms.Label)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.NumericUpDownOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.NumericUpDown"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.NumericUpDownOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.NumericUpDownOptions.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places to display in the spin box (also
            known as an up-down control).
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.NumericUpDownOptions.ThousandsSeparator">
            <summary>
            Gets or sets a value indicating whether a thousands separator is displayed
            in the spin box (also known as an up-down control) when appropriate.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.NumericUpDownOptions.Hexadecimal">
            <summary>
            Gets or sets a value indicating whether the spin box (also known as an up-down
            control) should display the value it contains in hexadecimal format.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.NumericUpDownOptions.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.NumericUpDownOptions.ApplyTo(System.Windows.Forms.NumericUpDown)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.TrackBarOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.TrackBar"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarOptions.ApplyTo(System.Windows.Forms.TrackBar)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarOptions.ValueAreaWidth">
            <summary>Ширина зоны, отображающей значение.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.IPAddressControlOptions">
            <summary>Опции для контрола <see cref="T:Mallenom.Controls.IPAddressControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPAddressControlOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPAddressControlOptions.ApplyTo(Mallenom.Controls.IPAddressControl)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.GenericSettingControl`2">
            <summary>Абстрактный класс контрола для настройки параметра.</summary>
            <typeparam name="TSetting">Тип настраиваемого параметра.</typeparam>
            <typeparam name="TValue">Тип значения параметра.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Controls.GenericSettingControl`2._setting">
            <summary>Настраиваемый параметр.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.GenericSettingControl`2._savedValue">
            <summary>Значение параметра при начальной настройке.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.#ctor(System.Int32)">
            <summary>Конструктор.</summary>
            <param name="customHeight">Высота контрола.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.GenericSettingControl`2.NamedParameter">
            <summary>INamedParameter.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.GenericSettingControl`2.Setting">
            <summary>Настраиваемый параметр.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.GenericSettingControl`2.SettingToControlTransform">
            <summary>
            Функция преобразования значения из <typeparamref name="TSetting"/> в отображаемое в контроле значение.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.GenericSettingControl`2.ControlToSettingTransform">
            <summary>
            Функция преобразования значения, отображаемого в контроле в значение, сохраняемое в <typeparamref name="TSetting"/>.
            </summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.SettingToControl(`1)">
            <summary>Преобразовать значение для отображения в контороле.</summary>
            <param name="value">Преобразовываемое значение.</param>
            <returns>Преобразованное значение.</returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.ControlToSetting(`1)">
            <summary>Преобразовать значение для сохранения в <typeparamref name="TSetting"/>.</summary>
            <param name="value">Преобразовываемое значение.</param>
            <returns>Преобразованное значение.</returns>
        </member>
        <member name="P:Mallenom.Setup.Controls.GenericSettingControl`2.Value">
            <summary>Значение, установленное пользователем.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.GenericSettingControl`2.SavedValue">
            <summary>Сохраненное значение параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.LoadSavedValue">
            <summary>Загрузить сохраненное значение параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.SaveCurrentValue">
            <summary>Сохранить текущее значение параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.ApplyValue">
            <summary>Применить значение, установленное пользователем.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.SetDefaultValue">
            <summary>Установить значение по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.RefreshValue">
            <summary>Отобразить текущее значение свойства.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.AttachToSetting(`0)">
            <summary>Вызывается при подключении параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.DetachFromSetting(`0)">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.GenericSettingControl`2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Mallenom.Setup.Controls.GenericSettingControl"/>
            and its child controls and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.LabeledSettingControl`3">
            <summary>
            <see cref="T:Mallenom.Setup.Controls.BaseSettingControl"/>, который отображает имя параметра в <see cref="P:Mallenom.Setup.Controls.LabeledSettingControl`3.Label"/>
            и управляется пользователем через <typeparamref name="TModificatorControl"/>.
            </summary>
            <typeparam name="TSetting">Тип параметра.</typeparam>
            <typeparam name="TValue">Тип значения параметра.</typeparam>
            <typeparam name="TModificatorControl">Тип контрола-модификатора параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabeledSettingControl`3.#ctor(System.Drawing.Rectangle,System.String)">
            <summary>Конструктор.</summary>
            <param name="modificatorControlBounds">Положение контрола настройки параметра.</param>
            <param name="formatString">Строка форматирования для отображения имени параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabeledSettingControl`3.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.LabeledSettingControl`3.PreferredLabelAreaWidth">
            <summary>Предпочтительная ширина области, отображающей метку.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabeledSettingControl`3.SetLabelAreaWidth(System.Int32)">
            <summary>Установить ширину области, отображающей метку.</summary>
            <param name="width">Ширина области, отображающей метку.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.LabeledSettingControl`3.Label">
            <summary>Метка, отображающая имя параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabeledSettingControl`3.AttachToSetting(`0)">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.MultiControl`1">
            <summary>Контейнер для <typeparamref name="TControl"/>.</summary>
            <typeparam name="TControl">Тип контрола для помещения в контейнер.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiControl`1.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.MultiControl`1"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiControl`1.Setup(Mallenom.Setup.Controls.SettingValueItem[],System.Int32)">
            <summary>Установить список контролов.</summary>
            <param name="fields">Список значений.</param>
            <param name="maxCols">Максимальное количество столбцов.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.MultiControl`1.Count">
            <summary>Количество контролов.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiControl`1.GetControl(System.Int32)">
            <summary>Получить контрол с индексом <paramref name="index"/>.</summary>
            <param name="index">Индекс контрола.</param>
            <returns>Контрол с индексом <paramref name="index"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiControl`1.OnResize(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiControl`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Mallenom.Setup.Controls.MultiUpDownControl">
            <summary>Контрол, отображающий несколько <see cref="T:System.Windows.Forms.NumericUpDown"/> с текстовыми метками в несколько столбцов.</summary>
        </member>
        <member name="E:Mallenom.Setup.Controls.MultiUpDownControl.ValueChanged">
            <summary>Событие - значение в одном из <see cref="T:System.Windows.Forms.NumericUpDown"/> изменено.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiUpDownControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.MultiUpDownControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiUpDownControl.Setup(System.String[],System.Int32,System.Int32)">
            <summary>Установить текстовые метки.</summary>
            <param name="fields">Массив с текстом дляметок.</param>
            <param name="maxCols">Максимальное количество столбцов.</param>
            <param name="upDownWidth">Ширина <see cref="T:System.Windows.Forms.NumericUpDown"/>.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiUpDownControl.OnResize(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiUpDownControl.SetMinMaxStep(System.Int32,System.Decimal,System.Decimal,System.Decimal)">
            <summary>Установить минимум, максимум и шаг для <see cref="T:System.Windows.Forms.NumericUpDown"/> с индексом <paramref name="index"/>.</summary>
            <param name="index">Индекс <see cref="T:System.Windows.Forms.NumericUpDown"/>.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум</param>
            <param name="step">Шаг.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiUpDownControl.SetStep(System.Int32,System.Decimal)">
            <summary>Установить шаг для <see cref="T:System.Windows.Forms.NumericUpDown"/> с индексом <paramref name="index"/>.</summary>
            <param name="index">Индекс <see cref="T:System.Windows.Forms.NumericUpDown"/>.</param>
            <param name="step">Шаг.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiUpDownControl.SetMinMax(System.Int32,System.Decimal,System.Decimal)">
            <summary>Установить минимум и максимум для <see cref="T:System.Windows.Forms.NumericUpDown"/> с индексом <paramref name="index"/>.</summary>
            <param name="index">Индекс <see cref="T:System.Windows.Forms.NumericUpDown"/>.</param>
            <param name="min">Минимум.</param>
            <param name="max">Максимум</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiUpDownControl.GetLabel(System.Int32)">
            <summary>Получить текстовую метку с индексом <paramref name="index"/>.</summary>
            <param name="index">Индекс метки.</param>
            <returns>Метку с индексом <paramref name="index"/>.</returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.MultiUpDownControl.GetModificator(System.Int32)">
            <summary>Получить <see cref="T:System.Windows.Forms.NumericUpDown"/> с индексом <paramref name="index"/>.</summary>
            <param name="index">Индекс <see cref="T:System.Windows.Forms.NumericUpDown"/>.</param>
            <returns><see cref="T:System.Windows.Forms.NumericUpDown"/> с индексом <paramref name="index"/>.</returns>
        </member>
        <member name="P:Mallenom.Setup.Controls.MultiUpDownControl.Item(System.Int32)">
            <summary>Значение <see cref="T:System.Windows.Forms.NumericUpDown"/> с индексом <paramref name="index"/>.</summary>
            <param name="index">Индекс <see cref="T:System.Windows.Forms.NumericUpDown"/>, значение которого возвращается или устанавливается.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.SettingControlAttribute">
            <summary>Атрибут для указания типа управляющего контрола для параметра.</summary>
            <remarks>Модифицирует параметр, генерируемый <see cref="T:Mallenom.Setup.Settings.SettingAttribute"/>.</remarks>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SettingControlAttribute"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.SettingControlAttribute.BufferMode">
            <summary>Режим буферизации.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.SettingControlAttribute.NullValueString">
            <summary>Строка, замещающая значение, если оно null.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.SettingControlAttribute.WatchSettingChanges">
            <summary>Отображать изменения параметра, произведенные извне.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.SettingControlAttribute.ToolTip">
            <summary>Всплывающая подсказка.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingControlAttribute.ApplyBasicOptions(Mallenom.Setup.Settings.SettingControlOptions)">
            <summary>Применить общие параметры конторла.</summary>
            <param name="opt">Опции контрола настройки.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.SettingControlSimpleAttribute">
            <summary>Атрибут для указания типа управляющего контрола для параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingControlSimpleAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SettingControlSimpleAttribute"/> (to keep compiler happy).</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingControlSimpleAttribute.#ctor(Mallenom.Setup.Settings.SettingControlOptions)">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SettingControlSimpleAttribute"/>.</summary>
            <param name="settingControlOptions">Опции контрола настройки параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingControlSimpleAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.UserSettingControl`1">
            <summary>Произвольный пользовательский контрол.</summary>
            <typeparam name="TControl">Тип контрола.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Controls.UserSettingControl`1.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.UserSettingControl`1.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Settings.SettingControlOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Settings.SettingControlOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.UserSettingControl`1.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.UserSettingControl`1.Control">
            <summary>Пользовательский контрол.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.UserSettingControl`1.OnResize(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="P:Mallenom.Setup.Controls.UserSettingControl`1.NamedParameter">
            <summary>INamedParameter.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.TextBoxSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.TextBoxSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TextBoxSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.TextBoxSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TextBoxSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.TextBoxSettingControl">
            <summary>Контрол для строковых параметров на базе <see cref="T:System.Windows.Forms.TextBox"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.TextBoxSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TextBoxSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.TextBoxOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.TextBoxOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.TextBoxSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TextBoxSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TextBoxSettingControl.AttachToSetting(Mallenom.Setup.Settings.ISetting{System.String})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.TextBoxSettingControl.DetachFromSetting(Mallenom.Setup.Settings.ISetting{System.String})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.FileTextBoxSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.FileTextBoxSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FileTextBoxSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.FileTextBoxSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FileTextBoxSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.FileTextBoxSettingControl">
            <summary>Контрол для строковых параметров на базе <see cref="T:Mallenom.Controls.FileTextBox"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.FileTextBoxSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FileTextBoxSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.FileTextBoxOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.FileTextBoxOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.FileTextBoxSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.FileTextBoxSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FileTextBoxSettingControl.AttachToSetting(Mallenom.Setup.Settings.ISetting{System.String})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.FileTextBoxSettingControl.DetachFromSetting(Mallenom.Setup.Settings.ISetting{System.String})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.FolderTextBoxSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.FolderTextBoxSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FolderTextBoxSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.FolderTextBoxSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FolderTextBoxSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.FolderTextBoxSettingControl">
            <summary>Контрол для строковых параметров на базе <see cref="T:Mallenom.Controls.FolderTextBox"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.FolderTextBoxSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FolderTextBoxSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.FolderTextBoxOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.FolderTextBoxOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.FolderTextBoxSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.FolderTextBoxSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FolderTextBoxSettingControl.AttachToSetting(Mallenom.Setup.Settings.ISetting{System.String})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.FolderTextBoxSettingControl.DetachFromSetting(Mallenom.Setup.Settings.ISetting{System.String})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.LabelSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.LabelSettingControl`1"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.LabelSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.LabelSettingControl`1">
            <summary>Контрол для любых параметров на базе <see cref="T:System.Windows.Forms.Label"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.LabelSettingControl`1.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelSettingControl`1.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.LabelOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.LabelOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelSettingControl`1.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.LabelSettingControl`1.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelSettingControl`1.AttachToSetting(Mallenom.Setup.Settings.ISetting{`0})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.LabelSettingControl">
            <summary>Контрол для строковых параметров на базе <see cref="T:System.Windows.Forms.Label"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.LabelSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.LabelOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.LabelOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.LabelSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.LabelSettingControl.AttachToSetting(Mallenom.Setup.Settings.ISetting{System.String})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.CheckBoxSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.CheckBoxSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.CheckBoxSettingControlAttribute.Appearance">
            <summary>Внешний вид.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.CheckBoxSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.CheckBoxSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.CheckBoxSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.CheckBoxSettingControl">
            <summary>Контрол настройки логического параметра.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.CheckBoxSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.CheckBoxSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.CheckBoxOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.CheckBoxOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.CheckBoxSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.CheckBoxSettingControl.AttachToSetting(Mallenom.Setup.Settings.ISetting{System.Boolean})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.CheckBoxSettingControl.DetachFromSetting(Mallenom.Setup.Settings.ISetting{System.Boolean})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.CheckBoxSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.IPAddressSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.IPAddressSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPAddressSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.IPAddressSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPAddressSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.IPAddressSettingControl">
            <summary>Контрол настройки IP-адреса.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.IPAddressSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPAddressSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.IPAddressControlOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.IPAddressControlOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPAddressSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.IPAddressSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPAddressSettingControl.AttachToSetting(Mallenom.Setup.Settings.ISetting{System.Net.IPAddress})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPAddressSettingControl.DetachFromSetting(Mallenom.Setup.Settings.ISetting{System.Net.IPAddress})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.IPEndPointControl">
            <summary>Контрол для редактирования значения <see cref="T:System.Net.IPEndPoint"/>.</summary>
        </member>
        <member name="E:Mallenom.Setup.Controls.IPEndPointControl.ValueChanged">
            <summary>Значение измнено.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPEndPointControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.IPEndPointControl"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.IPEndPointControl.Port">
            <summary>Порт.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.IPEndPointControl.IPAddress">
            <summary>IP-адрес.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.IPEndPointControl.Value">
            <summary>Значение.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.IPEndPointSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.IPEndPointSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPEndPointSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.IPEndPointSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPEndPointSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.IPEndPointSettingControl">
            <summary>Контрол для настройки IP-адреса и порта.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.IPEndPointSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPEndPointSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPEndPointSettingControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.IPEndPointSettingControl"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.IPEndPointSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPEndPointSettingControl.AttachToSetting(Mallenom.Setup.Settings.ISetting{System.Net.IPEndPoint})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.IPEndPointSettingControl.DetachFromSetting(Mallenom.Setup.Settings.ISetting{System.Net.IPEndPoint})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.UpDownSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.UpDownSettingControl`1"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.UpDownSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.UpDownSettingControlAttribute"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.UpDownSettingControlAttribute.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places to display in the spin box (also
            known as an up-down control).
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.UpDownSettingControlAttribute.ThousandsSeparator">
            <summary>
            Gets or sets a value indicating whether a thousands separator is displayed
            in the spin box (also known as an up-down control) when appropriate.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.UpDownSettingControlAttribute.Hexadecimal">
            <summary>
            Gets or sets a value indicating whether the spin box (also known as an up-down
            control) should display the value it contains in hexadecimal format.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.UpDownSettingControlAttribute.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.UpDownSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.UpDownSettingControl`1">
            <summary>Контрол для численных параметров на базе <see cref="T:System.Windows.Forms.NumericUpDown"/>.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Controls.UpDownSettingControl`1.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.UpDownSettingControl`1.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.UpDownSettingControl`1.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.UpDownSettingControl`1.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.UpDownSettingControl`1.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{`0})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.UpDownSettingControl`1.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{`0})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.TrackBarSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.UpDownSettingControl`1"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.TrackBarSettingControlAttribute"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarSettingControlAttribute.ValueAreaWidth">
            <summary>Ширина зоны, отображающей значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.TrackBarSettingControl`1">
            <summary>Контрол для численных параметров на базе <see cref="T:System.Windows.Forms.TrackBar"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.TrackBarSettingControl`1.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarSettingControl`1.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.TrackBarOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.TrackBarOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarSettingControl`1.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarSettingControl`1.OnLoad(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.UserControl.Load"/> event.</summary>
            <param name="e"></param>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarSettingControl`1.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarSettingControl`1.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{`0})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarSettingControl`1.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{`0})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.DateTimePickerSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute.ShowUpDown">
            <summary>Отображать контрол UpDown для редактирования.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute.CustomFormat">
            <summary>Пользовательский формат даты/времени.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute.Format">
            <summary>Формат даты/времени.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute.DropDownAlign">
            <summary>Сторона, с которой раскрывается календарь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.DateTimePickerSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.DateTimePickerSettingControl">
            <summary>Контрол для <see cref="T:Mallenom.Setup.Settings.DateTimeSetting"/> на базе <see cref="T:System.Windows.Forms.DateTimePicker"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.DateTimePickerSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.DateTimePickerSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.DateTimePickerOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.DateTimePickerOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.DateTimePickerSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.DateTimePickerSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.DateTimePickerSettingControl.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{System.DateTime})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.DateTimePickerSettingControl.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{System.DateTime})">
            <summary>Вызывается при отключении от параметра.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.TimeSpanSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute.ShowUpDown">
            <summary>Отображать контрол UpDown для редактирования.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute.CustomFormat">
            <summary>Пользовательский формат даты/времени.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute.Format">
            <summary>Формат даты/времени.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute.DropDownAlign">
            <summary>Сторона, с которой раскрывается календарь.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TimeSpanSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.TimeSpanSettingControl">
            <summary>Контрол для <see cref="T:Mallenom.Setup.Settings.TimeSpanSetting"/> на базе <see cref="T:System.Windows.Forms.DateTimePicker"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.TimeSpanSettingControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TimeSpanSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.DateTimePickerOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.DateTimePickerOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.TimeSpanSettingControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TimeSpanSettingControl.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TimeSpanSettingControl.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{System.TimeSpan})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.TimeSpanSettingControl.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{System.TimeSpan})">
            <summary>Вызывается при отключении от параметра.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.SettingValueItem">
            <summary>Объект для хранения в контейнерных контролах вместо настоящего значения параметра.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.SettingValueItem._stringValue">
            <summary>Отображаемое строковое значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingValueItem.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SettingValueItem"/>.</summary>
            <param name="stringValue">Отображаемое строковое значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingValueItem.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SettingValueItem"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.SettingValueItem.StringValue">
            <summary>Отображаемое значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingValueItem.GetValue">
            <summary>Фактическое значение.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingValueItem.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Setup.Controls.SettingValueItem"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Setup.Controls.SettingValueItem"/>.</returns>
        </member>
        <member name="T:Mallenom.Setup.Controls.SettingValueItem`1">
            <summary>Объект для хранения в контейнерных контролах вместо настоящего значения параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingValueItem`1.#ctor(System.String,`0)">
            <summary>Конструктор.</summary>
            <param name="stringValue">Отображаемое значение.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingValueItem`1.#ctor(System.String)">
            <summary>Конструктор.</summary>
            <param name="stringValue">Отображаемое значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingValueItem`1.#ctor(`0)">
            <summary>Конструктор.</summary>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.SettingValueItem`1.GetValue">
            <summary>Фактическое значение.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.SettingValueItem`1.Value">
            <summary>Значение.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.ComboBoxSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.UpDownSettingControl`1"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ComboBoxSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.ComboBoxSettingControlAttribute"/>.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxSettingControlAttribute.MaxDropDownItems">
            <summary>Максимальное количество элементов, отображаемое в выпадающем списке.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxSettingControlAttribute.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ComboBoxSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.ComboBoxSettingControl`1">
            <summary>Контрол для IRestrictedSetting-параметров на базе <see cref="T:System.Windows.Forms.ComboBox"/>.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Controls.ComboBoxSettingControl`1.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ComboBoxSettingControl`1.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.ComboBoxOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.ComboBoxOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.ComboBoxSettingControl`1.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ComboBoxSettingControl`1.AttachToSetting(Mallenom.Setup.Settings.IRestrictedSetting{`0})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.ComboBoxSettingControl`1.DetachFromSetting(Mallenom.Setup.Settings.IRestrictedSetting{`0})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ComboBoxSettingControl`1.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.ButtonActionControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.ButtonActionControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ButtonActionControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.ButtonActionControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ButtonActionControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.ButtonActionControl">
            <summary>Контрол для параметров на базе <see cref="T:System.Windows.Forms.Button"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.ButtonActionControl.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ButtonActionControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.ButtonOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.ButtonOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.ButtonActionControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ButtonActionControl.NamedParameter">
            <summary>INamedParameter.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ButtonActionControl.Setting">
            <summary>Настраиваемый параметр.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ButtonActionControl.SetLabelAreaWidth(System.Int32)">
            <summary>Установить ширину области, отображающей метку.</summary>
            <param name="width">Ширина области, отображающей метку.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.SizeSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.SizeSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SizeSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.SizeSettingControl">
            <summary>Контрол для <see cref="T:System.Drawing.Size"/>-параметров.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeSettingControl.#cctor">
            <summary>Инициализация <see cref="T:Mallenom.Setup.Controls.SizeSettingControl"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.SizeSettingControl.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeSettingControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SizeSettingControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeSettingControl.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.Size})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeSettingControl.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.Size})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.SizeSettingControl.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.SizeFSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.SizeFSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeFSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SizeFSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeFSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.SizeFSettingControl">
            <summary>Контрол для <see cref="T:System.Drawing.SizeF"/>-параметров.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeFSettingControl.#cctor">
            <summary>Инициализация <see cref="T:Mallenom.Setup.Controls.SizeFSettingControl"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.SizeFSettingControl.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeFSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeFSettingControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SizeSettingControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeFSettingControl.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.SizeF})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.SizeFSettingControl.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.SizeF})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.SizeFSettingControl.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.PointSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.PointSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.PointSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.PointSettingControl">
            <summary>Контрол для <see cref="T:System.Drawing.Point"/>-параметров.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.PointSettingControl.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointSettingControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SizeSettingControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointSettingControl.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.Point})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointSettingControl.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.Point})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.PointSettingControl.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.PointFSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.PointFSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointFSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.PointFSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointFSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.PointFSettingControl">
            <summary>Контрол для <see cref="T:System.Drawing.PointF"/>-параметров.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.PointFSettingControl.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointFSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointFSettingControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SizeSettingControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointFSettingControl.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.PointF})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.PointFSettingControl.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.PointF})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.PointFSettingControl.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.RectangleSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.RectangleSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.RectangleSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.RectangleSettingControl">
            <summary>Контрол для <see cref="T:System.Drawing.Rectangle"/>-параметров.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleSettingControl.#cctor">
            <summary>Инициализация <see cref="T:Mallenom.Setup.Controls.RectangleSettingControl"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.RectangleSettingControl.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleSettingControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SizeSettingControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleSettingControl.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.Rectangle})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleSettingControl.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.Rectangle})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.RectangleSettingControl.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.RectangleFSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.RectangleFSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleFSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.RectangleFSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleFSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.RectangleFSettingControl">
            <summary>Контрол для <see cref="T:System.Drawing.RectangleF"/>-параметров.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleFSettingControl.#cctor">
            <summary>Инициализация <see cref="T:Mallenom.Setup.Controls.RectangleFSettingControl"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.RectangleFSettingControl.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleFSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.NumericUpDownOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleFSettingControl.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.SizeSettingControl"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleFSettingControl.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.RectangleF})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.RectangleFSettingControl.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{System.Drawing.RectangleF})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.RectangleFSettingControl.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.ColorSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.ColorSettingControl"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ColorSettingControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.ColorSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ColorSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.ColorSettingControl">
            <summary>Контрол для <see cref="T:Mallenom.Setup.Settings.ColorSetting"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.ColorSettingControl.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.ColorSettingControl.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.ColorButtonOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.ColorButtonOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.ColorSettingControl.AttachToSetting(Mallenom.Setup.Settings.ISetting{System.Drawing.Color})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.ColorSettingControl.DetachFromSetting(Mallenom.Setup.Settings.ISetting{System.Drawing.Color})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.ColorSettingControl.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.RadioButtonsControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.RadioButtonsControl`1"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RadioButtonsControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.TrackBarSettingControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RadioButtonsControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.RadioButtonsControl`1">
            <summary>Контрол для <see cref="T:Mallenom.Setup.Settings.IRestrictedSetting`1"/>-параметров на базе нескольких <see cref="T:System.Windows.Forms.RadioButton"/>.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Controls.RadioButtonsControl`1.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RadioButtonsControl`1.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.RadioButtonOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.RadioButtonOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.RadioButtonsControl`1.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.RadioButtonsControl`1"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.RadioButtonsControl`1.AttachToSetting(Mallenom.Setup.Settings.IRestrictedSetting{`0})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.RadioButtonsControl`1.DetachFromSetting(Mallenom.Setup.Settings.IRestrictedSetting{`0})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.RadioButtonsControl`1.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.FlagsControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.FlagsControl`1"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FlagsControlAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Setup.Controls.FlagsControlAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FlagsControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.FlagsControl`1">
            <summary>Контрол для <see cref="T:Mallenom.Setup.Settings.FlagSetting`1"/>-параметров на базе нескольких <see cref="T:System.Windows.Forms.CheckBox"/>.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
        </member>
        <member name="F:Mallenom.Setup.Controls.FlagsControl`1.Provider">
            <summary>Провайдер контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.FlagsControl`1.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.CheckBoxOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.CheckBoxOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.FlagsControl`1.AttachToSetting(Mallenom.Setup.Settings.FlagSetting{`0})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.FlagsControl`1.DetachFromSetting(Mallenom.Setup.Settings.FlagSetting{`0})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.FlagsControl`1.Value">
            <summary>Текущее значение, выставленное в контроле.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControlAttribute">
            <summary>Атрибут для указания <see cref="T:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControl`1"/> как контрола для редактирования параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControlAttribute.ThousandsSeparator">
            <summary>
            Gets or sets a value indicating whether a thousands separator is displayed
            in the spin box (also known as an up-down control) when appropriate.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControlAttribute.Hexadecimal">
            <summary>
            Gets or sets a value indicating whether the spin box (also known as an up-down
            control) should display the value it contains in hexadecimal format.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControlAttribute.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControlAttribute.GetSettingControlOptions(System.Type,System.Type)">
            <summary>Опции контрола настройки параметра.</summary>
        </member>
        <member name="T:Mallenom.Setup.Controls.TrackBarAndUpDownOptions">
            <summary>Опции для контрола <see cref="T:System.Windows.Forms.TrackBar"/>.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarAndUpDownOptions.#ctor(Mallenom.Setup.Settings.ISettingControlProvider)">
            <summary>Конструктор.</summary>
            <param name="provider">Провайдер контрола настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarAndUpDownOptions.ThousandsSeparator">
            <summary>
            Gets or sets a value indicating whether a thousands separator is displayed
            in the spin box (also known as an up-down control) when appropriate.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarAndUpDownOptions.Hexadecimal">
            <summary>
            Gets or sets a value indicating whether the spin box (also known as an up-down
            control) should display the value it contains in hexadecimal format.
            </summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarAndUpDownOptions.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarAndUpDownOptions.ApplyTo(Mallenom.Setup.Controls.TrackBarUpDownControl)">
            <summary>Применить опции к контролу.</summary>
            <param name="control">Контрол, к которому будут применены данные опции.</param>
        </member>
        <member name="T:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControl`1">
            <summary>Контрол для численных параметров на базе <see cref="T:System.Windows.Forms.TrackBar"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControl`1.Provider">
            <summary>Провайдер контрола настройки.</summary>
        </member>
        <member name="P:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControl`1.Value">
            <summary>Значение параметра, выставленное контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControl`1.CreateSettingControlOptions">
            <summary>Создать <see cref="T:Mallenom.Setup.Controls.TrackBarOptions"/> для данного контрола.</summary>
            <returns><see cref="T:Mallenom.Setup.Controls.TrackBarOptions"/></returns>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControl`1.OnLoad(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.UserControl.Load"/> event.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControl`1.AttachToSetting(Mallenom.Setup.Settings.IIntervalSetting{`0})">
            <summary>Подключиться к параметру.</summary>
            <param name="setting">Параметр.</param>
        </member>
        <member name="M:Mallenom.Setup.Controls.TrackBarAndUpDownSettingControl`1.DetachFromSetting(Mallenom.Setup.Settings.IIntervalSetting{`0})">
            <summary>Вызывается при отключении от параметра.</summary>
        </member>
        <member name="E:Mallenom.Setup.Controls.TrackBarUpDownControl.ValueChanged">
            <summary>Событие - значение в <see cref="T:System.Windows.Forms.NumericUpDown"/> или <see cref="F:Mallenom.Setup.Controls.TrackBarUpDownControl._trackBar"/> изменено.</summary>
        </member>
        <member name="T:Mallenom.Setup.SettingsSetupControl">
            <summary><see cref="T:Mallenom.Setup.ISetupControl"/>, генерируемый из списка <see cref="T:Mallenom.Setup.Settings.INamedParameter"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.SettingsSetupControl._controls">
            <summary>Список настраиваемых параметров.</summary>
        </member>
        <member name="F:Mallenom.Setup.SettingsSetupControl._filter">
            <summary>Фильтр параметров.</summary>
        </member>
        <member name="F:Mallenom.Setup.SettingsSetupControl._settings">
            <summary>Список созданных контролов для настройки параметров.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.DefaultCategoryName">
            <summary>Имя категории по умолчанию.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.CategoryDisplayStyle">
            <summary>Способ группировки контролов по категориям.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.MaxHeight">
            <summary>Максимальная высота контрола.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.AutoSizeLabelWidth">
            <summary>Автоматически вычислять подходящую ширину зоны с именем параметра.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.BufferedMode">
            <summary>Включить режим буферизации значений.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.Settings">
            <summary>Текущий список параметров.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.SettingFilter">
            <summary>Текущий фильтр параметров.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.LabelAreaWidth">
            <summary>Ширина области, отображающей метку.</summary>
        </member>
        <member name="P:Mallenom.Setup.SettingsSetupControl.SupportsSetDefaults">
            <summary>Поддержка сброса настроек на значения по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.#ctor(Mallenom.Setup.Settings.ISettingFilter)">
            <summary>Конструктор.</summary>
            <param name="filter">Фильтр параметров.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.#ctor(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.INamedParameter},Mallenom.Setup.Settings.ISettingFilter)">
            <summary>Конструктор.</summary>
            <param name="settings">Список параметров.</param>
            <param name="filter">Фильтр параметров.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.#ctor(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.INamedParameter})">
            <summary>Конструктор.</summary>
            <param name="settings">Список параметров.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.#ctor(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.IGeneralSetting},Mallenom.Setup.Settings.ISettingFilter)">
            <summary>Конструктор.</summary>
            <param name="settings">Список параметров.</param>
            <param name="filter">Фильтр параметров.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.#ctor(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.IGeneralSetting})">
            <summary>Конструктор.</summary>
            <param name="settings">Список параметров.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.SetSettingList(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.IGeneralSetting})">
            <summary>Установить список изменяемых настроек.</summary>
            <param name="settings">Список настроек.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.SetSettingList(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.INamedParameter})">
            <summary>Установить список изменяемых настроек.</summary>
            <param name="settings">Список настроек.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.SetSettingList(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.INamedParameter},Mallenom.Setup.Settings.ISettingFilter)">
            <summary>Установить список изменяемых настроек и их фильтр.</summary>
            <param name="settings">Список настроек.</param>
            <param name="filter">Фильтр настроек.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.SetSettingList(System.Collections.Generic.IEnumerable{Mallenom.Setup.Settings.IGeneralSetting},Mallenom.Setup.Settings.ISettingFilter)">
            <summary>Установить список изменяемых настроек и их фильтр.</summary>
            <param name="settings">Список настроек.</param>
            <param name="filter">Фильтр настроек.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.SetLabelAreaWidth(System.Int32)">
            <summary>Установить ширину области, отображающей метку.</summary>
            <param name="labelAreaWidth">Ширина области, отображающей метку.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.GetParameterControl(Mallenom.Setup.Settings.INamedParameter)">
            <summary>Найти контрол настройки параметра <paramref name="parameter"/>.</summary>
            <param name="parameter">Параметр, для которого необходимо найти контрол настройки.</param>
            <returns>Контрол настройки (или null, если контрол не был создан).</returns>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.ReCreateSettingControl(Mallenom.Setup.Settings.INamedParameter)">
            <summary>Пересоздать контрол настройки параметра <paramref name="parameter"/>.</summary>
            <param name="parameter">Параметр, для которого необходимо пересоздать контрол.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.Cancel">
            <summary>Откатывает изменения, произведенные пользователемс момента последнего применения.</summary>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.OnLoad(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.InternalUpdateControl">
            <summary>Обновить содержимое контрола.</summary>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.InternalAfterSetup">
            <summary>Вызывается после настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.InternalApply">
            <summary>Вызывается при применении значений параметров.</summary>
            <returns>true.</returns>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.InternalSetDefaults">
            <summary>Установка значений параметров по умолчанию.</summary>
        </member>
        <member name="F:Mallenom.Setup.SettingsSetupControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Setup.SettingsSetupControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Setup.CategoryDisplayStyle">
            <summary>Способ группировки контролов.</summary>
        </member>
        <member name="F:Mallenom.Setup.CategoryDisplayStyle.GroupBoxes">
            <summary>Группировка с помощью <see cref="T:System.Windows.Forms.GroupBox"/>.</summary>
        </member>
        <member name="F:Mallenom.Setup.CategoryDisplayStyle.Tabs">
            <summary>Группировка с помощью <see cref="T:System.Windows.Forms.TabControl"/>.</summary>
        </member>
        <member name="T:Mallenom.Setup.BaseSetupForm">
            <summary>Базовый класс форм настроек.</summary>
        </member>
        <member name="F:Mallenom.Setup.BaseSetupForm.MIN_WIDTH">
            <summary>Минимальная ширина области, содержащей контрол.</summary>
        </member>
        <member name="F:Mallenom.Setup.BaseSetupForm.Log">
            <summary>Лог.</summary>
        </member>
        <member name="M:Mallenom.Setup.BaseSetupForm.#ctor">
            <summary>Конструктор для поддержки дизайнера.</summary>
        </member>
        <member name="M:Mallenom.Setup.BaseSetupForm.#ctor(System.Collections.Generic.IEnumerable{Mallenom.Setup.ISetupControl})">
            <summary>Создание формы настройки.</summary>
            <param name="controls">Список контролов настройки.</param>
        </member>
        <member name="P:Mallenom.Setup.BaseSetupForm.SetupControls">
            <summary>Контролы настройки, содержащиеся на форме.</summary>
        </member>
        <member name="P:Mallenom.Setup.BaseSetupForm.AskUserOnSetDefaults">
            <summary>Запрашивать у пользователя подтверждение при сбросе настроек на значения по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Setup.BaseSetupForm._btnApply_Click(System.Object,System.EventArgs)">
            <summary>Применить установки.</summary>
        </member>
        <member name="M:Mallenom.Setup.BaseSetupForm.OnClosed(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Setup.BaseSetupForm.ActivateControl(Mallenom.Setup.ISetupControl)">
            <summary>Активировать контрол (контрол отображается на форме).</summary>
            <param name="control">Контрол.</param>
        </member>
        <member name="M:Mallenom.Setup.BaseSetupForm.DeactivateControl(Mallenom.Setup.ISetupControl)">
            <summary>Деактивировть контрол (контрол больше не отображается на форме).</summary>
            <param name="control">Контрол.</param>
        </member>
        <member name="F:Mallenom.Setup.BaseSetupForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Setup.BaseSetupForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Setup.BaseSetupForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Setup.SetupForm">
            <summary>Форма настроек.</summary>
            <example>
            <code>
            using(SetupForm form = new SetupForm(new SetupControl1(), new SetupControl2()))
            {
            	form.ShowDialog(this);
            }
            </code>
            </example>
        </member>
        <member name="M:Mallenom.Setup.SetupForm.#ctor(System.Collections.Generic.IEnumerable{Mallenom.Setup.ISetupControl})">
            <summary>Создание формы настройки.</summary>
            <param name="controls">Список контролов, реализующих интерфейс ISetupControl.</param>
            <remarks>Элементы коллекции controls могут быть null. Такие элементы игнорируются.</remarks>
        </member>
        <member name="M:Mallenom.Setup.SetupForm.#ctor(Mallenom.Setup.ISetupControl[])">
            <summary>Создание формы настройки.</summary>
            <param name="controls">Список контролов, реализующих интерфейс ISetupControl.</param>
            <remarks>Элементы коллекции controls могут быть null. Такие элементы игнорируются.</remarks>
        </member>
        <member name="P:Mallenom.Setup.SetupForm.SelectedSetupPageIndex">
            <summary>Индекс текущего выбранного контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.SetupForm._tabControl_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>Переключение на другую вкладку.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Mallenom.Setup.SetupForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Setup.SetupForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Setup.SetupForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Setup.SingleControlSetupForm">
            <summary>Форма настроек для одного контрола.</summary>
            <example>
            <code>
            using(SingleControlSetupForm form = new SingleControlSetupForm(new SetupControl1()))
            {
            	form.ShowDialog(this);
            }
            </code>
            </example>
        </member>
        <member name="M:Mallenom.Setup.SingleControlSetupForm.#ctor(Mallenom.Setup.ISetupControl)">
            <summary>Создание формы настройки.</summary>
            <param name="setupControl">Контрол, реализующих интерфейс ISetupControl.</param>
        </member>
        <member name="F:Mallenom.Setup.SingleControlSetupForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Setup.SingleControlSetupForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Setup.SingleControlSetupForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Setup.ValueModifiedEventArg">
            <summary>Для события <see cref="M:Mallenom.Setup.ISetupControl.Modified"/>.</summary>
        </member>
        <member name="T:Mallenom.Setup.ISetupControl">
            <summary>Интерфейс контрола настройки.</summary>
        </member>
        <member name="E:Mallenom.Setup.ISetupControl.Modified">
            <summary>Генерируется при изменении параметра настройки.</summary>
        </member>
        <member name="P:Mallenom.Setup.ISetupControl.SupportsSetDefaults">
            <summary>Контрол поддерживает установку параметров на значения по умолчанию</summary>
        </member>
        <member name="M:Mallenom.Setup.ISetupControl.SetDefaults">
            <summary>Установить настройки по умолчанию</summary>
        </member>
        <member name="M:Mallenom.Setup.ISetupControl.BeforeSetup">
            <summary>Вызывается перед настройкой модулей.</summary>
        </member>
        <member name="M:Mallenom.Setup.ISetupControl.AfterSetup">
            <summary>Вызывается после настройкой модулей. Не важно нажата 'ОК' или 'Отмена'.</summary>
        </member>
        <member name="M:Mallenom.Setup.ISetupControl.UpdateControl">
            <summary>Обновить контрол параметрами из модуля.</summary>
        </member>
        <member name="M:Mallenom.Setup.ISetupControl.Apply">
            <summary>Применить параметры введенные пользователем. Нажатие 'ОК' или 'Применить'.</summary>
        </member>
        <member name="M:Mallenom.Setup.ISetupControl.ControlShow">
            <summary>Вызывается при выборе вкладки с контролом.</summary>
        </member>
        <member name="M:Mallenom.Setup.ISetupControl.ControlHide">
            <summary>Вызывается при скрытии (выборе другой) вкладки с контролом.</summary>
        </member>
        <member name="P:Mallenom.Setup.ISetupControl.IsModify">
            <summary></summary>
        </member>
        <member name="T:Mallenom.Setup.ISetupControlProvider">
            <summary>Интерфейс провайдера контрола настройки.</summary>
        </member>
        <member name="M:Mallenom.Setup.ISetupControlProvider.CreateControl(System.Object)">
            <summary>Создать контрол настройки.</summary>
            <param name="obj">Настраиваемый объект.</param>
            <returns>Контрол настройки объекта.</returns>
        </member>
        <member name="T:Mallenom.Setup.ISetupControlProvider`1">
            <summary>Интерфейс провайдера контрола настройки.</summary>
            <typeparam name="T">Тип настраиваемого объекта.</typeparam>
        </member>
        <member name="M:Mallenom.Setup.ISetupControlProvider`1.CreateControl(`0)">
            <summary>Создать контрол настройки.</summary>
            <param name="obj">Настраиваемый объект.</param>
            <returns>Контрол настройки объекта.</returns>
        </member>
        <member name="T:Mallenom.Setup.SetupControlAttribute">
            <summary>Атрибут для указания провайдера контрола настройки объекта.</summary>
        </member>
        <member name="M:Mallenom.Setup.SetupControlAttribute.GetSetupControl(System.Object)">
            <summary>Возвращает контрол настройки объекта.</summary>
            <param name="obj">Настраиваемый объект.</param>
            <returns>Контрол настройки объекта.</returns>
        </member>
        <member name="F:Mallenom.Setup.SetupControlAttribute._controlProviderType">
            <summary>Тип провайдера контрола настройки объекта.</summary>
        </member>
        <member name="M:Mallenom.Setup.SetupControlAttribute.#ctor(System.Type)">
            <summary>Создание <see cref="T:Mallenom.Setup.SetupControlAttribute"/>.</summary>
            <param name="controlProviderType">Тип провайдера контрола настройки объекта.</param>
        </member>
        <member name="P:Mallenom.Setup.SetupControlAttribute.ControlProviderType">
            <summary>Возвращает тип провайдера контрола настройки объекта.</summary>
            <value>Тип провайдера контрола настройки объекта.</value>
        </member>
        <member name="M:Mallenom.Setup.SetupControlAttribute.CreateControlProvider">
            <summary>Создать провайдер контрола настройки объекта.</summary>
            <returns>Провайдер контрола настройки объекта.</returns>
        </member>
        <member name="T:Mallenom.Storage.IObjectStorageReader">
            <summary>Читатель параметров из хранилища.</summary>
        </member>
        <member name="P:Mallenom.Storage.IObjectStorageReader.Name">
            <summary>Возвращает имя хранилища.</summary>
            <value>Имя хранилища.</value>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.GetChildStorage(System.String)">
            <summary>Получить дочернее хранилище с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Дочернее хранилище с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryGetChildStorage(System.String)">
            <summary>Получить дочернее хранилище с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Дочернее хранилище с именем <paramref name="name"/> или <c>null</c>, если такого не существует.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.ChildStorageExists(System.String)">
            <summary>Проверить существование дочернего хранилища с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns><c>true</c>, если дочернее хранилище с именем <paramref name="name"/> существует, иначе <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.GetChildStorages">
            <summary>Получить список дочерних хранилищ.</summary>
            <returns>Список дочерних хранилищ.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.ReadAttribute``1(System.String)">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <returns>Значение атрибута с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadAttribute``1(System.String)">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <c>default(T)</c>,
            если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadAttribute``1(System.String,``0)">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <paramref name="defaultValue"/>,
            если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadAttribute``1(System.String,System.Func{``0})">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.ReadParameter``1(System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter``1(System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра или <c>default(T)</c>, если считать значение не удалось.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter``1(System.String,``0)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter``1(System.String,System.Func{``0})">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.ReadParameter``1(System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter``1(System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>
            Значение параметра, или <c>default(T)</c>, если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter``1(System.String,System.String,``0)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter``1(System.String,System.String,System.Func{``0})">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.ReadAttribute(System.Type,System.String)">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <returns>Значение атрибута с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadAttribute(System.Type,System.String)">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <c>null</c>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadAttribute(System.Type,System.String,System.Object)">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadAttribute(System.Type,System.String,System.Func{System.Object})">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.ReadParameter(System.Type,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter(System.Type,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>
            Значение параметра, или <с>null</с>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter(System.Type,System.String,System.Object)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter(System.Type,System.String,System.Func{System.Object})">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.ReadParameter(System.Type,System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter(System.Type,System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>
            Значение параметра, или <с>null</с>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter(System.Type,System.String,System.String,System.Object)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageReader.TryReadParameter(System.Type,System.String,System.String,System.Func{System.Object})">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="T:Mallenom.Storage.IObjectStorageWriter">
            <summary>Писатель параметров в хранилище.</summary>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageWriter.BeginChildObject(System.String)">
            <summary>Начать запись дочернего хранилища.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Созданное дочернее хранилище.</returns>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageWriter.EndChildObject(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Завершить запись в дочернее хранилище.</summary>
            <param name="writer">Дочернее хранилище.</param>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageWriter.WriteAttribute``1(System.String,``0)">
            <summary>Записать атрибут объекта.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя.</param>
            <param name="data">Значение атрибута.</param>
            <remarks>Атрибуты могут хранить только атомарные значения.</remarks>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageWriter.WriteParameter``1(System.String,``0)">
            <summary>Записать значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageWriter.WriteParameter``1(System.String,System.String,``0)">
            <summary>Записать значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибут, в котором будет храниться значение.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageWriter.WriteAttribute(System.String,System.Object)">
            <summary>Записать атрибут объекта.</summary>
            <param name="name">Имя.</param>
            <param name="data">Значение атрибута.</param>
            <remarks>Атрибуты могут хранить только атомарные значения.</remarks>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageWriter.WriteParameter(System.String,System.Object)">
            <summary>Записать значение параметра.</summary>
            <param name="name">Имя параметра.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.IObjectStorageWriter.WriteParameter(System.String,System.String,System.Object)">
            <summary>Записать значение параметра.</summary>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибут, в котором будет храниться значение.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="T:Mallenom.Storage.ISupportSerialization">
            <summary>Интерфейс объекта, определяющего собственный порядок сериализации и десериализации.</summary>
        </member>
        <member name="M:Mallenom.Storage.ISupportSerialization.Save(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Сохранить данные объекта в хранилище.</summary>
            <param name="writer">Объект для записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.Storage.MemoryStorage">
            <summary>Хранилище параметров объектов в памяти.</summary>
        </member>
        <member name="F:Mallenom.Storage.MemoryStorage._name">
            <summary>Имя хранилища.</summary>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorage.#ctor">
            <summary>Создание <see cref="T:Mallenom.Storage.MemoryStorage"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorage.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Storage.MemoryStorage"/>.</summary>
            <param name="name">Имя хранилища.</param>
        </member>
        <member name="P:Mallenom.Storage.MemoryStorage.Name">
            <summary>Возвращает имя хранилища.</summary>
            <value>Имя хранилища.</value>
        </member>
        <member name="P:Mallenom.Storage.MemoryStorage.ChildStorages">
            <summary>Возвращает список дочерних хранилищ.</summary>
            <value>Список дочерних хранилищ.</value>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorage.ClearAttributes">
            <summary>Очистить список атрибутов.</summary>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorage.ClearParameters">
            <summary>Очистить список дочерних хранилищ.</summary>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorage.Clear">
            <summary>Очистить хранилище.</summary>
        </member>
        <member name="T:Mallenom.Storage.MemoryStorageReader">
            <summary>Объект для чтения данных из <see cref="T:Mallenom.Storage.MemoryStorage"/>.</summary>
        </member>
        <member name="F:Mallenom.Storage.MemoryStorageReader._storage">
            <summary>Хранилище, из которого производится чтение.</summary>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.#ctor(Mallenom.Storage.MemoryStorage)">
            <summary>Создание <see cref="T:Mallenom.Storage.MemoryStorageReader"/>.</summary>
            <param name="storage">Хранилище, из которого производится чтение.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="storage"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.Storage.MemoryStorageReader.Name">
            <summary>Возвращает имя хранилища.</summary>
            <value>Имя хранилища.</value>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.GetChildStorage(System.String)">
            <summary>Получить дочернее хранилище с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Дочернее хранилище с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryGetChildStorage(System.String)">
            <summary>Получить дочернее хранилище с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>
            Дочернее хранилище с именем <paramref name="name"/> или <c>null</c>, если такого не существует.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.ChildStorageExists(System.String)">
            <summary>
            Проверить существование дочернего хранилища с именем <paramref name="name"/>.
            </summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>
            	<c>true</c>, если дочернее хранилище с именем <paramref name="name"/> существует, иначе <c>false</c>.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.GetChildStorages">
            <summary>
            Получить список дочерних хранилищ.
            </summary>
            <returns>Список дочерних хранилищ.</returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.ReadAttribute``1(System.String)">
            <summary>
            Считать значение атрибута.
            </summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadAttribute``1(System.String)">
            <summary>
            Считать значение атрибута.
            </summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <c>default(T)</c>,
            если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadAttribute``1(System.String,``0)">
            <summary>
            Считать значение атрибута.
            </summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <paramref name="defaultValue"/>,
            если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadAttribute``1(System.String,System.Func{``0})">
            <summary>
            Считать значение атрибута.
            </summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.ReadParameter``1(System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter``1(System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <returns>
            Значение параметра или <c>default(T)</c>, если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter``1(System.String,``0)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter``1(System.String,System.Func{``0})">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.ReadParameter``1(System.String,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter``1(System.String,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>
            Значение параметра, или <c>default(T)</c>, если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter``1(System.String,System.String,``0)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter``1(System.String,System.String,System.Func{``0})">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.ReadAttribute(System.Type,System.String)">
            <summary>
            Считать значение атрибута.
            </summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadAttribute(System.Type,System.String)">
            <summary>
            Считать значение атрибута.
            </summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <c>null</c>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadAttribute(System.Type,System.String,System.Object)">
            <summary>
            Считать значение атрибута.
            </summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadAttribute(System.Type,System.String,System.Func{System.Object})">
            <summary>
            Считать значение атрибута.
            </summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.ReadParameter(System.Type,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter(System.Type,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>
            Значение параметра, или <с>null</с>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter(System.Type,System.String,System.Object)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter(System.Type,System.String,System.Func{System.Object})">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.ReadParameter(System.Type,System.String,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter(System.Type,System.String,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>
            Значение параметра, или <с>null</с>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter(System.Type,System.String,System.String,System.Object)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageReader.TryReadParameter(System.Type,System.String,System.String,System.Func{System.Object})">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="T:Mallenom.Storage.MemoryStorageWriter">
            <summary>Объект для записи данных в <see cref="T:Mallenom.Storage.MemoryStorage"/>.</summary>
        </member>
        <member name="F:Mallenom.Storage.MemoryStorageWriter._storage">
            <summary>Хранилище, из которого производится чтение.</summary>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.#ctor(Mallenom.Storage.MemoryStorage)">
            <summary>Создание <see cref="T:Mallenom.Storage.MemoryStorageWriter"/>.</summary>
            <param name="storage">Хранилище.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="storage"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.BeginChildObject(System.String)">
            <summary>Начать запись дочернего хранилища.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Созданное дочернее хранилище.</returns>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.EndChildObject(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Завершить запись в дочернее хранилище.</summary>
            <param name="writer">Дочернее хранилище.</param>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.WriteAttribute``1(System.String,``0)">
            <summary>Записать атрибут объекта.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя.</param>
            <param name="data">Значение атрибута.</param>
            <remarks>Атрибуты могут хранить только атомарные значения.</remarks>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.WriteParameter``1(System.String,``0)">
            <summary>Записать значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.WriteParameter``1(System.String,System.String,``0)">
            <summary>Записать значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибут, в котором будет храниться значение.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.WriteAttribute(System.String,System.Object)">
            <summary>Записать атрибут объекта.</summary>
            <param name="name">Имя.</param>
            <param name="data">Значение атрибута.</param>
            <remarks>Атрибуты могут хранить только атомарные значения.</remarks>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.WriteParameter(System.String,System.Object)">
            <summary>Записать значение параметра.</summary>
            <param name="name">Имя параметра.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.MemoryStorageWriter.WriteParameter(System.String,System.String,System.Object)">
            <summary>Записать значение параметра.</summary>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибут, в котором будет храниться значение.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="T:Mallenom.Storage.ObjectStorageReaderEventArgs">
            <summary>Аргументы события, предоставлящие доступ к читателю данных из хранилища параметров.</summary>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageReaderEventArgs.#ctor(Mallenom.Storage.IObjectStorageReader)">
            <summary>Создание <see cref="T:Mallenom.Storage.ObjectStorageReaderEventArgs"/>.</summary>
            <param name="reader">Читатель данных из хранилища.</param>
        </member>
        <member name="P:Mallenom.Storage.ObjectStorageReaderEventArgs.Reader">
            <summary>Возвращает объект для чтения данных из хранилища объекта.</summary>
        </member>
        <member name="T:Mallenom.Storage.ObjectStorageReaderExtensions">
            <summary>Расширения для <see cref="T:Mallenom.Storage.IObjectStorageReader"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageReaderExtensions.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Получение имени свойства.</summary>
            <typeparam name="T">Тип свойства.</typeparam>
            <param name="expression">Выражение возвращающее свойство.</param>
            <returns>Имя свойства.</returns>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageReaderExtensions.GetInstance(System.Linq.Expressions.Expression)">
            <summary>Возвращает экземпляр объекта, на который указывает выражение.</summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberExpression"/>.</param>
            <returns>Экземпляр объекта, на который указывает выражение.</returns>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageReaderExtensions.GetSetter``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Превращает getter в setter.</summary>
            <typeparam name="T">Тип значения свойства.</typeparam>
            <param name="expression">Свойство.</param>
            <returns>setter для свойства.</returns>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageReaderExtensions.ReadParameter``1(Mallenom.Storage.IObjectStorageReader,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Считывает значение свойства из параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="reader">Объект для чтения данных.</param>
            <param name="property">Считываемое свойство.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> == <c>null</c> или
            <paramref name="property"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageReaderExtensions.TryReadParameter``1(Mallenom.Storage.IObjectStorageReader,System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>Считывает значение свойства из параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="reader">Объект для чтения данных.</param>
            <param name="property">Считываемое свойство.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> == <c>null</c> или
            <paramref name="property"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageReaderExtensions.ReadAttribute``1(Mallenom.Storage.IObjectStorageReader,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Считывает значение свойства из атрибута.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="reader">Объект для чтения данных.</param>
            <param name="property">Считываемое свойство.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> == <c>null</c> или
            <paramref name="property"/> == <c>null</c>.
            </exception>
        </member>
        <member name="T:Mallenom.Storage.ObjectStorageWriterEventArgs">
            <summary>Аргументы события, предоставляющие доступ к объекту для записи данных в хранилище.</summary>
        </member>
        <member name="F:Mallenom.Storage.ObjectStorageWriterEventArgs._writer">
            <summary>Объект для записи данных в хранилище.</summary>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageWriterEventArgs.#ctor(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Создание <see cref="T:Mallenom.Storage.ObjectStorageWriterEventArgs"/>.</summary>
            <param name="writer">Объект для записи данных в хранилище.</param>
        </member>
        <member name="P:Mallenom.Storage.ObjectStorageWriterEventArgs.Writer">
            <summary>Возвращает объект для записи данных в хранилище.</summary>
        </member>
        <member name="T:Mallenom.Storage.ObjectStorageWriterExtensions">
            <summary>Расширения для <see cref="T:Mallenom.Storage.IObjectStorageWriter"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageWriterExtensions.WriteCollection``1(Mallenom.Storage.IObjectStorageWriter,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Запись коллекции значений.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="writer">Объект для записи коллекции.</param>
            <param name="name">Название параметра для хранения коллекции.</param>
            <param name="collection">Коллекция значений для записи.</param>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageWriterExtensions.WriteCollection``1(Mallenom.Storage.IObjectStorageWriter,System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Action{Mallenom.Storage.IObjectStorageWriter,``0})">
            <summary>Запись коллекции значений.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="writer">Объект для записи коллекции.</param>
            <param name="name">Название параметра для хранения коллекции.</param>
            <param name="itemName">Имя дочернего хранилища для каждого элемента.</param>
            <param name="collection">Коллекция значений для записи.</param>
            <param name="write">Функция записи элемента в дочернее хранилище.</param>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageWriterExtensions.WriteCollection``1(Mallenom.Storage.IObjectStorageWriter,System.String,System.Func{``0,System.String},System.Collections.Generic.IEnumerable{``0},System.Action{Mallenom.Storage.IObjectStorageWriter,``0})">
            <summary>Запись коллекции значений.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="writer">Объект для записи коллекции.</param>
            <param name="name">Название параметра для хранения коллекции.</param>
            <param name="getItemName">Функция, возвращающая имя дочернего хранилища для каждого элемента.</param>
            <param name="collection">Коллекция значений для записи.</param>
            <param name="write">Функция записи элемента в дочернее хранилище.</param>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageWriterExtensions.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Получение имени свойства.</summary>
            <typeparam name="T">Тип свойства.</typeparam>
            <param name="expression">Выражение возвращающее свойство.</param>
            <returns>Имя свойства.</returns>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageWriterExtensions.WriteParameter``1(Mallenom.Storage.IObjectStorageWriter,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Записать значение свойства как параметр.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="writer">Объект для записи данных.</param>
            <param name="property">Записываемое свойство.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="writer"/> == <c>null</c> или
            <paramref name="property"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.ObjectStorageWriterExtensions.WriteAttribute``1(Mallenom.Storage.IObjectStorageWriter,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Записать значение свойства как атрибут.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="writer">Объект для записи данных.</param>
            <param name="property">Записываемое свойство.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="writer"/> == <c>null</c> или
            <paramref name="property"/> == <c>null</c>.
            </exception>
        </member>
        <member name="T:Mallenom.Storage.XmlDataFormat">
            <summary>Вспомогательные функции для сериализации и десериализации XML.</summary>
            <remarks>
            Главная задача - избежать дублирования кода при создании и инициализации <see cref="T:Mallenom.Storage.Xml.XmlWriterStorage"/>
            и <see cref="T:Mallenom.Storage.Xml.XDocumentReader"/>.
            </remarks>
        </member>
        <member name="F:Mallenom.Storage.XmlDataFormat.DefaultXmlWriterSettings">
            <summary>Параметры записи XML по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.#cctor">
            <summary>Инициализация <see cref="T:Mallenom.Storage.XmlDataFormat"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.SerializeTo(System.IO.Stream,System.Xml.XmlWriterSettings,Mallenom.Storage.Xml.IXmlWriterContext,System.Action{Mallenom.Storage.IObjectStorageWriter})">
            <summary>Сериализовать данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="xmlWriterSettings">Параметры записи XML.</param>
            <param name="context">Контекст XML-сериализатора.</param>
            <param name="saveFunc">Функция записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> == <c>null</c> или
            <paramref name="xmlWriterSettings"/> == <c>null</c> или
            <paramref name="context"/> == <c>null</c> или
            <paramref name="saveFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.SerializeTo(System.IO.Stream,System.Xml.XmlWriterSettings,System.Action{Mallenom.Storage.IObjectStorageWriter})">
            <summary>Сериализовать данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="xmlWriterSettings">Параметры записи XML.</param>
            <param name="saveFunc">Функция записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> == <c>null</c> или
            <paramref name="xmlWriterSettings"/> == <c>null</c> или
            <paramref name="saveFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.SerializeTo(System.IO.Stream,Mallenom.Storage.Xml.IXmlWriterContext,System.Action{Mallenom.Storage.IObjectStorageWriter})">
            <summary>Сериализовать данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="context">Контекст XML-сериализатора.</param>
            <param name="saveFunc">Функция записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> == <c>null</c> или
            <paramref name="context"/> == <c>null</c> или
            <paramref name="saveFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.SerializeTo(System.IO.Stream,System.Action{Mallenom.Storage.IObjectStorageWriter})">
            <summary>Сериализовать данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="saveFunc">Функция записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> == <c>null</c> или
            <paramref name="saveFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.SerializeTo(System.String,System.Xml.XmlWriterSettings,Mallenom.Storage.Xml.IXmlWriterContext,System.Action{Mallenom.Storage.IObjectStorageWriter})">
            <summary>Сериализовать данные в файл.</summary>
            <param name="fileName">Имя файла.</param>
            <param name="xmlWriterSettings">Параметры записи XML.</param>
            <param name="context">Контекст XML-сериализатора.</param>
            <param name="saveFunc">Функция записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> == <c>null</c> или
            <paramref name="xmlWriterSettings"/> == <c>null</c> или
            <paramref name="context"/> == <c>null</c> или
            <paramref name="saveFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.SerializeTo(System.String,Mallenom.Storage.Xml.IXmlWriterContext,System.Action{Mallenom.Storage.IObjectStorageWriter})">
            <summary>Сериализовать данные в файл.</summary>
            <param name="fileName">Имя файла.</param>
            <param name="context">Контекст XML-сериализатора.</param>
            <param name="saveFunc">Функция записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> == <c>null</c> или
            <paramref name="context"/> == <c>null</c> или
            <paramref name="saveFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.SerializeTo(System.String,System.Xml.XmlWriterSettings,System.Action{Mallenom.Storage.IObjectStorageWriter})">
            <summary>Сериализовать данные в файл.</summary>
            <param name="fileName">Имя файла.</param>
            <param name="xmlWriterSettings">Параметры записи XML.</param>
            <param name="saveFunc">Функция записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> == <c>null</c> или
            <paramref name="xmlWriterSettings"/> == <c>null</c> или
            <paramref name="saveFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.SerializeTo(System.String,System.Action{Mallenom.Storage.IObjectStorageWriter})">
            <summary>Сериализовать данные в файл.</summary>
            <param name="fileName">Имя файла.</param>
            <param name="saveFunc">Функция записи данных в хранилище.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> == <c>null</c> или
            <paramref name="saveFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.DeserializeFrom(System.IO.Stream,Mallenom.Storage.Xml.IXmlReaderContext,System.Action{Mallenom.Storage.IObjectStorageReader})">
            <summary>Загрузить данные из потока.</summary>
            <param name="stream">Поток.</param>
            <param name="context">Контекст XML-десериализатора.</param>
            <param name="loadFunc">Функция загрузки данных из хранилища.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> == <c>null</c> или
            <paramref name="context"/> == <c>null</c> или
            <paramref name="loadFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.DeserializeFrom(System.IO.Stream,System.Action{Mallenom.Storage.IObjectStorageReader})">
            <summary>Загрузить данные из потока.</summary>
            <param name="stream">Поток.</param>
            <param name="loadFunc">Функция загрузки данных из хранилища.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> == <c>null</c> или
            <paramref name="loadFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.DeserializeFrom``1(System.IO.Stream,Mallenom.Storage.Xml.IXmlReaderContext,System.Func{Mallenom.Storage.IObjectStorageReader,``0})">
            <summary>Загрузить данные из потока.</summary>
            <typeparam name="T">Тип загружаемых данных.</typeparam>
            <param name="stream">Поток.</param>
            <param name="context">Контекст XML-десериализатора.</param>
            <param name="loadFunc">Функция загрузки данных из хранилища.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> == <c>null</c> или
            <paramref name="context"/> == <c>null</c> или
            <paramref name="loadFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.DeserializeFrom``1(System.IO.Stream,System.Func{Mallenom.Storage.IObjectStorageReader,``0})">
            <summary>Загрузить данные из потока.</summary>
            <typeparam name="T">Тип загружаемых данных.</typeparam>
            <param name="stream">Поток.</param>
            <param name="loadFunc">Функция загрузки данных из хранилища.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> == <c>null</c> или
            <paramref name="loadFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.DeserializeFrom(System.String,Mallenom.Storage.Xml.IXmlReaderContext,System.Action{Mallenom.Storage.IObjectStorageReader})">
            <summary>Загрузить данные из файла.</summary>
            <param name="fileName">Имя фала.</param>
            <param name="context">Контекст XML-десериализатора.</param>
            <param name="loadFunc">Функция загрузки данных из хранилища.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> == <c>null</c> или
            <paramref name="context"/> == <c>null</c> или
            <paramref name="loadFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.DeserializeFrom(System.String,System.Action{Mallenom.Storage.IObjectStorageReader})">
            <summary>Загрузить данные из файла.</summary>
            <param name="fileName">Имя фала.</param>
            <param name="loadFunc">Функция загрузки данных из хранилища.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> == <c>null</c> или
            <paramref name="loadFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.DeserializeFrom``1(System.String,Mallenom.Storage.Xml.IXmlReaderContext,System.Func{Mallenom.Storage.IObjectStorageReader,``0})">
            <summary>Загрузить данные из файла.</summary>
            <typeparam name="T">Тип загружаемых данных.</typeparam>
            <param name="fileName">Имя файла.</param>
            <param name="context">Контекст XML-десериализатора.</param>
            <param name="loadFunc">Функция загрузки данных из хранилища.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> == <c>null</c> или
            <paramref name="context"/> == <c>null</c> или
            <paramref name="loadFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.XmlDataFormat.DeserializeFrom``1(System.String,System.Func{Mallenom.Storage.IObjectStorageReader,``0})">
            <summary>Загрузить данные из файла.</summary>
            <typeparam name="T">Тип загружаемых данных.</typeparam>
            <param name="fileName">Имя файла.</param>
            <param name="loadFunc">Функция загрузки данных из хранилища.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> == <c>null</c> или
            <paramref name="loadFunc"/> == <c>null</c>.
            </exception>
        </member>
        <member name="T:Mallenom.Storage.Xml.DelegateXmlComplexReader`1">
            <summary>Обертка функции десериализации объекта из XML-элемента.</summary>
            <typeparam name="T">Тип десериализуемого объекта.</typeparam>
        </member>
        <member name="F:Mallenom.Storage.Xml.DelegateXmlComplexReader`1._read">
            <summary>Функция десериализации объекта из XML-элемента.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.DelegateXmlComplexReader`1.#ctor(System.Func{System.Xml.Linq.XElement,`0})">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.DelegateXmlComplexReader`1"/>.</summary>
            <param name="read">Функция десериализации объекта из XML-элемента.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="read"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.DelegateXmlComplexReader`1.Read(System.Xml.Linq.XElement)">
            <summary>Десериализует объект.</summary>
            <param name="element">XML-элемент, содержащий сериализованный объект.</param>
            <returns>Десериализованный объект.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.DelegateXmlComplexWriter`1">
            <summary>Объертка функции сериализации объекта в XML.</summary>
            <typeparam name="T">Тип сериализуемого объекта.</typeparam>
        </member>
        <member name="F:Mallenom.Storage.Xml.DelegateXmlComplexWriter`1._writeValue">
            <summary>Функция сериализации объекта в XML.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.DelegateXmlComplexWriter`1.#ctor(System.Action{System.Xml.XmlWriter,`0})">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.DelegateXmlComplexWriter`1"/>.</summary>
            <param name="writeValue">Функция сериализации объекта в XML.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writeValue"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.DelegateXmlComplexWriter`1.Write(System.Xml.XmlWriter,`0)">
            <summary>Сериализовать объект.</summary>
            <param name="writer">XML-writer.</param>
            <param name="value">Сериализуемый объект.</param>
        </member>
        <member name="T:Mallenom.Storage.Xml.DelegateXmlPrimitiveReader`1">
            <summary>Обертка функции десериализации примтива из строки.</summary>
            <typeparam name="T">Тип десериализуемого примтива.</typeparam>
        </member>
        <member name="F:Mallenom.Storage.Xml.DelegateXmlPrimitiveReader`1._parse">
            <summary>Функция десериализации примтива из строки.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.DelegateXmlPrimitiveReader`1.#ctor(System.Func{System.String,`0})">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.DelegateXmlPrimitiveReader`1"/>.</summary>
            <param name="parse">Функция десериализации примтива из строки.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parse"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.DelegateXmlPrimitiveReader`1.Read(System.String)">
            <summary>Десериализует примитив.</summary>
            <param name="xmlString">Строка, содержащая сериализованный примитив.</param>
            <returns>Десериализованный примитив.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.DelegateXmlPrimitiveWriter`1">
            <summary>Обертка функции сериализации примитива.</summary>
            <typeparam name="T">Тип сериализуемого примитива.</typeparam>
        </member>
        <member name="F:Mallenom.Storage.Xml.DelegateXmlPrimitiveWriter`1._valueToString">
            <summary>Функция сериализации примитива в строку.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.DelegateXmlPrimitiveWriter`1.#ctor(System.Func{`0,System.String})">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.DelegateXmlPrimitiveWriter`1"/>.</summary>
            <param name="valueToString">Функция сериализации примитива в строку.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueToString"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.DelegateXmlPrimitiveWriter`1.ToXmlString(`0)">
            <summary>Сериализовать примитив.</summary>
            <param name="value">Сериализуемый примитив.</param>
            <returns>Строка, содержащая сериализованный примитив.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlComplexReader">
            <summary>Интерфейс десериализатора объекта определенного типа.</summary>
        </member>
        <member name="P:Mallenom.Storage.Xml.IXmlComplexReader.Type">
            <summary>Возвращает тип десериализуемого объекта.</summary>
            <value>Тип десериализуемого объекта.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlComplexReader.Read(System.Xml.Linq.XElement)">
            <summary>Десериализует объект.</summary>
            <param name="element">XML-элемент, содержащий сериализованный объект.</param>
            <returns>Десериализованный объект.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlComplexReader`1">
            <summary>Интерфейс десериализатора объекта определенного типа.</summary>
            <typeparam name="T">Тип десериализуемого объекта.</typeparam>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlComplexReader`1.Read(System.Xml.Linq.XElement)">
            <summary>Десериализует объект.</summary>
            <param name="element">XML-элемент, содержащий сериализованный объект.</param>
            <returns>Десериализованный объект.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlComplexWriter">
            <summary>Интерфейс сериализатора объекта определенного типа.</summary>
        </member>
        <member name="P:Mallenom.Storage.Xml.IXmlComplexWriter.Type">
            <summary>Возвращает тип сериализуемого объекта.</summary>
            <value>Тип сериализуемого объекта.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlComplexWriter.Write(System.Xml.XmlWriter,System.Object)">
            <summary>Сериализовать объект.</summary>
            <param name="writer">XML-writer.</param>
            <param name="value">Сериализуемый объект.</param>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlComplexWriter`1">
            <summary>Интерфейс сериализатора объекта определенного типа.</summary>
            <typeparam name="T">Тип сериализуемого объекта.</typeparam>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlComplexWriter`1.Write(System.Xml.XmlWriter,`0)">
            <summary>Сериализовать объект.</summary>
            <param name="writer">XML-writer.</param>
            <param name="value">Сериализуемый объект.</param>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlPrimitiveReader">
            <summary>Интерфейс десериализатора примитива определенного типа.</summary>
        </member>
        <member name="P:Mallenom.Storage.Xml.IXmlPrimitiveReader.Type">
            <summary>Возвращает тип десериализуемого примитива.</summary>
            <value>Тип десериализуемого примитива.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlPrimitiveReader.Read(System.String)">
            <summary>Десериализует примитив.</summary>
            <param name="xmlString">Строка, содержащая сериализованный примитив.</param>
            <returns>Десериализованный примитив.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlPrimitiveReader`1">
            <summary>Интерфейс десериализатора примитива определенного типа.</summary>
            <typeparam name="T">Тип десериализуемого примитива.</typeparam>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlPrimitiveReader`1.Read(System.String)">
            <summary>Десериализует примитив.</summary>
            <param name="xmlString">Строка, содержащая сериализованный примитив.</param>
            <returns>Десериализованный примитив.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlPrimitiveWriter">
            <summary>Интерфейс сериализатора примитива определенного типа.</summary>
        </member>
        <member name="P:Mallenom.Storage.Xml.IXmlPrimitiveWriter.Type">
            <summary>Возвращает тип сериализуемого примитива.</summary>
            <value>Тип сериализуемого примитива.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlPrimitiveWriter.ToXmlString(System.Object)">
            <summary>Сериализовать примитив.</summary>
            <param name="value">Сериализуемый примитив.</param>
            <returns>Строка, содержащая сериализованный примитив.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlPrimitiveWriter`1">
            <summary>Интерфейс сериализатора примитива определенного типа.</summary>
            <typeparam name="T">Тип сериализуемого примитива.</typeparam>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlPrimitiveWriter`1.ToXmlString(`0)">
            <summary>Сериализовать примитив.</summary>
            <param name="value">Сериализуемый примитив.</param>
            <returns>Строка, содержащая сериализованный примитив.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlReaderContext">
            <summary>Контекст XML-десериализатора.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlReaderContext.GetPrimitiveReader(System.Type)">
            <summary>Возвращает десериализатор примитива указанного типа.</summary>
            <param name="type">Тип примитива.</param>
            <returns>Десериализатор примитива.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlReaderContext.GetComplexReader(System.Type)">
            <summary>Возвращает десериализатор объекта указанного типа.</summary>
            <param name="type">Тип объекта.</param>
            <returns>Десериализатор объекта.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.IXmlWriterContext">
            <summary>Интерфейс контекста XML-сериализатора.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlWriterContext.GetPrimitiveValueWriter(System.Type)">
            <summary>Возвращает простой сериализатор для указанного типа.</summary>
            <param name="type">Тип сериализатора.</param>
            <returns>Сериализатор для указанного типа или <c>null</c>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.IXmlWriterContext.GetComplexValueWriter(System.Type)">
            <summary>Возвращает сложный сериализатор для указанного типа.</summary>
            <param name="type">Тип сериализатора.</param>
            <returns>Сериализатор для указанного типа или <c>null</c>.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.XDocumentReader">
            <summary>Читатель данных из <see cref="T:System.Xml.Linq.XDocument"/>.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XDocumentReader._context">
            <summary>Контекст XML-десериализатора.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XDocumentReader._document">
            <summary>XML-документ.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.#ctor(Mallenom.Storage.Xml.IXmlReaderContext,System.Xml.Linq.XDocument)">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XDocumentReader"/>.</summary>
            <param name="context">Контекст десериализатора.</param>
            <param name="document">XML-документ.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> == <c>null</c> или
            <paramref name="document"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XDocumentReader"/>.</summary>
            <param name="document">XML-документ.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="document"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.Storage.Xml.XDocumentReader.Context">
            <summary>Возвращает контекст XML-десериализатора.</summary>
            <value>Контекст XML-десериализатора.</value>
        </member>
        <member name="P:Mallenom.Storage.Xml.XDocumentReader.Document">
            <summary>Возвращает XML-документ.</summary>
            <value>XML-документ.</value>
        </member>
        <member name="P:Mallenom.Storage.Xml.XDocumentReader.Name">
            <summary>Возвращает имя хранилища.</summary>
            <value>Имя хранилища.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.GetChildStorage(System.String)">
            <summary>Получить дочернее хранилище с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Дочернее хранилище с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryGetChildStorage(System.String)">
            <summary>Получить дочернее хранилище с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Дочернее хранилище с именем <paramref name="name"/> или <c>null</c>, если такого не существует.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.ChildStorageExists(System.String)">
            <summary>Проверить существование дочернего хранилища с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns><c>true</c>, если дочернее хранилище с именем <paramref name="name"/> существует, иначе <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.GetChildStorages">
            <summary>Получить список дочерних хранилищ.</summary>
            <returns>Список дочерних хранилищ.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.ReadAttribute``1(System.String)">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <returns>Значение атрибута с именем <paramref name="name"/>.</returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.ReadAttribute(System.Type,System.String)">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <returns>Значение атрибута с именем <paramref name="name"/>.</returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.ReadParameter``1(System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра.</returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.ReadParameter(System.Type,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра.</returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.ReadParameter``1(System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>Значение параметра.</returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.ReadParameter(System.Type,System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>Значение параметра.</returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadAttribute``1(System.String)">
            <summary>
            Считать значение атрибута.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <c>default(T)</c>,
            если прочитать значение атрибута не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadAttribute``1(System.String,``0)">
            <summary>
            Считать значение атрибута.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <paramref name="defaultValue"/>,
            если прочитать значение атрибута не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadAttribute``1(System.String,System.Func{``0})">
            <summary>
            Считать значение атрибута.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter``1(System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <returns>
            Значение параметра или <c>default(T)</c>, если считать значение не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter``1(System.String,``0)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter``1(System.String,System.Func{``0})">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter``1(System.String,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>
            Значение параметра, или <c>default(T)</c>, если считать значение не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter``1(System.String,System.String,``0)">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter``1(System.String,System.String,System.Func{``0})">
            <summary>
            Получить значение параметра.
            </summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadAttribute(System.Type,System.String)">
            <summary>
            Считать значение атрибута.
            </summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <c>null</c>,
            если считать значение не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadAttribute(System.Type,System.String,System.Object)">
            <summary>
            Считать значение атрибута.
            </summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadAttribute(System.Type,System.String,System.Func{System.Object})">
            <summary>
            Считать значение атрибута.
            </summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter(System.Type,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>
            Значение параметра, или <с>null</с>,
            если считать значение параметра не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter(System.Type,System.String,System.Object)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter(System.Type,System.String,System.Func{System.Object})">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter(System.Type,System.String,System.String)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>
            Значение параметра, или <с>null</с>,
            если считать значение параметра не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter(System.Type,System.String,System.String,System.Object)">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.TryReadParameter(System.Type,System.String,System.String,System.Func{System.Object})">
            <summary>
            Получить значение параметра.
            </summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
            <remarks>Не поддерживается.</remarks>
            <exception cref="T:System.NotSupportedException">Метод не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XDocumentReader.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.XElementReader">
            <summary>Читатель данных из <see cref="T:System.Xml.Linq.XElement"/>.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XElementReader._context">
            <summary>Контекст XML-десериализатора.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XElementReader._element">
            <summary>XML-элемент.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.#ctor(Mallenom.Storage.Xml.IXmlReaderContext,System.Xml.Linq.XElement)">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XElementReader"/>.</summary>
            <param name="context">Контекст XML-десериализатора.</param>
            <param name="element">XML-элемент.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> == <c>null</c> или
            <paramref name="element"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.#ctor(System.Xml.Linq.XElement)">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XElementReader"/>.</summary>
            <param name="element">XML-элемент.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.Storage.Xml.XElementReader.Context">
            <summary>Возвращает контекст XML-десериализатора.</summary>
            <value>Контекст XML-десериализатора.</value>
        </member>
        <member name="P:Mallenom.Storage.Xml.XElementReader.Element">
            <summary>Возвращает XML-элемент, представленный данным <see cref="T:Mallenom.Storage.Xml.XElementReader"/>.</summary>
            <value>XML-элемент, представленный данным <see cref="T:Mallenom.Storage.Xml.XElementReader"/>.</value>
        </member>
        <member name="P:Mallenom.Storage.Xml.XElementReader.Name">
            <summary>Возвращает имя хранилища.</summary>
            <value>Имя хранилища.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.GetChildStorage(System.String)">
            <summary>Получить дочернее хранилище с именем <paramref name="name"/>.</summary>
            <param name="name">имя дочернего хранилища.</param>
            <returns>Дочернее хранилище с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryGetChildStorage(System.String)">
            <summary>Получить дочернее хранилище с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Дочернее хранилище с именем <paramref name="name"/> или <c>null</c>, если такого не существует.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ChildStorageExists(System.String)">
            <summary>Проверить существование дочернего хранилища с именем <paramref name="name"/>.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns><c>true</c>, если дочернее хранилище с именем <paramref name="name"/> существует, иначе <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.GetChildStorages">
            <summary>Получить список дочерних хранилищ.</summary>
            <returns>Список дочерних хранилищ.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadAttribute``1(System.Xml.Linq.XAttribute)">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="attribute">Атрибут.</param>
            <returns>Значение атрибута <paramref name="attribute"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadAttribute(System.Type,System.Xml.Linq.XAttribute)">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="attribute">Атрибут.</param>
            <returns>Значение атрибута <paramref name="attribute"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadParameter``1(System.Xml.Linq.XElement,System.Xml.Linq.XAttribute)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="element">Элемент, хранящий параметр.</param>
            <param name="attribute">Атрибут, хранящий значение параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadParameter(System.Type,System.Xml.Linq.XElement,System.Xml.Linq.XAttribute)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="element">Элемент, хранящий параметр.</param>
            <param name="attribute">Атрибут, хранящий значение параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadAttribute``1(System.String)">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <returns>Значение атрибута с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadAttribute``1(System.String)">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <c>default(T)</c>,
            если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadAttribute``1(System.String,``0)">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <paramref name="defaultValue"/>,
            если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadAttribute``1(System.String,System.Func{``0})">
            <summary>Считать значение атрибута.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadAttribute(System.Type,System.String)">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <returns>Значение атрибута с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadAttribute(System.Type,System.String)">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <c>null</c>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadAttribute(System.Type,System.String,System.Object)">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadAttribute(System.Type,System.String,System.Func{System.Object})">
            <summary>Считать значение атрибута.</summary>
            <param name="type">Тип значения атрибута.</param>
            <param name="name">Имя атрибута.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadParameter``1(System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter``1(System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра или <c>default(T)</c>, если считать значение не удалось.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter``1(System.String,``0)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter``1(System.String,System.Func{``0})">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение атрибута с именем <paramref name="name"/> или значение,
            вычисленное функцией <paramref name="defaultValue"/>, если прочитать значение атрибута не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadParameter(System.Type,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter(System.Type,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <returns>
            Значение параметра, или <с>null</с>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter(System.Type,System.String,System.Object)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter(System.Type,System.String,System.Func{System.Object})">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadParameter(System.Type,System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter(System.Type,System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>
            Значение параметра, или <с>null</с>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter(System.Type,System.String,System.String,System.Object)">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter(System.Type,System.String,System.String,System.Func{System.Object})">
            <summary>Получить значение параметра.</summary>
            <param name="type">Тип значения параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение параметра не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ReadParameter``1(System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter``1(System.String,System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <returns>
            Значение параметра, или <c>default(T)</c>, если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter``1(System.String,System.String,``0)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
            Значение параметра, или <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.TryReadParameter``1(System.String,System.String,System.Func{``0})">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибута, хранящего значение.</param>
            <param name="defaultValue">Функция, возвращающая значение по умолчанию.</param>
            <returns>
            Значение параметра, или значение, вычисленное функцией <paramref name="defaultValue"/>,
            если считать значение не удалось.
            </returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XElementReader.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.XmlComplexReader`1">
            <summary>XML-десериализатор объектов.</summary>
            <typeparam name="T">Тип десериализуемого объекта.</typeparam>
        </member>
        <member name="P:Mallenom.Storage.Xml.XmlComplexReader`1.Type">
            <summary>Возвращает тип десериализуемого объекта.</summary>
            <value>Тип десериализуемого объекта.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlComplexReader`1.Mallenom#Storage#Xml#IXmlComplexReader#Read(System.Xml.Linq.XElement)">
            <summary>Десериализует объект.</summary>
            <param name="element">XML-элемент, содержащий сериализованный объект.</param>
            <returns>Десериализованный объект.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlComplexReader`1.Read(System.Xml.Linq.XElement)">
            <summary>Десериализует объект.</summary>
            <param name="element">XML-элемент, содержащий сериализованный объект.</param>
            <returns>Десериализованный объект.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.XmlComplexWriter`1">
            <summary>Сериализатор объекта типа <typeparamref name="T"/>.</summary>
            <typeparam name="T">Тип сериализуемого объекта.</typeparam>
        </member>
        <member name="P:Mallenom.Storage.Xml.XmlComplexWriter`1.Type">
            <summary>Возвращает тип сериализуемого объекта.</summary>
            <value>Тип сериализуемого объекта.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlComplexWriter`1.Mallenom#Storage#Xml#IXmlComplexWriter#Write(System.Xml.XmlWriter,System.Object)">
            <summary>Сериализовать объект.</summary>
            <param name="writer">XML-writer.</param>
            <param name="value">Сериализуемый объект.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlComplexWriter`1.Write(System.Xml.XmlWriter,`0)">
            <summary>Сериализовать объект.</summary>
            <param name="writer">XML-writer.</param>
            <param name="value">Сериализуемый объект.</param>
        </member>
        <member name="T:Mallenom.Storage.Xml.XmlPrimitiveReader`1">
            <summary>XML-десериализатор примитивов.</summary>
            <typeparam name="T">Тип десериализуемых примитивов.</typeparam>
        </member>
        <member name="P:Mallenom.Storage.Xml.XmlPrimitiveReader`1.Type">
            <summary>Возвращает тип десериализуемого примитива.</summary>
            <value>Тип десериализуемого примитива.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlPrimitiveReader`1.Mallenom#Storage#Xml#IXmlPrimitiveReader#Read(System.String)">
            <summary>Десериализует примитив.</summary>
            <param name="xmlString">Строка, содержащая сериализованный примитив.</param>
            <returns>Десериализованный примитив.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlPrimitiveReader`1.Read(System.String)">
            <summary>Десериализует примитив.</summary>
            <param name="xmlString">Строка, содержащая сериализованный примитив.</param>
            <returns>Десериализованный примитив.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.XmlPrimitiveWriter`1">
            <summary>Сериализатор примитива типа <typeparamref name="T"/>.</summary>
            <typeparam name="T">Тип сериализуемого примитива.</typeparam>
        </member>
        <member name="P:Mallenom.Storage.Xml.XmlPrimitiveWriter`1.Type">
            <summary>Возвращает тип сериализуемого примитива.</summary>
            <value>Тип сериализуемого примитива.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlPrimitiveWriter`1.Mallenom#Storage#Xml#IXmlPrimitiveWriter#ToXmlString(System.Object)">
            <summary>Сериализовать примитив.</summary>
            <param name="value">Сериализуемый примитив.</param>
            <returns>Строка, содержащая сериализованный примитив.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlPrimitiveWriter`1.ToXmlString(`0)">
            <summary>Сериализовать примитив.</summary>
            <param name="value">Сериализуемый примитив.</param>
            <returns>Строка, содержащая сериализованный примитив.</returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.XmlReaderContext">
            <summary>Контекст XML-десериализатора.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XmlReaderContext._default">
            <summary>Контекст XML-десериализатора по умолчанию.</summary>
        </member>
        <member name="P:Mallenom.Storage.Xml.XmlReaderContext.Default">
            <summary>Возвращает контекст XML-десериализатора по умолчанию.</summary>
            <value>Контекст XML-десериализатора по умолчанию.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.#cctor">
            <summary>Инициализация типа <see cref="T:Mallenom.Storage.Xml.XmlReaderContext"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.CreateReader``1(System.Func{System.String,``0})">
            <summary>Создает десериализатор примитива.</summary>
            <typeparam name="T">Тип примитива.</typeparam>
            <param name="parse">Функция десериализации примитива из строки.</param>
            <returns>Десериализатор примитива.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.CreateReader``1(System.Func{System.Xml.Linq.XElement,``0})">
            <summary>Создает десериализатор объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="parse">Функция десериализации объекта из XML-элемента.</param>
            <returns>Десериализатор объекта.</returns>
        </member>
        <member name="F:Mallenom.Storage.Xml.XmlReaderContext._primitiveReaders">
            <summary>Словарь десериализаторов примитивов.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XmlReaderContext._complexReaders">
            <summary>Словарь десериализаторов объектов.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.#ctor">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XmlReaderContext"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.#ctor(System.Collections.Generic.Dictionary{System.Type,Mallenom.Storage.Xml.IXmlPrimitiveReader},System.Collections.Generic.Dictionary{System.Type,Mallenom.Storage.Xml.IXmlComplexReader})">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XmlReaderContext"/>.</summary>
            <param name="primitiveReaders">Словарь десериализаторов примитивов.</param>
            <param name="complexReaders">Словарь десериализаторов объектов.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="primitiveReaders"/> == <c>null</c> или
            <paramref name="complexReaders"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.#ctor(Mallenom.Storage.Xml.XmlReaderContext)">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XmlReaderContext"/>.</summary>
            <param name="cloneFrom">Контекст, из которго будут скопированы десериализаторы.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloneFrom"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.SetValueReader``1(Mallenom.Storage.Xml.IXmlPrimitiveReader{``0})">
            <summary>Устанавливает парсер для указанного типа примитива.</summary>
            <typeparam name="T">Тип примитива.</typeparam>
            <param name="reader">Парсер для примитива.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.SetValueReader``1(Mallenom.Storage.Xml.IXmlComplexReader{``0})">
            <summary>Устанавливает парсер для указанного типа объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="reader">Парсер для объекта.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.SetValueReader``1(System.Func{System.Xml.Linq.XElement,``0})">
            <summary>Устанавливает парсер для указанного типа объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="reader">Парсер для объекта.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.SetValueReader``1(System.Func{System.String,``0})">
            <summary>Устанавливает парсер для указанного типа примитива.</summary>
            <typeparam name="T">Тип примитива.</typeparam>
            <param name="reader">Парсер для примитива.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.GetPrimitiveReader(System.Type)">
            <summary>Возвращает десериализатор примитива указанного типа.</summary>
            <param name="type">Тип примитива.</param>
            <returns>Десериализатор примитива.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.GetComplexReader(System.Type)">
            <summary>Возвращает десериализатор объекта указанного типа.</summary>
            <param name="type">Тип объекта.</param>
            <returns>Десериализатор объекта.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.Clone">
            <summary>Создание копии объекта.</summary>
            <returns>Копия объекта.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlReaderContext.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.XmlWriterContext">
            <summary>Контекст XML-сериализатора.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XmlWriterContext._default">
            <summary>Контекст по умолчанию.</summary>
        </member>
        <member name="P:Mallenom.Storage.Xml.XmlWriterContext.Default">
            <summary>Возвращает контекст по умолчанию.</summary>
            <value>Контекст по умолчанию.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.#cctor">
            <summary>Инициализация типа <see cref="T:Mallenom.Storage.Xml.XmlWriterContext"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.CreateWriter``1(System.Func{``0,System.String})">
            <summary>Создать сериализатор примитива.</summary>
            <typeparam name="T">Тип сериализуемого примитива.</typeparam>
            <param name="valueToString">Функция сериализации примитива в строку.</param>
            <returns>Сериализатор примитива.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.CreateWriter``1(System.Action{System.Xml.XmlWriter,``0})">
            <summary>Создать сериализатор объекта.</summary>
            <typeparam name="T">Тип сериализуемого объекта.</typeparam>
            <param name="writeValue">Функция сохранения объекта в XML.</param>
            <returns>Сериализатор объекта.</returns>
        </member>
        <member name="F:Mallenom.Storage.Xml.XmlWriterContext._primitiveValueWriters">
            <summary>Словарь сериализаторов простых типов.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XmlWriterContext._complexValueWriters">
            <summary>Словарь сериализаторов сложных типов.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.#ctor">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XmlWriterContext"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.#ctor(System.Collections.Generic.Dictionary{System.Type,Mallenom.Storage.Xml.IXmlPrimitiveWriter},System.Collections.Generic.Dictionary{System.Type,Mallenom.Storage.Xml.IXmlComplexWriter})">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XmlWriterContext"/>.</summary>
            <param name="primitiveValueWriters">Словарь простых сериализаторов.</param>
            <param name="complexValueWriters">Словарь сложных сериализаторов.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="primitiveValueWriters"/> == <c>null</c> или
            <paramref name="complexValueWriters"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.#ctor(Mallenom.Storage.Xml.XmlWriterContext)">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XmlWriterContext"/>.</summary>
            <param name="cloneFrom">Контекст, из которого будут скопированы сериализаторы.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloneFrom"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.SetValueWriter``1(Mallenom.Storage.Xml.IXmlPrimitiveWriter{``0})">
            <summary>Устанавливает сериализатор простого типа.</summary>
            <typeparam name="T">Сериализуемый тип.</typeparam>
            <param name="valueWriter">Сериализатор типа.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.SetValueWriter``1(System.Func{``0,System.String})">
            <summary>Устанавливает сериализатор простого типа.</summary>
            <typeparam name="T">Сериализуемый тип.</typeparam>
            <param name="valueToString">Функция, представляющая значение типа <typeparamref name="T"/> в виде строки.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueToString"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.SetValueWriter``1(Mallenom.Storage.Xml.IXmlComplexWriter{``0})">
            <summary>Устанавливает сериализатор сложного типа.</summary>
            <typeparam name="T">Сериализуемый тип.</typeparam>
            <param name="valueWriter">Сериализатор типа.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.SetValueWriter``1(System.Action{System.Xml.XmlWriter,``0})">
            <summary>Устанавливает сериализатор сложного типа.</summary>
            <typeparam name="T">Сериализуемый тип.</typeparam>
            <param name="writeValue">Функция, сохраняющая значение указанного типа.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writeValue"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.GetPrimitiveValueWriter(System.Type)">
            <summary>Возвращает простой сериализатор для указанного типа.</summary>
            <param name="type">Тип сериализатора.</param>
            <returns>Сериализатор для указанного типа или <c>null</c>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.GetComplexValueWriter(System.Type)">
            <summary>Возвращает сложный сериализатор для указанного типа.</summary>
            <param name="type">Тип сериализатора.</param>
            <returns>Сериализатор для указанного типа или <c>null</c>.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.Clone">
            <summary>Создает копию объекта.</summary>
            <returns>Копия объекта.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterContext.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Mallenom.Storage.Xml.XmlWriterEx">
            <summary>Вспомогательные методы для <see cref="T:System.Xml.XmlWriter"/>.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.DateTime)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.Decimal)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.Double)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.Single)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.Int32)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.Int64)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteAttribute(System.Xml.XmlWriter,System.String,System.String)">
            <summary>Записать значение в атрибут.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.Boolean)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.DateTime)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.Decimal)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.Double)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.Single)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.Int32)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.Int64)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.Object)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>Записать значение в атрибут элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="attribute">Имя атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.DateTime)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.Decimal)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.Double)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.Single)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.Int32)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.Int64)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterEx.WriteElement(System.Xml.XmlWriter,System.String,System.String)">
            <summary>Записать значение в атрибут "Value" элемента.</summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/>.</param>
            <param name="element">Имя элемента.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="T:Mallenom.Storage.Xml.XmlWriterStorage">
            <summary>Писатель данных в хранилище на основе <see cref="P:Mallenom.Storage.Xml.XmlWriterStorage.XmlWriter"/>.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XmlWriterStorage._context">
            <summary>Контекст сериализатора.</summary>
        </member>
        <member name="F:Mallenom.Storage.Xml.XmlWriterStorage._writer">
            <summary>XML-writer.</summary>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.#ctor(Mallenom.Storage.Xml.IXmlWriterContext,System.Xml.XmlWriter)">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XmlWriterStorage"/>.</summary>
            <param name="context">Контекст сериализатора.</param>
            <param name="writer">Писатель XML-данных в поток.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> == <c>null</c> или
            <paramref name="writer"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.#ctor(System.Xml.XmlWriter)">
            <summary>Создание <see cref="T:Mallenom.Storage.Xml.XmlWriterStorage"/>.</summary>
            <param name="writer">Писатель XML-данных в поток.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> == <c>null</c>.</exception>
        </member>
        <member name="P:Mallenom.Storage.Xml.XmlWriterStorage.Context">
            <summary>Возвращает контекст сериализатора.</summary>
            <value>Контекст сериализатора.</value>
        </member>
        <member name="P:Mallenom.Storage.Xml.XmlWriterStorage.XmlWriter">
            <summary>Возвращает XmlWriter, используемый для записи.</summary>
            <value>XmlWriter, используемый для записи.</value>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.BeginChildObject(System.String)">
            <summary>Начать запись дочернего хранилища.</summary>
            <param name="name">Имя дочернего хранилища.</param>
            <returns>Созданное дочернее хранилище.</returns>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.EndChildObject(Mallenom.Storage.IObjectStorageWriter)">
            <summary>Завершить запись в дочернее хранилище.</summary>
            <param name="writer">Дочернее хранилище.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.WriteAttribute``1(System.String,``0)">
            <summary>Записать атрибут объекта.</summary>
            <typeparam name="T">Тип значения атрибута.</typeparam>
            <param name="name">Имя.</param>
            <param name="data">Значение атрибута.</param>
            <remarks>Атрибуты могут хранить только атомарные значения.</remarks>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.WriteAttribute(System.String,System.Object)">
            <summary>Записать атрибут объекта.</summary>
            <param name="name">Имя.</param>
            <param name="data">Значение атрибута.</param>
            <remarks>Атрибуты могут хранить только атомарные значения.</remarks>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.WriteParameter``1(System.String,``0)">
            <summary>Записать значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.WriteParameter(System.String,System.Object)">
            <summary>Записать значение параметра.</summary>
            <param name="name">Имя параметра.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.WriteParameter``1(System.String,System.String,``0)">
            <summary>Записать значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибут, в котором будет храниться значение.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Storage.Xml.XmlWriterStorage.WriteParameter(System.String,System.String,System.Object)">
            <summary>Записать значение параметра.</summary>
            <param name="name">Имя параметра.</param>
            <param name="attribute">Имя атрибут, в котором будет храниться значение.</param>
            <param name="data">Значение параметра.</param>
        </member>
        <member name="T:Mallenom.Systems.CmdLineAnalyzer">
            <summary>Анализатор командной строки.</summary>
        </member>
        <member name="F:Mallenom.Systems.CmdLineAnalyzer._supportParameters">
            <summary>Возможные параметры.</summary>
        </member>
        <member name="F:Mallenom.Systems.CmdLineAnalyzer._paramInLine">
            <summary>Параметры, найденые в командной строке.</summary>
        </member>
        <member name="M:Mallenom.Systems.CmdLineAnalyzer.Analyze(System.String[])">
            <summary>Проанализировать командную строку.</summary>
            <param name="cmdLineArgs"></param>
        </member>
        <member name="M:Mallenom.Systems.CmdLineAnalyzer.Analyze(System.String)">
            <summary>Проанализировать командную строку.</summary>
            <param name="cmdLine"></param>
        </member>
        <member name="M:Mallenom.Systems.CmdLineAnalyzer.AddParameter(Mallenom.Systems.ICmdLineParameter)">
            <summary>Добавить шаболон анализируемого параметра.</summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Mallenom.Systems.CmdLineParameter">
            <summary>Параметр коммандной строки.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.ConfigValueDictionary`2">
            <summary>Вспомогательный класс для сохранения словарей в конфигурации.</summary>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueDictionary`2.DictionaryPair`2.SaveState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить состояние объекта.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueDictionary`2.DictionaryPair`2.LoadState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузить состояние объекта.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueDictionary`2.#ctor(Mallenom.Systems.Config.PropertyBag)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigValueDictionary`2"/>.</summary>
            <param name="pb"><see cref="T:Mallenom.Systems.Config.PropertyBag"/>, хранящий <see cref="T:Mallenom.Systems.Config.ConfigValueDictionary`2"/>.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueDictionary`2.#ctor">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigValueDictionary`2"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigValueDictionary`2"/>.</summary>
            <param name="list">Сохраняемый словарь.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.ConfigValueDictionary`2.Dictionary">
            <summary>Сохраняемый или загруженный словарь.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueDictionary`2.SaveState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить состояние объекта.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
            <exception cref="T:System.ArgumentNullEception"><paramref name="propertyBag"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueDictionary`2.LoadState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузить состояние объекта.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
            <exception cref="T:System.ArgumentNullEception"><paramref name="propertyBag"/> == null.</exception>
        </member>
        <member name="T:Mallenom.Systems.Config.ConfigValueList`1">
            <summary>Вспомогательный класс для сохранения списков в хранилище.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueList`1.#ctor(Mallenom.Systems.Config.PropertyBag)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigValueList`1"/>.</summary>
            <param name="pb"><see cref="T:Mallenom.Systems.Config.PropertyBag"/>, хранящий <see cref="T:Mallenom.Systems.Config.ConfigValueList`1"/>.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueList`1.#ctor">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigValueList`1"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigValueList`1"/>.</summary>
            <param name="list">Сохраняемый список.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.ConfigValueList`1.List">
            <summary>Сохраняемый или загруженный список.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueList`1.SaveState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить состояние объекта.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
            <exception cref="T:System.ArgumentNullEception"><paramref name="propertyBag"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigValueList`1.LoadState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузить состояние объекта.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
            <exception cref="T:System.ArgumentNullEception"><paramref name="propertyBag"/> == null.</exception>
        </member>
        <member name="T:Mallenom.Systems.Config.ConfigAtom">
            <summary>Описание атомарной части сериализуемого объекта.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.ConfigAtom.Type">
            <summary>Возвращает тип значения.</summary>
            <value>Тип значения.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.ConfigAtom.DefaultValue">
            <summary>Возвращает значение по умолчанию.</summary>
            <value>Значение по умолчанию.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.ConfigAtom.Name">
            <summary>Возвращает имя параметра.</summary>
            <value>Имя параметра.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.ConfigAtom.Value">
            <summary>
            Возвращает/устанавливает значение параметра.
            </summary>
            <value>Значение параметра.</value>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigAtom.SetDefaultValue">
            <summary>Установить значение по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigAtom.SaveState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить значение параметра.</summary>
            <param name="propertyBag">Контейнер параметров.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigAtom.LoadState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузить значение параметра.</summary>
            <param name="propertyBag">Контейнер параметров.</param>
        </member>
        <member name="T:Mallenom.Systems.Config.ConfigurationParameterAttribute">
            <summary>Атрибут для обозначения сериализуемого поля или свойства.</summary>
            <remarks>Игнорируется для static-полей и свойств.</remarks>
            <seealso cref="T:Mallenom.Systems.Config.ConfigurationValueAttribute"/>
        </member>
        <member name="P:Mallenom.Systems.Config.ConfigurationParameterAttribute.Default">
            <summary>Значение по умолчанию.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationParameterAttribute.GetDefaultValue(System.Type)">
            <summary>Получить значение по умолчанию.</summary>
            <param name="type">Тип значения.</param>
            <returns>Значение по умолчанию.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.ConfigurationValueAttribute">
            <summary>Атрибут для указания внешнего сериализатора типа.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationValueAttribute.#ctor(Mallenom.Systems.Config.IValueSerializer)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigurationValueAttribute"/>.</summary>
            <param name="serializer">Сериализатор.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationValueAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigurationValueAttribute"/> (будет использован сериализатор по умолчанию).</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationValueAttribute.#ctor(System.Type)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigurationValueAttribute"/>.</summary>
            <param name="serializerType">Тип сериализатора.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.ConfigurationValueAttribute.Serializer">
            <summary>Сериализатор.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationValueAttribute.LoadObjectState``1(``0,Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="obj">Объект.</param>
            <param name="state">Состояние.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationValueAttribute.SaveObjectState``1(``0,Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="obj">Объект.</param>
            <param name="state">Состояние.</param>
        </member>
        <member name="T:Mallenom.Systems.Config.DefaultValueSerializer">
            <summary>Сериализатор по умолчанию.</summary>
            <remarks>Сохраняет и загружает свойства и поля, помеченные <see cref="T:Mallenom.Systems.Config.ConfigurationParameterAttribute"/>.</remarks>
        </member>
        <member name="M:Mallenom.Systems.Config.DefaultValueSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mallenom.Systems.Config.DefaultValueSerializer"/> class.
            </summary>
        </member>
        <member name="T:Mallenom.Systems.Config.FieldConfigAtom">
            <summary>Поле как часть сериализуемого объекта.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.FieldConfigAtom.#ctor(System.Object,System.Reflection.FieldInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mallenom.Systems.Config.FieldConfigAtom"/> class.
            </summary>
            <param name="object">Сериализуемый объект.</param>
            <param name="fieldInfo">Описание поля объекта.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.FieldConfigAtom.Type">
            <summary>
            Возвращает тип значения.
            </summary>
            <value>Тип значения.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.FieldConfigAtom.DefaultValue">
            <summary>
            Возвращает значение по умолчанию.
            </summary>
            <value>Значение по умолчанию.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.FieldConfigAtom.Name">
            <summary>
            Возвращает имя параметра.
            </summary>
            <value>Имя параметра.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.FieldConfigAtom.Value">
            <summary>
            Возвращает/устанавливает значение параметра.
            </summary>
            <value>Значение параметра.</value>
        </member>
        <member name="T:Mallenom.Systems.Config.IValueSerializer">
            <summary>Объект, выполняющий сериализацию другого объекта.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IValueSerializer.CreateSerializationProxy(System.Object)">
            <summary>Создать объект для сериализации <paramref name="obj"/>.</summary>
            <param name="obj">Объект, который необходимо сериализовать.</param>
            <returns><see cref="T:Mallenom.Systems.Config.IConfigurationValue"/>.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.IValueSerializer.CanCreateObject">
            <summary>Метод <see cref="M:Mallenom.Systems.Config.IValueSerializer.CreateObject(Mallenom.Systems.Config.PropertyBag)"/> поддерживается.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IValueSerializer.CreateObject(Mallenom.Systems.Config.PropertyBag)">
            <summary>Десериализовать объект.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyBag"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.IValueSerializer.InitObjectDefaults(System.Object)">
            <summary>Инициализировать параметры объекта по умолчанию.</summary>
            <param name="obj">Объект, который необходимо инициализировать.</param>
        </member>
        <member name="T:Mallenom.Systems.Config.PersistentFormAttribute">
            <summary>Атрибут для формы, сохраняющей свои размеры и позицию.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.PersistentFormAttribute.#ctor">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.PersistentFormAttribute"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.PersistentFormAttribute.#ctor(System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.PersistentFormAttribute"/>.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.PropertyConfigAtom">
            <summary>Свойство как часть сериализуемого объекта.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.PropertyConfigAtom.#ctor(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mallenom.Systems.Config.FieldConfigAtom"/> class.
            </summary>
            <param name="object">Сериализуемый объект.</param>
            <param name="propertyInfo">Описание свойства объекта.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.PropertyConfigAtom.Type">
            <summary>
            Возвращает тип значения.
            </summary>
            <value>Тип значения.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.PropertyConfigAtom.DefaultValue">
            <summary>
            Возвращает значение по умолчанию.
            </summary>
            <value>Значение по умолчанию.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.PropertyConfigAtom.Name">
            <summary>
            Возвращает имя параметра.
            </summary>
            <value>Имя параметра.</value>
        </member>
        <member name="P:Mallenom.Systems.Config.PropertyConfigAtom.Value">
            <summary>
            Возвращает/устанавливает значение параметра.
            </summary>
            <value>Значение параметра.</value>
        </member>
        <member name="T:Mallenom.Systems.Config.SerializationProxy">
            <summary>Простейший прокси-сериализатор.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.SerializationProxy.#ctor(System.Collections.Generic.IEnumerable{Mallenom.Systems.Config.IConfigurationValue})">
            <summary>Initializes a new instance of the <see cref="T:Mallenom.Systems.Config.SerializationProxy"/> class.</summary>
            <param name="atoms">Список сериализуемых частей объекта, которые разделяют единственный контейнер <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="atoms"/> == <c>null</c>.</exception>
        </member>
        <member name="T:Mallenom.Systems.Config.IConfigurationValue">
            <summary>Интерфейс для объекта, определяющего собственный механизм сериализации и десериализации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfigurationValue.SaveState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить состояние объекта.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyBag"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfigurationValue.LoadState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузить состояние объекта.</summary>
            <param name="propertyBag">Хранилище параметров для объекта.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyBag"/> == null.</exception>
        </member>
        <member name="T:Mallenom.Systems.Config.PropertyBag">
            <summary>Класс, хранящий информацию об объекте, для которого определена пользовательская сериализация.</summary>
            <seealso cref="T:Mallenom.Systems.Config.IConfigurationValue"/>
            <seealso cref="T:Mallenom.Systems.Config.ConfigurationValueAttribute"/>
        </member>
        <member name="F:Mallenom.Systems.Config.PropertyBag._containedType">
            <summary>Хранимый тип.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.PropertyBag.#ctor(Mallenom.Systems.Config.Configuration,System.Type)">
            <summary>Конструктор.</summary>
            <param name="config">Конфигурация.</param>
            <param name="containedType">Тип, для которого хранятся значения параметров.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.PropertyBag.ContainedType">
            <summary>Тип, для которого хранятся значения параметров.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.PropertyBag.CreateObjectInstance">
            <summary>Десериализует упакованный объект.</summary>
            <returns>Созданный объект.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.PropertyBag.CreateObjectInstance``1">
            <summary>Десериализует упакованный объект.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <returns>Созданный объект.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.PropertyBag.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.SectionEventArgs">
            <summary>Аргументы события, связанного с секцией конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.SectionEventArgs.#ctor(Mallenom.Systems.Config.Section)">
            <summary>Конструктор.</summary>
            <param name="section">Секция.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.SectionEventArgs.Section">
            <summary>Секция.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.ParameterEventArgs">
            <summary>Аргументы события, связанного с параметром.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ParameterEventArgs.#ctor(Mallenom.Systems.Config.Parameter)">
            <summary>Конструктор.</summary>
            <param name="param">Параметр.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.ParameterEventArgs.Parameter">
            <summary>Параметр.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.ConfigurationException">
            <summary>Исключение при работе с <see cref="T:Mallenom.Systems.Config.Configuration"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationException.#ctor">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigurationException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationException.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigurationException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigurationException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.ConfigurationException"/>.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.BaseStorage`1">
            <summary>Базовый класс хранилища конфигурации.</summary>
            <typeparam name="T">Контекст сериализации.</typeparam>
        </member>
        <member name="E:Mallenom.Systems.Config.BaseStorage`1.ConfigurationUpdated">
            <summary>Происходит при обновлении хранилища извне.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.BaseStorage`1.Log">
            <summary>Лог.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.BaseStorage`1._typeHandlers">
            <summary>Словарь обработчиков сериализации.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.BaseStorage`1._typeAliases">
            <summary>Таблица синонимов типов.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.BaseStorage`1.IDeserializationResult">
            <summary>Результаты десериализации.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseStorage`1.IDeserializationResult.Value">
            <summary>Значение.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseStorage`1.IDeserializationResult.Type">
            <summary>Тип.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.BaseStorage`1.ITypeHandler">
            <summary>Интерфейс обработчика типов.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.ITypeHandler.Save(`0,System.Object)">
            <summary>Сохранить значение.</summary>
            <param name="context">Контекст.</param>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.ITypeHandler.Load(`0)">
            <summary>Загрузить значение.</summary>
            <param name="context">Контекст.</param>
            <returns>Загруженное значение.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseStorage`1.ITypeHandler.HandledType">
            <summary>Тип, для которого выполняется сериализация/десериализация.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.BaseStorage`1.BaseTypeHandler`1">
            <summary>Базовый класс обработчика типа.</summary>
            <typeparam name="THandledType">Тип, для которого выполняется сериализация/десериализация.</typeparam>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.BaseTypeHandler`1.SaveValue(`0,`1)">
            <summary>Сохранить значение.</summary>
            <param name="context">Контекст.</param>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.BaseTypeHandler`1.Save(`0,System.Object)">
            <summary>Сохранить значение.</summary>
            <param name="context">Контекст.</param>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.BaseTypeHandler`1.LoadValue(`0)">
            <summary>Загрузить значение.</summary>
            <param name="context">Контекст.</param>
            <returns>Загруженное значение.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.BaseTypeHandler`1.Load(`0)">
            <summary>Загрузить значение.</summary>
            <param name="context">Контекст.</param>
            <returns>Загруженное значение.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseStorage`1.BaseTypeHandler`1.HandledType">
            <summary>Тип, для которого выполняется сериализация/десериализация.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.#cctor">
            <summary>Статический конструктор.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.RaiseConfigurationUpdated">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Systems.Config.BaseStorage`1.ConfigurationUpdated"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.GetTypeHandler(System.Type)">
            <summary>Получить обработчик сериализации типа.</summary>
            <param name="t">Тип.</param>
            <returns><see cref="T:Mallenom.Systems.Config.BaseStorage`1.ITypeHandler"/>.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.RegisterTypeHandler(Mallenom.Systems.Config.BaseStorage{`0}.ITypeHandler)">
            <summary>Зарегистрировать обработчик сериализации типа.</summary>
            <param name="handler">Обработчик сериализации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.UregisterTypeHandler(System.Type)">
            <summary>Отменить регистрацию обработчика сериализации типа.</summary>
            <param name="t">Тип.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.UnregisterTypeHandler(Mallenom.Systems.Config.BaseStorage{`0}.ITypeHandler)">
            <summary>Отменить регистрацию обработчика сериализации типа.</summary>
            <param name="handler">Обработчик сериализации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.GetTypeByName(System.String)">
            <summary>Получить тип по его имени.</summary>
            <param name="fullName">Имя типа.</param>
            <returns>Тип.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.WrapTypeName(System.String)">
            <summary>Сократить имя типа, если для него существует синоним.</summary>
            <param name="fullName">Полное имя типа</param>
            <returns>Сокращенное имя типа (или полное, если сокращение невозможно).</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseStorage`1.CanRead">
            <summary>Хранилище поддерживает чтение.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseStorage`1.CanWrite">
            <summary>Хранилище поддерживает запись.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.Serialize(Mallenom.Systems.Config.Configuration,System.Collections.Generic.Dictionary{System.String,Mallenom.Systems.Config.Section})">
            <summary>Выполнить сериализацию конфигурации.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="sections">Словарь секций конфигурации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.Deserialize(Mallenom.Systems.Config.Configuration)">
            <summary>Выполнить десериализацию хранилища.</summary>
            <param name="configuration">Конфигурация, для которой производится десериализация.</param>
            <returns>Словарь секций хранилища.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStorage`1.SupportsSerialization(System.Type)">
            <summary>Проверка поддержки сериализации хранилищем специфического типа.</summary>
            <param name="type">Проверяемый тип.</param>
            <returns>true, если сериализация поддерживатся.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.BinarySerializationContext">
            <summary>Контекст сериализации для <see cref="T:Mallenom.Systems.Config.BinaryStreamStorage"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BinarySerializationContext.#ctor(Mallenom.Systems.Config.Configuration,System.IO.BinaryReader,Mallenom.Systems.Config.MapConfiguration,System.Int64)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.BinarySerializationContext"/>.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="readerStream"> Чтение из потока. </param>
            <param name="map">Карта кофигурации.</param>
            <param name="position">Стартовая позиция чтения.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BinarySerializationContext.#ctor(Mallenom.Systems.Config.Configuration,System.IO.BinaryWriter)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.BinarySerializationContext"/>.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="writerStream"> Запись в поток. </param>
        </member>
        <member name="P:Mallenom.Systems.Config.BinarySerializationContext.Reader">
            <summary>Чтение из потока.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BinarySerializationContext.Writer">
            <summary>Запись в поток.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BinarySerializationContext.Map">
            <summary> Карта конфигурации. </summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BinarySerializationContext.StartPosition">
            <summary> Стартовая позиция чтения. </summary>
        </member>
        <member name="T:Mallenom.Systems.Config.StreamHeader">
            <summary> Шапка данных. </summary>
        </member>
        <member name="T:Mallenom.Systems.Config.StreamHeader.ITypeHandler">
            <summary>Интерфейс обработчика типов.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.ITypeHandler.Save(Mallenom.Systems.Config.BinarySerializationContext,System.Object)">
            <summary>Сохранить значение.</summary>
            <param name="context">Контекст.</param>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.ITypeHandler.Load(Mallenom.Systems.Config.BinarySerializationContext)">
            <summary>Загрузить значение.</summary>
            <param name="context">Контекст.</param>
            <returns>Загруженное значение.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.StreamHeader.ITypeHandler.HandledType">
            <summary>Тип, для которого выполняется сериализация/десериализация.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.StreamHeader.BinaryBaseTypeHandler`1">
            <summary>Базовый класс обработчика типа.</summary>
            <typeparam name="THandledType">Тип, для которого выполняется сериализация/десериализация.</typeparam>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.BinaryBaseTypeHandler`1.SaveValue(Mallenom.Systems.Config.BinarySerializationContext,`0)">
            <summary>Сохранить значение.</summary>
            <param name="context">Контекст.</param>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.BinaryBaseTypeHandler`1.Save(Mallenom.Systems.Config.BinarySerializationContext,System.Object)">
            <summary>Сохранить значение.</summary>
            <param name="context">Контекст.</param>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.BinaryBaseTypeHandler`1.LoadValue(Mallenom.Systems.Config.BinarySerializationContext)">
            <summary>Загрузить значение.</summary>
            <param name="context">Контекст.</param>
            <returns>Загруженное значение.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.BinaryBaseTypeHandler`1.Load(Mallenom.Systems.Config.BinarySerializationContext)">
            <summary>Загрузить значение.</summary>
            <param name="context">Контекст.</param>
            <returns>Загруженное значение.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.StreamHeader.BinaryBaseTypeHandler`1.HandledType">
            <summary>Тип, для которого выполняется сериализация/десериализация.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.StreamHeader.TypeHandlers">
            <summary>Словарь обработчиков сериализации.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.StreamHeader.TypeAliases">
            <summary>Таблица синонимов типов.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.StreamHeader.Log">
            <summary>Лог.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Конструктор.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.#ctor(System.String,System.Object)">
            <summary>
            Конструктор.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.#ctor(System.String,System.Type,System.Int64)">
            <summary>
            Конструктор.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="position"></param>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.#ctor(System.String,System.Type)">
            <summary>
            Конструктор.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:Mallenom.Systems.Config.StreamHeader.Name">
            <summary> Имя параметра. </summary>
        </member>
        <member name="P:Mallenom.Systems.Config.StreamHeader.Type">
            <summary> Тип параметра. </summary>
        </member>
        <member name="P:Mallenom.Systems.Config.StreamHeader.Value">
            <summary> Значение параметра. </summary>
        </member>
        <member name="P:Mallenom.Systems.Config.StreamHeader.ValuePosition">
            <summary> Размер буфера сохраненного элемента. </summary>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.SupportsSerialization(System.Type)">
            <summary>Проверка поддержки сериализации хранилищем специфического типа.</summary>
            <param name="type">Проверяемый тип.</param>
            <returns>true, если сериализация поддерживатся.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.GetTypeHandler(System.Type)">
            <summary>Получить обработчик сериализации типа.</summary>
            <param name="t">Тип.</param>
            <returns><see cref="T:Mallenom.Systems.Config.StreamHeader.ITypeHandler"/>.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.GetTypeByName(System.String)">
            <summary>Получить тип по его имени.</summary>
            <param name="fullName">Имя типа.</param>
            <returns>Тип.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.RegisterTypeHandler(Mallenom.Systems.Config.StreamHeader.ITypeHandler)">
            <summary>Зарегистрировать обработчик сериализации типа.</summary>
            <param name="handler">Обработчик сериализации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.UregisterTypeHandler(System.Type)">
            <summary>Отменить регистрацию обработчика сериализации типа.</summary>
            <param name="t">Тип.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.StreamHeader.UnregisterTypeHandler(Mallenom.Systems.Config.StreamHeader.ITypeHandler)">
            <summary>Отменить регистрацию обработчика сериализации типа.</summary>
            <param name="handler">Обработчик сериализации.</param>
        </member>
        <member name="T:Mallenom.Systems.Config.BinaryStreamStorage">
            <summary> Хранилище в бинарном потоке. </summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BinaryStreamStorage.#ctor(System.IO.Stream)">
            <summary> Консруктор. </summary>
            <param name="stream"> Поток. </param>
        </member>
        <member name="M:Mallenom.Systems.Config.BinaryStreamStorage.#ctor">
            <summary> Конструктор. </summary>
        </member>
        <member name="F:Mallenom.Systems.Config.BinaryStreamStorage._stream">
            <summary> Поток хаписи хранения данных. </summary>
        </member>
        <member name="F:Mallenom.Systems.Config.BinaryStreamStorage._startPosition">
            <summary> Стартовая позиция хранения данных. </summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BinaryStreamStorage.CanWrite">
            <summary>Хранилище поддерживает запись.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BinaryStreamStorage.CanRead">
            <summary>Хранилище поддерживает чтение.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BinaryStreamStorage.Serialize(Mallenom.Systems.Config.Configuration,System.Collections.Generic.Dictionary{System.String,Mallenom.Systems.Config.Section})">
            <summary>Выполнить сериализацию конфигурации.</summary>
            <param name="configuration">Сериализуемая конфигурация.</param>
            <param name="sections">Словарь секций конфигурации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BinaryStreamStorage.Deserialize(Mallenom.Systems.Config.Configuration)">
            <summary>Выполнить десериализацию хранилища.</summary>
            <param name="configuration">Конфигурация, для которой производится десериализация.</param>
            <returns>Словарь секций хранилища.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BinaryStreamStorage.SupportsSerialization(System.Type)">
            <summary>Проверка поддержки сериализации хранилищем специфического типа.</summary>
            <param name="type">Проверяемый тип.</param>
            <returns>true, если сериализация поддерживатся.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.MapConfiguration">
            <summary> Карта конфигурации. </summary>
        </member>
        <member name="F:Mallenom.Systems.Config.MapConfiguration._index">
            <summary> Текущий индекс описания элемента. </summary>
        </member>
        <member name="F:Mallenom.Systems.Config.MapConfiguration._headers">
            <summary> Список описаний. </summary>
        </member>
        <member name="T:Mallenom.Systems.Config.IDeserializationResult">
            <summary>Результаты десериализации.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.IDeserializationResult.Value">
            <summary>Значение.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.IDeserializationResult.Type">
            <summary>Тип.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.IConfigurationStorage">
            <summary>Интерфейс хранилища конфигурации.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.IConfigurationStorage.ConfigurationUpdated">
            <summary>Происходит при обновлении хранилища извне.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfigurationStorage.Serialize(Mallenom.Systems.Config.Configuration,System.Collections.Generic.Dictionary{System.String,Mallenom.Systems.Config.Section})">
            <summary>Выполнить сериализацию конфигурации.</summary>
            <param name="configuration">Сериализуемая конфигурация.</param>
            <param name="sections">Словарь секций конфигурации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfigurationStorage.Deserialize(Mallenom.Systems.Config.Configuration)">
            <summary>Выполнить десериализацию хранилища.</summary>
            <param name="configuration">Конфигурация, для которой производится десериализация.</param>
            <returns>Словарь секций хранилища.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.IConfigurationStorage.CanRead">
            <summary>Хранилище поддерживает чтение.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.IConfigurationStorage.CanWrite">
            <summary>Хранилище поддерживает запись.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfigurationStorage.SupportsSerialization(System.Type)">
            <summary>Проверка поддержки сериализации хранилищем специфического типа.</summary>
            <param name="type">Проверяемый тип.</param>
            <returns>true, если сериализация поддерживатся.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.NullStorage">
            <summary>Пустое хранилище-заглушка.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.NullStorage.ConfigurationUpdated">
            <summary>Происходит при обновлении хранилища извне.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.NullStorage.Serialize(Mallenom.Systems.Config.Configuration,System.Collections.Generic.Dictionary{System.String,Mallenom.Systems.Config.Section})">
            <summary>Выполнить сериализацию конфигурации.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="sections">Словарь секций конфигурации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.NullStorage.Deserialize(Mallenom.Systems.Config.Configuration)">
            <summary>Выполнить десериализацию хранилища.</summary>
            <param name="configuration">Конфигурация, для которой производится десериализация.</param>
            <returns>Словарь секций хранилища.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.NullStorage.CanRead">
            <summary>Хранилище поддерживает чтение.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.NullStorage.CanWrite">
            <summary>Хранилище поддерживает запись.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.NullStorage.SupportsSerialization(System.Type)">
            <summary>Проверка поддержки сериализации хранилищем специфического типа.</summary>
            <param name="type">Проверяемый тип.</param>
            <returns>true, если сериализация поддерживатся.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.ISerializationContext">
            <summary>Контекст сериализации - определяет способ и параметры сохранения/загрузки элемента конфигурации.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.ISerializationContext.Configuration">
            <summary>Конфигурация, для которой выполняется сериализация/десериализация.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.ISerializationContext.Type">
            <summary>Тип, для которого выполняется сериализация/десериализация.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.SerializationContext">
            <summary>Контекст сериализации - определяет способ и параметры сохранения/загрузки элемента конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.SerializationContext.#ctor(Mallenom.Systems.Config.Configuration,System.Type)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.SerializationContext"/>.</summary>
            <param name="configuration">Конфигурация, для которой выполняется сериализация/десериализация.</param>
            <param name="type">Тип, для которого выполняется сериализация/десериализация.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.SerializationContext.Configuration">
            <summary>Конфигурация, для которой выполняется сериализация/десериализация.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.SerializationContext.Type">
            <summary>Тип, для которого выполняется сериализация/десериализация.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.BaseStreamStorage">
            <summary> Базовый класс потоковых хранилищ кофигураций. </summary>
        </member>
        <member name="F:Mallenom.Systems.Config.BaseStreamStorage._stream">
            <summary> Поток чтения\записи данных. </summary>
        </member>
        <member name="E:Mallenom.Systems.Config.BaseStreamStorage.ConfigurationUpdated">
            <summary>Происходит при обновлении хранилища извне.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStreamStorage.Serialize(Mallenom.Systems.Config.Configuration,System.Collections.Generic.Dictionary{System.String,Mallenom.Systems.Config.Section})">
            <summary>Выполнить сериализацию конфигурации.</summary>
            <param name="configuration">Сериализуемая конфигурация.</param>
            <param name="sections">Словарь секций конфигурации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStreamStorage.Deserialize(Mallenom.Systems.Config.Configuration)">
            <summary>Выполнить десериализацию хранилища.</summary>
            <param name="configuration">Конфигурация, для которой производится десериализация.</param>
            <returns>Словарь секций хранилища.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseStreamStorage.CanRead">
            <summary>Хранилище поддерживает чтение.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseStreamStorage.CanWrite">
            <summary>Хранилище поддерживает запись.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseStreamStorage.SupportsSerialization(System.Type)">
            <summary>Проверка поддержки сериализации хранилищем специфического типа.</summary>
            <param name="type">Проверяемый тип.</param>
            <returns>true, если сериализация поддерживатся.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.XMLStorageException">
            <summary>Исключение при работе с XML-хранилищем.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLStorageException.#ctor">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLStorageException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLStorageException.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLStorageException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLStorageException.#ctor(System.String,System.Exception)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLStorageException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLStorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLStorageException"/>.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.XMLDeserializationException">
            <summary>Исключение при десериализации XML.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLDeserializationException.#ctor">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLDeserializationException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLDeserializationException.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLDeserializationException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLDeserializationException.#ctor(System.String,System.Exception)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLDeserializationException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLDeserializationException"/>.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.XMLSerializationExceptionException">
            <summary>Исключение при сериализации XML.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLSerializationExceptionException.#ctor">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLSerializationExceptionException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLSerializationExceptionException.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLSerializationExceptionException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLSerializationExceptionException.#ctor(System.String,System.Exception)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLSerializationExceptionException"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLSerializationExceptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLSerializationExceptionException"/>.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.XMLFileStorage">
            <summary>Хранилище в XML-файле.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.XMLFileStorage.DeserializationResult">
            <summary>Результаты десериализации.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLFileStorage.DeserializationResult.Value">
            <summary>Значение параметра.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLFileStorage.DeserializationResult.Type">
            <summary>Тип параметра.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.XMLFileStorage._fullpath">
            <summary>Имя файла, хрянящего конфигурацию.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLFileStorage.FullPath">
            <summary>Полный путь к файлу конфигурации.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLFileStorage.Encoding">
            <summary>Кодировка файла. По умолчанию <see cref="M:Encoding.UTF8"/>.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLFileStorage.Formatting">
            <summary>Форматирование. По умолчанию <see cref="M:Formatting.Indented"/>.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLFileStorage.Indentation">
            <summary>Отступ. По умолчанию 2.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLFileStorage"/>.</summary>
            <param name="fileName">
            Имя файла. Если файл не существует, то должна существовать директория, где он будет сохранен,
            в противном случае генерируется <see cref="T:System.IO.DirectoryNotFoundException"/>.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> == null.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Указан несуществующий файл в несуществующей директории.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.#ctor(System.IO.Stream)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLFileStorage"/>.</summary>
            <param name="stream">Поток для сохранения/загрузки.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.SerializeValue(Mallenom.Systems.Config.Configuration,System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.Object,System.Type,System.Boolean)">
            <summary>Сериализовать значение параметра.</summary>
            <param name="config">Конфигурация.</param>
            <param name="doc">XML-документ.</param>
            <param name="parent">XML-узел, в который будет помещен узел с сохраненным значением.</param>
            <param name="name">Имя узла.</param>
            <param name="value">Сериализуемый PropertyBag.</param>
            <param name="type">Сериализуемый тип.</param>
            <param name="writeType">Запиывать имя типа.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.SerializeValue(Mallenom.Systems.Config.Configuration,System.Xml.XmlDocument,System.Xml.XmlNode,Mallenom.Systems.Config.Parameter,System.Boolean)">
            <summary>Сериализовать значение параметра.</summary>
            <param name="config">Конфигурация.</param>
            <param name="doc">XML-документ.</param>
            <param name="parent">XML-узел, в который будет помещен узел с сохраненным значением.</param>
            <param name="p">Сериализуемый параметр.</param>
            <param name="writeType">Записывать имя типа.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.DeserializeValue(Mallenom.Systems.Config.Configuration,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>Десериализует значение из XML-узла.</summary>
            <param name="config">Конфигурация.</param>
            <param name="doc">XML-документ.</param>
            <param name="node">XML-узел.</param>
            <returns>Десериализованное значение.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.DeserializeValue(Mallenom.Systems.Config.Configuration,System.Xml.XmlDocument,System.Xml.XmlNode,System.String)">
            <summary>Десериализует значение из XML-узла.</summary>
            <param name="config">Конфигурация.</param>
            <param name="doc">XML-документ.</param>
            <param name="node">XML-узел.</param>
            <param name="type">Тип десериализуемого значения.</param>
            <returns>Десериализованное значение.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.DeserializeValue(Mallenom.Systems.Config.Configuration,System.Xml.XmlDocument,System.Xml.XmlNode,System.Type)">
            <summary>Десериализует значение из XML-узла.</summary>
            <param name="config">Конфигурация.</param>
            <param name="doc">XML-документ.</param>
            <param name="node">XML-узел.</param>
            <param name="type">Тип десериализуемого значения.</param>
            <returns>Десериализованное значение.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLFileStorage.CanRead">
            <summary>Хранилище поддерживает чтение.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLFileStorage.CanWrite">
            <summary>Хранилище поддерживает запись.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.Serialize(Mallenom.Systems.Config.Configuration,System.Collections.Generic.Dictionary{System.String,Mallenom.Systems.Config.Section})">
            <summary>Выполнить сериализацию конфигурации.</summary>
            <param name="config">Конфигурация.</param>
            <param name="sections">Словарь секций конфигурации.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLFileStorage.Deserialize(Mallenom.Systems.Config.Configuration)">
            <summary>Выполнить десериализацию хранилища.</summary>
            <param name="configuration">Конфигурация, для которой производится десериализация.</param>
            <returns>Словарь секций хранилища.</returns>
        </member>
        <member name="F:Mallenom.Systems.Config.XMLFileStorage.IPEndPointHandler.VALUES_SEPARATOR">
            <summary>:</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.XMLFileStorage.IPEndPointHandler.VALUE_FORMAT_STRING">
            <summary>{0}:{1}</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.XMLSerializationContext">
            <summary>Контекст сериализации для XML.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLSerializationContext.#ctor(Mallenom.Systems.Config.Configuration,System.Type,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLSerializationContext"/>.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="type">Тип.</param>
            <param name="document">XML-документ.</param>
            <param name="node">Узел.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLSerializationContext.#ctor(Mallenom.Systems.Config.Configuration,System.String,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLSerializationContext"/>.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="type">Тип.</param>
            <param name="document">XML-документ.</param>
            <param name="node">Узел.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.XMLSerializationContext.#ctor(Mallenom.Systems.Config.Configuration,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>Создание <see cref="T:Mallenom.Systems.Config.XMLSerializationContext"/>.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="document">XML-документ.</param>
            <param name="node">Узел.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLSerializationContext.XmlDocument">
            <summary>XML-документ.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLSerializationContext.XmlNode">
            <summary>XML-узел.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.XMLSerializationContext.WriteType">
            <summary>Записать в узел тип содержимого.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.BaseParameterProvider">
            <summary>Базовое хранилище параметров.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.BaseParameterProvider._configuration">
            <summary>Конфигурация.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.BaseParameterProvider._parameters">
            <summary>Словарь параметров.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.BaseParameterProvider.ParamAdded">
            <summary>Событие - параметр добавлен.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.BaseParameterProvider.ParamRemoved">
            <summary>Событие - параметр удален.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.#ctor(Mallenom.Systems.Config.Configuration,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="config">Конфигурация.</param>
            <param name="autoUpdateConfiguration">Сообщать конфигурации об изменениях.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.#ctor(Mallenom.Systems.Config.Configuration)">
            <summary>Конструктор.</summary>
            <param name="config">Конфигурация.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseParameterProvider.Configuration">
            <summary>Конфигурация, содержащая данный <see cref="T:Mallenom.Systems.Config.BaseParameterProvider"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.SetValue(System.Type,System.String,System.Object)">
            <summary>Установить значение параметра.</summary>
            <param name="type">Тип значения.</param>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.SetValue``1(System.String,``0)">
            <summary>Установить значение параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.LoadObjectState``1(System.String,``0)">
            <summary>Загрузить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="paramName">Имя парметра, хранящего состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
            <returns><c>true</c>, если состояние присутствовало в конфигурации.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.LoadObjectState``1(System.String,``0,System.Boolean)">
            <summary>Загрузить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="paramName">Имя парметра, хранящего состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
            <param name="allowLoadDefaults">Разрешить загрузку состояния по умолчанию, если указанный параметр отстствует.</param>
            <returns><c>true</c>, если состояние присутствовало в конфигурации.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.SaveObjectState``1(System.String,``0)">
            <summary>Сохранить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="name">Имя парметра для сохранения состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.RemoveParameter(System.String)">
            <summary>Удалить параметр.</summary>
            <param name="name">Имя параметра.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.RaiseParamAdded(Mallenom.Systems.Config.Parameter)">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Systems.Config.BaseParameterProvider.ParamAdded"/>.</summary>
            <param name="p">Добавленный параметр.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.RaiseParamRemoved(Mallenom.Systems.Config.Parameter)">
            <summary>Сгенерировать событие <see cref="E:Mallenom.Systems.Config.BaseParameterProvider.ParamAdded"/>.</summary>
            <param name="p">Добавленный параметр.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.CreateParam(System.String,System.Object,System.Type)">
            <summary>Создать параметр.</summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
            <param name="type">Тип параметра.</param>
            <returns>Созданный параметр.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.CreateParam(System.String,System.Object)">
            <summary>Создать параметр.</summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
            <returns>Созданный параметр.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseParameterProvider.Item(System.String)">
            <summary>Получить параметр по его имени.</summary>
            <param name="name">Имя параметра.</param>
            <returns>Параметр.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseParameterProvider.ParameterCount">
            <summary>Количество параметров.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.BaseParameterProvider.ReadOnly">
            <summary>Только для чтения.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.Compare(Mallenom.Systems.Config.BaseParameterProvider)">
            <summary>Сравнить с другим хранилищем параметров.</summary>
            <param name="paramProvider"><see cref="T:Mallenom.Systems.Config.BaseParameterProvider"/>.</param>
            <returns>true, если оба хранилища содержат одинаковые параметры, которые хранят одинаковые значения.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.GetValue``1(System.String,``0)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <param name="defaultValue">Значение параметра по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.GetValue``1(System.String,System.Func{``0})">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <param name="getDefaultValueDelegate">Делегат, возвращающий значение параметра по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.GetValue``1(System.String)">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.GetValue(System.String,System.Object)">
            <summary>Получить значение параметра.</summary>
            <param name="paramName">Имя параметра.</param>
            <param name="defaultValue">Значение параметра по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.GetValue(System.String)">
            <summary>Получить значение параметра.</summary>
            <param name="paramName">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.GetValueType(System.String)">
            <summary>Получить тип значения параметра.</summary>
            <param name="paramName">Имя параметра.</param>
            <returns>Тип значения параметра <paramref name="paramName"/>.</returns>
            <exception cref="T:System.ArgumentException">Параметр <paramref name="paramName"/> не существует.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.TryGetValue``1(System.String,``0@)">
            <summary>Возвращает значение параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
            <returns>true, если значение параметра было считано.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.CreateValue(System.String)">
            <summary>Создает объект из хранилища <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <param name="paramName">Имя параметра.</param>
            <returns>Созданный объект (или null, если параметр не найден).</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.CreateValue``1(System.String)">
            <summary>Создает объект из хранилища <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <returns>Созданный объект (или null, если параметр не найден или не конвертируется в <typeparamref name="T"/>).</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.MergeСore(System.Collections.Generic.IEnumerable{Mallenom.Systems.Config.Parameter},Mallenom.Systems.Config.MergeFlags)">
            <summary>Выполнить слияние.</summary>
            <param name="source">Список параметров.</param>
            <param name="flags">Опции.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.Merge(Mallenom.Systems.Config.IParameterProvider,Mallenom.Systems.Config.MergeFlags)">
            <summary>Выполнить слияние.</summary>
            <param name="source">Провайдер параметров.</param>
            <param name="flags">Опции.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.Merge(Mallenom.Systems.Config.IParameterProvider)">
            <summary>Выполнить слияние.</summary>
            <param name="source">Провайдер параметров.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.Clear">
            <summary>Очистить словарь параметров.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.ParameterExists(System.String)">
            <summary>Проверка, существует ли параметр с указанным именем в хранилище.</summary>
            <param name="name">Имя параметра.</param>
            <returns>true, если параметр с указанным именем существует.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.GetParameterNames">
            <summary>Получить имена параметров.</summary>
            <returns>Имена параметров.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.BaseParameterProvider.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:Mallenom.Systems.Config.BaseParameterProvider"/>.</summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.Configuration">
            <summary>Конфигурация.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Configuration.Log">
            <summary>Лог.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Configuration._storage">
            <summary>Хранилище.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Configuration._sections">
            <summary>Секции хранилища.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Configuration._saveCount">
            <summary>Счетчик вызовов BeginSave().</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Configuration._globalModification">
            <summary>Флаг глобального изменения.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Configuration._readOnly">
            <summary>Только для чтения.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.Configuration.ConfigurationStorageUpdated">
            <summary>Событие - данные в хранилище обновлены извне.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.Configuration.SectionAdded">
            <summary>Событие - добавлена секция.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.Configuration.SectionRemoved">
            <summary>Событие - удалена секция.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.Configuration.Saving">
            <summary>Событие - конфигурация сохраняется.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.Configuration.Saved">
            <summary>Событие - конфигурация сохранена.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.#ctor(Mallenom.Systems.Config.IConfigurationStorage,Mallenom.Systems.Config.Configuration,Mallenom.Systems.Config.MergeFlags,System.Boolean,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище конфигурации.</param>
            <param name="defaultConfig">Конфигурация по умолчанию.</param>
            <param name="defaultConfigMergeFlags">Параметры слияния с конфигурацией по умолчанию.</param>
            <param name="readOnly">Только для чтения (если хранилище не поддерживает запись, будет форсировано открытие только для чтения).</param>
            <param name="manualSave">Сохранение конфигурации производится только по вызову <see cref="M:Mallenom.Systems.Config.Configuration.ForceSave"/>.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.#ctor(Mallenom.Systems.Config.IConfigurationStorage,Mallenom.Systems.Config.Configuration,Mallenom.Systems.Config.MergeFlags,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище конфигурации.</param>
            <param name="defaultConfig">Конфигурация по умолчанию.</param>
            <param name="defaultConfigMergeFlags">Параметры слияния с конфигурацией по умолчанию.</param>
            <param name="readOnly">Только для чтения (если хранилище не поддерживает запись, будет форсировано открытие только для чтения).</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.#ctor(Mallenom.Systems.Config.IConfigurationStorage,Mallenom.Systems.Config.Configuration,System.Boolean,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище конфигурации.</param>
            <param name="defaultConfig">Конфигурация по умолчанию.</param>
            <param name="readOnly">Только для чтения (если хранилище не поддерживает запись, будет форсировано открытие только для чтения).</param>
            <param name="manualSave">Сохранение конфигурации производится только по вызову <see cref="M:Mallenom.Systems.Config.Configuration.ForceSave"/>.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.#ctor(Mallenom.Systems.Config.IConfigurationStorage,Mallenom.Systems.Config.Configuration,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище конфигурации.</param>
            <param name="defaultConfig">Конфигурация по умолчанию.</param>
            <param name="readOnly">Только для чтения (если хранилище не поддерживает запись, будет форсировано открытие только для чтения).</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.#ctor(Mallenom.Systems.Config.IConfigurationStorage,System.Boolean,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище конфигурации.</param>
            <param name="readOnly">Только для чтения (если хранилище не поддерживает запись, будет форсировано открытие только для чтения).</param>
            <param name="manualSave">Сохранение конфигурации производится только по вызову <see cref="M:Mallenom.Systems.Config.Configuration.ForceSave"/>.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.#ctor(Mallenom.Systems.Config.IConfigurationStorage,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище конфигурации.</param>
            <param name="readOnly">Только для чтения (если хранилище не поддерживает запись, будет форсировано открытие только для чтения).</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.#ctor(Mallenom.Systems.Config.IConfigurationStorage)">
            <summary>Конструктор.</summary>
            <param name="storage">Хранилище конфигурации.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.Configuration.AutoReloadOnStorageUpdate">
            <summary>Автоматически обновлять конфигурацию при внешнем изменении данных в хранилище.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.Reload">
            <summary>Повторно загрузить значения из хранилища.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.Merge(Mallenom.Systems.Config.Configuration)">
            <summary>Выполнить слияние с другой конфигурацией.</summary>
            <param name="configuration">Конфигурация.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.Merge(Mallenom.Systems.Config.Configuration,Mallenom.Systems.Config.MergeFlags)">
            <summary>Выполнить слияние с другой конфигурацией.</summary>
            <param name="configuration">Конфигурация, с которой выполняется слияние.</param>
            <param name="flags">Флаги.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.Configuration.Item(System.String)">
            <summary>Получить секцию по ее имени.</summary>
            <param name="sectionName">Имя секции.</param>
            <returns>Секция с указанным именем.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.TryGetSection(System.String,Mallenom.Systems.Config.Section@)">
            <summary>Получить секцию по ее имени.</summary>
            <param name="sectionName">Имя секции.</param>
            <param name="section">Секция.</param>
            <returns>true, если секция найдена.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.Configuration.ConfigurationStorage">
            <summary>Хранилище конфигурации.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Configuration.ReadOnly">
            <summary>Только для чтения.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Configuration.ManualSave">
            <summary>Сохранение необходимо производить вручную.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.RemoveSection(System.String)">
            <summary>Удалить секцию из конфигурации.</summary>
            <param name="section">Имя секции.</param>
            <exception cref="T:System.ArgumentException">Секции с указанным именем не существует.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.RemoveSection(Mallenom.Systems.Config.Section)">
            <summary>Удалить секцию из конфигурации.</summary>
            <param name="section">Секция.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.RemoveParameter(System.String,System.String)">
            <summary>Удалить параметр из конфигурации.</summary>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Параметр.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.Clear">
            <summary>Очистить конфигурацию.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.SectionExists(System.String)">
            <summary>Проверка, существует ли секция с указанным именем.</summary>
            <param name="sectionName">Имя секции.</param>
            <returns>Существует ли секция с указанным именем.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.ParameterExists(System.String,System.String)">
            <summary>Проверка, существует ли параметр.</summary>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Параметр.</param>
            <returns>true, если секция sectionName существует и содержит параметр <paramref name="paramName"/>.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.GetSectionNames">
            <summary>Получить имена секций конфигурации.</summary>
            <returns>Массив имен секций конфигурации.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.GetParameterNames(System.String)">
            <summary>Получить имена параметров указанной секции.</summary>
            <param name="sectionName">Имя секции.</param>
            <returns>Массив имен параметров секции.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.Configuration.SectionCount">
            <summary>Количество секций в конфигурации.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Configuration.ParameterCount">
            <summary>Количество параметров в конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.SetValue``1(System.String,System.String,``0)">
            <summary>Сохранить значение параметра в конфигурации.</summary>
            <typeparam name="T">Тип параметра.</typeparam>
            <param name="section">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="paramValue">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.GetValue``1(System.String,System.String,``0)">
            <summary>Возвращает значение параметра из конфигурации.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.GetValue``1(System.String,System.String,System.Func{``0})">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="getDefaultValueDelegate">Делегат, возвращающий значение параметра по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.GetValue``1(System.String,System.String)">
            <summary>Возвращает значение параметра из конфигурации.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.GetValue(System.String,System.String,System.Object)">
            <summary>Возвращает значение параметра из конфигурации.</summary>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.GetValue(System.String,System.String)">
            <summary>Возвращает значение параметра из конфигурации.</summary>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.TryGetValue``1(System.String,System.String,``0@)">
            <summary>Возвращает значение параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="sectionName">Имя секции.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
            <returns>true, если значение параметра было считано.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.LoadObjectState``1(System.String,System.String,``0)">
            <summary>Загрузить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя парметра, хранящего состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
            <returns><c>true</c>, если состояние присутствовало в конфигурации, иначе <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.LoadObjectState``1(System.String,System.String,``0,System.Boolean)">
            <summary>Загрузить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя парметра, хранящего состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
            <param name="allowLoadDefaults">
            В случае отсутствия указанного параметра загрузить значения по умолчанию.
            </param>
            <returns><c>true</c>, если состояние присутствовало в конфигурации, иначе <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.SaveObjectState``1(System.String,System.String,``0)">
            <summary>Сохранить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя парметра для сохранения состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.CreateValue(System.String,System.String)">
            <summary>Создает объект из хранилища <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <param name="sectionName">Имя секции.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Созданный объект (или null, если параметр не найден).</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.CreateValue``1(System.String,System.String)">
            <summary>Создает объект из хранилища <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Созданный объект (или null, если параметр не найден или не конвертируется в <typeparamref name="T"/>).</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.SupportsSerialization(System.Type)">
            <summary>Проверка поддержки сериализации специфического типа.</summary>
            <param name="type">Проверяемый тип.</param>
            <returns>true, если сериализация поддерживатся.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.BeginSave">
            <summary>Начать сохранение конфигурации.</summary>
            <remarks>На каждый вызов <see cref="M:Mallenom.Systems.Config.Configuration.BeginSave"/> должен приходиться 1 вызов <see cref="M:Mallenom.Systems.Config.Configuration.EndSave"/>.</remarks>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.EndSave">
            <summary>Завершить сохранение конфигурации.</summary>
            <remarks>Каждому вызову <see cref="M:Mallenom.Systems.Config.Configuration.EndSave"/> должен предшествовать вызов <see cref="M:Mallenom.Systems.Config.Configuration.BeginSave"/>.</remarks>
        </member>
        <member name="P:Mallenom.Systems.Config.Configuration.Modified">
            <summary>Состояние модификации конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.SaveTo(Mallenom.Systems.Config.IConfigurationStorage)">
            <summary>Сохранить конфигурацию в указанное хранилище.</summary>
            <param name="storage">Хранилище.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="storage"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.ForceSave">
            <summary>Форсированное сохранение конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Configuration.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:Mallenom.Systems.Config.Configuration"/>.</summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.IConfiguration">
            <summary>Объект, предоставляющий доступ к конфигурации.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.IConfiguration.ConfigurationStorageUpdated">
            <summary>Событие - данные в хранилище обновлены извне.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.IConfiguration.SectionAdded">
            <summary>Событие - добавлена секция.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.IConfiguration.SectionRemoved">
            <summary>Событие - удалена секция.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.IConfiguration.Saved">
            <summary>Событие - конфигурация сохранена.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.BeginSave">
            <summary>Начать сохранение конфигурации.</summary>
            <remarks>На каждый вызов <see cref="M:Mallenom.Systems.Config.IConfiguration.BeginSave"/> должен приходиться 1 вызов <see cref="M:Mallenom.Systems.Config.IConfiguration.EndSave"/>.</remarks>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.EndSave">
            <summary>Завершить сохранение конфигурации.</summary>
            <remarks>Каждому вызову <see cref="M:Mallenom.Systems.Config.IConfiguration.EndSave"/> должен предшествовать вызов <see cref="M:Mallenom.Systems.Config.IConfiguration.BeginSave"/>.</remarks>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.ForceSave">
            <summary>Форсированное сохранение конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.SaveTo(Mallenom.Systems.Config.IConfigurationStorage)">
            <summary>Сохранить конфигурацию в указанное хранилище.</summary>
            <param name="storage">Хранилище.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="storage"/> == null.</exception>
        </member>
        <member name="P:Mallenom.Systems.Config.IConfiguration.ReadOnly">
            <summary>Только для чтения.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.IConfiguration.ManualSave">
            <summary>Сохранение необходимо производить вручную.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.IConfiguration.Modified">
            <summary>Состояние модификации конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.Clear">
            <summary>Очистить конфигурацию.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.Reload">
            <summary>Повторно загрузить значения из хранилища.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.IConfiguration.SectionCount">
            <summary>Количество секций в конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.GetSectionNames">
            <summary>Получить имена секций конфигурации.</summary>
            <returns>Массив имен секций конфигурации.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.IConfiguration.Item(System.String)">
            <summary>Получить секцию по имени.</summary>
            <param name="name">Имя секции.</param>
            <returns>Секция с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.SectionExists(System.String)">
            <summary>Проверка, существует ли секция с указанным именем.</summary>
            <param name="sectionName">Имя секции.</param>
            <returns>Существует ли секция с указанным именем.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.RemoveSection(System.String)">
            <summary>Удалить секцию.</summary>
            <param name="sectionName">Имя секции.</param>
            <exception cref="T:System.ArgumentException">Секции с указанным именем не существует.</exception>
        </member>
        <member name="P:Mallenom.Systems.Config.IConfiguration.ParameterCount">
            <summary>Количество параметров в конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.GetParameterNames(System.String)">
            <summary>Получить имена параметров указанной секции.</summary>
            <param name="sectionName">Имя секции.</param>
            <returns>Массив имен параметров секции.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.ParameterExists(System.String,System.String)">
            <summary>Проверка, существует ли параметр.</summary>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Параметр.</param>
            <returns>true, если секция sectionName существует и содержит параметр paramName.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.RemoveParameter(System.String,System.String)">
            <summary>Удалить параметр из конфигурации.</summary>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Параметр.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.SetValue``1(System.String,System.String,``0)">
            <summary>Сохранить значение параметра в конфигурации.</summary>
            <typeparam name="T">Тип параметра.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="paramValue">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.SaveObjectState``1(System.String,System.String,``0)">
            <summary>Сохранить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя парметра для сохранения состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.GetValue``1(System.String,System.String,``0)">
            <summary>Возвращает значение параметра из конфигурации.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.GetValue``1(System.String,System.String)">
            <summary>Возвращает значение параметра из конфигурации.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.GetValue(System.String,System.String,System.Object)">
            <summary>Возвращает значение параметра из конфигурации.</summary>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.GetValue(System.String,System.String)">
            <summary>Возвращает значение параметра из конфигурации.</summary>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.TryGetValue``1(System.String,System.String,``0@)">
            <summary>Возвращает значение параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="sectionName">Имя секции.</param>
            <param name="paramName">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
            <returns>true, если значение параметра было считано.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.LoadObjectState``1(System.String,System.String,``0)">
            <summary>Загрузить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя парметра, хранящего состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
            <returns>true, если состояние было загружено.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.CreateValue(System.String,System.String)">
            <summary>Создает объект из хранилища <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <param name="sectionName">Имя секции.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Созданный объект (или null, если параметр не найден).</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IConfiguration.CreateValue``1(System.String,System.String)">
            <summary>Создает объект из хранилища <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="sectionName">Секция.</param>
            <param name="paramName">Имя параметра.</param>
            <returns>Созданный объект (или null, если параметр не найден или не конвертируется в <typeparamref name="T"/>).</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.IParameterProvider">
            <summary>Объект, предоставляющий доступ к набору параметров.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.IParameterProvider.ParamAdded">
            <summary>Событие - параметр добавлен.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.IParameterProvider.ParamRemoved">
            <summary>Событие - параметр удален.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.IParameterProvider.Item(System.String)">
            <summary>Получить параметр по его имени.</summary>
            <param name="name">Имя параметра.</param>
            <returns>Параметр.</returns>
        </member>
        <member name="P:Mallenom.Systems.Config.IParameterProvider.ParameterCount">
            <summary>Количество параметров.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.IParameterProvider.ReadOnly">
            <summary>Только для чтения.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.Merge(Mallenom.Systems.Config.IParameterProvider,Mallenom.Systems.Config.MergeFlags)">
            <summary>Выполнить слияние.</summary>
            <param name="source">Провайдер параметров.</param>
            <param name="flags">Опции.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.Merge(Mallenom.Systems.Config.IParameterProvider)">
            <summary>Выполнить слияние.</summary>
            <param name="source">Провайдер параметров.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.SetValue``1(System.String,``0)">
            <summary>Сохранить значение параметра в конфигурации.</summary>
            <typeparam name="T">Тип параметра.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.GetValue``1(System.String,``0)">
            <summary>Возвращает значение параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.GetValue``1(System.String)">
            <summary>Возвращает значение параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.GetValue``1(System.String,System.Func{``0})">
            <summary>Получить значение параметра.</summary>
            <typeparam name="T">Тип значения параметра.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <param name="getDefaultValueDelegate">Делегат, возвращающий значение параметра по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.GetValue(System.String,System.Object)">
            <summary>Возвращает значение параметра.</summary>
            <param name="paramName">Имя параметра.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.GetValue(System.String)">
            <summary>Возвращает значение параметра.</summary>
            <param name="paramName">Имя параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.TryGetValue``1(System.String,``0@)">
            <summary>Возвращает значение параметра.</summary>
            <typeparam name="T">Тип значения.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
            <returns>true, если значение параметра было считано.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.LoadObjectState``1(System.String,``0)">
            <summary>Загрузить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="name">Имя парметра, хранящего состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
            <returns>true, если состояние было загружено.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.SaveObjectState``1(System.String,``0)">
            <summary>Сохранить состояние объекта.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="name">Имя парметра для сохранения состояние объекта.</param>
            <param name="obj">Тип объекта.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.CreateValue(System.String)">
            <summary>Создает объект из хранилища <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <param name="paramName">Имя параметра.</param>
            <returns>Созданный объект (или null, если параметр не найден).</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.CreateValue``1(System.String)">
            <summary>Создает объект из хранилища <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="paramName">Имя параметра.</param>
            <returns>Созданный объект (или null, если параметр не найден или не конвертируется в <typeparamref name="T"/>).</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.GetParameterNames">
            <summary>Получить имена параметров.</summary>
            <returns>Имена параметров.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.RemoveParameter(System.String)">
            <summary>Удалить параметр.</summary>
            <param name="name">Имя параметра.</param>
            <exception cref="T:System.ArgumentException">Параметр <paramref name="name"/> не найден.</exception>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.ParameterExists(System.String)">
            <summary>Проверка параметра на существование.</summary>
            <param name="name">Имя параметра.</param>
            <returns>Существует ли параметр с указанным именем.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.IParameterProvider.Clear">
            <summary>Удалить все параметры.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.MergeFlags">
            <summary>Флаги, используемые при слиянии двух конфигураций.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.MergeFlags.None">
            <summary>Без флагов.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.MergeFlags.RemoveMissingItems">
            <summary>Удалить параметры и секции, которых нет во второй конфигурации.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.MergeFlags.ChangeDuplicatedParameters">
            <summary>Если параметр присутствует в обоих конфигурациях, использовать значение из второй конфигурации.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.MergeFlags.TreatPropertyBagsAsSections">
            <summary>Выполнять слияние PopertyBag'ов как секций.</summary>
        </member>
        <member name="T:Mallenom.Systems.Config.Parameter">
            <summary>Параметр.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Parameter._configuration">
            <summary>Конфигурация.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Parameter._name">
            <summary>Имя параметра.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Parameter._modified">
            <summary>Флаг модификации параметра.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Parameter._value">
            <summary>Значение параметра.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Parameter._type">
            <summary>Тип значения параметра.</summary>
        </member>
        <member name="E:Mallenom.Systems.Config.Parameter.ValueChanged">
            <summary>Событие - значение параметра изменено.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Parameter.#ctor(Mallenom.Systems.Config.Configuration,System.String,System.Type,System.Object,System.Boolean)">
            <summary>Конструктор.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="name">Имя параметра.</param>
            <param name="type">Тип значения пааметра.</param>
            <param name="value">Значение параметра.</param>
            <param name="storeValue">true, если значение параметра необходимо упаковать.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Parameter.#ctor(Mallenom.Systems.Config.Configuration,System.String,System.Type,System.Object)">
            <summary>Конструктор.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="name">Имя параметра.</param>
            <param name="type">Тип значения пааметра.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="M:Mallenom.Systems.Config.Parameter.#ctor(Mallenom.Systems.Config.Configuration,System.String,System.Object)">
            <summary>Конструктор.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.Configuration">
            <summary>Конфигурация, содержащая параметр.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.Name">
            <summary>Имя параметра.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.Type">
            <summary>Тип параметра.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.Value">
            <summary>Упакованное значение параметра.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.Modified">
            <summary>Параметр модифицирован.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.IsAtomic">
            <summary>Значение атомарно.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.ContainsPropertyBag">
            <summary>Содержит <see cref="T:Mallenom.Systems.Config.PropertyBag"/>.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.ContainsArray">
            <summary>Содержит массив.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.ContainsList">
            <summary>Содержит <see cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.ContainsLinkedList">
            <summary>Содержит <see cref="T:System.Collections.Generic.LinkedList`1"/>.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.ContainsKeyValuePair">
            <summary>Содержит <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</summary>
        </member>
        <member name="P:Mallenom.Systems.Config.Parameter.ContainsDictionary">
            <summary>Содержит <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Parameter.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Systems.Config.Parameter"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Systems.Config.Parameter"/>.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.Section">
            <summary>Секция конфигурации.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.Section._name">
            <summary>Имя секции.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Section.#ctor(Mallenom.Systems.Config.Configuration,System.String)">
            <summary>Конструктор.</summary>
            <param name="configuration">Конфигурация.</param>
            <param name="name">Имя секции.</param>
        </member>
        <member name="P:Mallenom.Systems.Config.Section.Name">
            <summary>Имя секции.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.Section.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Systems.Config.Section"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Systems.Config.Section"/>.</returns>
        </member>
        <member name="F:Mallenom.Systems.Config.SupportedTypes.NonPrimitiveValueTypes">
            <summary>Поддерживаеме структуры, не являющиеся примитивами.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.SupportedTypes.ImmutableTypes">
            <summary>Типы, для которых не требуется упаковка, т.к. они immutable.</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.SupportedTypes.MutableTypes">
            <summary>Типы с простой упаковкой (тип не изменяется в процессе упаковки).</summary>
        </member>
        <member name="F:Mallenom.Systems.Config.SupportedTypes.Containers">
            <summary>Контейнеры (типы со сложной упаковкой; тип может измениться в процессе упаковки).</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.ConvertTypeForStorage(System.Type)">
            <summary>Получить тип, который будет использован конфигурацией при хранении указанного типа.</summary>
            <param name="type">Тип.</param>
            <returns>Тип для хранения.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.SupportedTypes.IContainerDefinition">
            <summary>Интерфейс контейнера - объекта, содержащего объекты других типов.</summary>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.IContainerDefinition.CanStore(System.Type)">
            <summary>Контейнер может упаковать указанный тип.</summary>
            <param name="type">Тип.</param>
            <returns>true, если контейнер может упаковать указанный тип.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.IContainerDefinition.CanExtractFrom(System.Type)">
            <summary>Контейнер может распаковать указанный тип.</summary>
            <param name="type">Тип упаковки.</param>
            <returns>true, если возможна распаковка.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.IContainerDefinition.ConvertTypeForStorage(System.Type)">
            <summary>Получить тип, который будет использован контейнером при хранении указанного типа.</summary>
            <param name="type">Тип.</param>
            <returns>Тип для хранения.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.IContainerDefinition.Store(Mallenom.Systems.Config.Configuration,System.Object)">
            <summary>Упаковать объект.</summary>
            <param name="configuration">Конфигурация, для которой производится упаковка.</param>
            <param name="value">Значение объекта.</param>
            <returns>Упакованный объект.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.IContainerDefinition.Extract(System.Object,System.Type)">
            <summary>Распаковать объект.</summary>
            <param name="value">Упакованный объект.</param>
            <param name="type">Тип, объекта, который необходимо получить.</param>
            <returns>Распакованный объект.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.IContainerDefinition.AreEqual(System.Object,System.Object)">
            <summary>Выполнить сравнение упакованных объектов.</summary>
            <param name="value1">Значение 1.</param>
            <param name="value2">Значение 2.</param>
            <returns>true, если содержимое в упакованных объектах идентично.</returns>
        </member>
        <member name="T:Mallenom.Systems.Config.SupportedTypes.IMutableObjectDefinition">
            <summary>
            Интерфейс ReferenceType-объекта, который может изменять свое состояние, но не поддерживает <see cref="T:Mallenom.Systems.Config.IConfigurationValue"/>.
            При передаче из/в конфигурацию объект будет склонирован.
            </summary>
            <remarks>Если клонирование объекта нежелательно, можно определить для него контейнер (<see cref="T:Mallenom.Systems.Config.SupportedTypes.IContainerDefinition"/>).</remarks>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.IMutableObjectDefinition.FixState(System.Object)">
            <summary>Зафиксировать состояние объекта.</summary>
            <param name="obj">Исходный объект (гарантируется != null).</param>
            <returns>Копия.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.SupportedTypes.ValuesEqual(System.Object,System.Object)">
            <summary>Проверка значений на равенство.</summary>
            <param name="value1">Значение 1.</param>
            <param name="value2">Значение 2.</param>
            <returns>true, если значения равны.</returns>
        </member>
        <member name="M:Mallenom.Systems.Config.Utility.IncrementIndex(System.Array,System.Int64[])">
            <summary>Инкремент индекса элемента массива.</summary>
            <param name="array">Массив.</param>
            <param name="indices">Массив индексов.</param>
            <returns>Полученный индекс не выходит за пределы размеров массива.</returns>
        </member>
        <member name="T:Mallenom.Systems.Controls.ConfigurationViewer">
            <summary>Контрол для посмотра конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Controls.ConfigurationViewer.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Systems.Controls.ConfigurationViewer.Configuration">
            <summary>Просматриваемая конфигурация.</summary>
        </member>
        <member name="F:Mallenom.Systems.Controls.ConfigurationViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Systems.Controls.ConfigurationViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Systems.Controls.ConfigurationViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Systems.Forms.ConfigurationViewerForm">
            <summary>Форма просмотра конфигурации.</summary>
        </member>
        <member name="M:Mallenom.Systems.Forms.ConfigurationViewerForm.#ctor(Mallenom.Systems.Config.Configuration)">
            <summary>Конструктор.</summary>
            <param name="config">Конфигурация для просмотра.</param>
            <exception cref="T:System.ArgumentNullException">Передан config == null.</exception>
        </member>
        <member name="F:Mallenom.Systems.Forms.ConfigurationViewerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Mallenom.Systems.Forms.ConfigurationViewerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Mallenom.Systems.Forms.ConfigurationViewerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Mallenom.Touch.PointerEventArgs">
            <summary>Аргументы события указателя.</summary>
        </member>
        <member name="M:Mallenom.Touch.PointerEventArgs.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Windows.Forms.MouseButtons,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>Создание <see cref="T:Mallenom.Touch.PointerEventArgs"/>.</summary>
            <param name="pointerId">Идентификатор указателя.</param>
            <param name="isNew">Флаг первого события нового указателя.</param>
            <param name="isInRange">Флаг указателя в пределах области видимости детектора.</param>
            <param name="isInContact">Флаг контакта указателя с поверхностью экрана.</param>
            <param name="buttons">Нажатые кнопки.</param>
            <param name="isPrimary">Возвращает флаг основного указателя.</param>
            <param name="hasConfidence">Возвращает флаг уверенности.</param>
            <param name="isCanceled"></param>
            <param name="x">X-координата указателя.</param>
            <param name="y">Y-координата указателя.</param>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.PointerId">
            <summary>Возвращает идентификатор указателя.</summary>
            <value>Идентификатор указателя.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.IsNew">
            <summary>Флаг первого события нового указателя.</summary>
            <value><c>true</c>, если данное событие - первое, сгенерированное новым указателем; иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.IsInRange">
            <summary>Флаг указателя в пределах области видимости детектора.</summary>
            <value><c>true</c>, если указатель находится в пределах области видимости детектора.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.IsInContact">
            <summary>Флаг контакта указателя с поверхностью экрана.</summary>
            <value><c>true</c>, если указатель контактирует с экраном, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.Buttons">
            <summary>Возвращает нажатые кнопки.</summary>
            <value>Нажатые кнопки.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.IsPrimary">
            <summary>Возвращает флаг основного указателя.</summary>
            <value><c>true</c>, если указатель, сгенерировыавший событие, считается основным; иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.HasConfidence">
            <summary>Возвращает флаг уверенности.</summary>
            <value><c>true</c>, если система уверена в неслучайном срабатывании, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.IsCanceled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.X">
            <summary>Возвращает X-координату указателя.</summary>
            <value>X-координата указателя.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.Y">
            <summary>Возвращает Y-координату указателя.</summary>
            <value>Y-координата указателя.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.Location">
            <summary>Возвращает позицию указателя.</summary>
            <value>Позиция указателя.</value>
        </member>
        <member name="P:Mallenom.Touch.PointerEventArgs.Handled">
            <summary>Возвращает и устанавливает флаг обработанного события.</summary>
            <value><c>true</c> - событие обработано приложением, иначе - <c>false</c>.</value>
            <remarks>
            Если событие не будет отмечено как обработанное, то это может привести
            к генерации Mouse-событий.
            </remarks>
        </member>
        <member name="T:Mallenom.Touch.PointerHelper">
            <summary>Вспомогательный класс для получения POINTER-событий.</summary>
        </member>
        <member name="E:Mallenom.Touch.PointerHelper.PointerDown">
            <summary>Указатель опустился.</summary>
        </member>
        <member name="E:Mallenom.Touch.PointerHelper.PointerUp">
            <summary>Указатель поднялся.</summary>
        </member>
        <member name="E:Mallenom.Touch.PointerHelper.PointerEnter">
            <summary>Указатель вошел в границы контрола.</summary>
        </member>
        <member name="E:Mallenom.Touch.PointerHelper.PointerLeave">
            <summary>Указатель вышел за границы контрола.</summary>
        </member>
        <member name="E:Mallenom.Touch.PointerHelper.PointerUpdate">
            <summary>Указатель перемещеается в пределах контрола.</summary>
        </member>
        <member name="E:Mallenom.Touch.PointerHelper.QuerySystemGestureStatus">
            <summary>Запрошен статус поддержки жестов.</summary>
        </member>
        <member name="T:Mallenom.Touch.QuerySystemGestureStatusEventArgs">
            <summary>Аргументы события <see cref="M:PointerHelper.QuerySystemGestureStatus"/>.</summary>
        </member>
        <member name="M:Mallenom.Touch.QuerySystemGestureStatusEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Создание <see cref="T:Mallenom.Touch.QuerySystemGestureStatusEventArgs"/>.</summary>
            <param name="x">X-координата указателя.</param>
            <param name="y">Y-координата указателя.</param>
        </member>
        <member name="P:Mallenom.Touch.QuerySystemGestureStatusEventArgs.X">
            <summary>Возвращает X-координату указателя.</summary>
            <value>X-координата указателя.</value>
        </member>
        <member name="P:Mallenom.Touch.QuerySystemGestureStatusEventArgs.Y">
            <summary>Возвращает Y-координату указателя.</summary>
            <value>Y-координата указателя.</value>
        </member>
        <member name="P:Mallenom.Touch.QuerySystemGestureStatusEventArgs.Location">
            <summary>Возвращает позицию указателя.</summary>
            <value>Позиция указателя.</value>
        </member>
        <member name="P:Mallenom.Touch.QuerySystemGestureStatusEventArgs.Flags">
            <summary>Возвращает и устанавливает флаги статуса жестов.</summary>
            <value>Флаги статуса жестов.</value>
        </member>
        <member name="T:Mallenom.Touch.QuerySystemGestureStatusFlags">
            <summary>Флаги события QuerySystemGestureStatusEvent.</summary>
        </member>
        <member name="M:Mallenom.InternalUtility.ConvertEx(System.Object,System.Type)">
            <summary>
            Преобразует значение из типа <see cref="T:System.Object" /> в значение типа <paramref name="type" />.
            </summary>
        </member>
        <member name="T:Mallenom.Widgets.BoundsChangedEventArgs">
            <summary>Аргументы события изменения расположения виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.BoundsChangedEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Создание <see cref="T:Mallenom.Widgets.BoundsChangedEventArgs"/>.</summary>
            <param name="deltaX">Изменеие положения по оси X.</param>
            <param name="deltaY">Изменеие положения по оси Y.</param>
            <param name="deltaWidth">Изменение ширины.</param>
            <param name="deltaHeight">Изменение высоты.</param>
        </member>
        <member name="P:Mallenom.Widgets.BoundsChangedEventArgs.DeltaX">
            <summary>Возвращает изменение координаты по оси X.</summary>
            <value>Изменение координаты по оси X.</value>
        </member>
        <member name="P:Mallenom.Widgets.BoundsChangedEventArgs.DeltaY">
            <summary>Возвращает изменение координаты по оси Y.</summary>
            <value>Изменение координаты по оси Y.</value>
        </member>
        <member name="P:Mallenom.Widgets.BoundsChangedEventArgs.DeltaWidth">
            <summary>Возвращает изменение ширины.</summary>
            <value>Изменение ширины.</value>
        </member>
        <member name="P:Mallenom.Widgets.BoundsChangedEventArgs.DeltaHeight">
            <summary>Возвращает изменение высоты.</summary>
            <value>Изменение высоты.</value>
        </member>
        <member name="P:Mallenom.Widgets.BoundsChangedEventArgs.DeltaLocation">
            <summary>Возвращает изменение координат виджета.</summary>
            <value>Изменение координат виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.BoundsChangedEventArgs.DeltaSize">
            <summary>Возвращает изменение размеров виджета.</summary>
            <value>Изменение размеров виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.BoundsChangedEventArgs.SizeChanged">
            <summary>Возвращает флаг изменения размеров виджета.</summary>
            <value><c>true</c>, если размер изменился, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Widgets.BoundsChangedEventArgs.LocationChanged">
            <summary>Возвращает флаг изменения позиции виджета.</summary>
            <value><c>true</c>, если позиция изменилась, иначе - <c>false</c>.</value>
        </member>
        <member name="T:Mallenom.Widgets.ControlWidgetAdapter">
            <summary>Преобразует контрол WinForms в хост для виджетов.</summary>
        </member>
        <member name="M:Mallenom.Widgets.ControlWidgetAdapter.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Widgets.ControlWidgetAdapter"/>.</summary>
            <param name="control">Контрол, в котором будут отображаться виджеты.</param>
            <param name="enableTouchSupport">Включить улучшенную поддержку touch-дисплеев.</param>
        </member>
        <member name="P:Mallenom.Widgets.ControlWidgetAdapter.Control">
            <summary>Возвращает контрол, в котором отображаются виджеты.</summary>
            <value>Контрол, в котором отображаются виджеты.</value>
        </member>
        <member name="M:Mallenom.Widgets.ControlWidgetAdapter.Dispose">
            <summary>Ликвидирует объект.</summary>
        </member>
        <member name="T:Mallenom.Widgets.IWidgetRenderer">
            <summary>Отрисовщик виджета.</summary>
        </member>
        <member name="P:Mallenom.Widgets.IWidgetRenderer.InvalidateFlags">
            <summary>Возвращает набор флагов, указывающих, в каких случаях следует перерисовывать виджет.</summary>
        </member>
        <member name="M:Mallenom.Widgets.IWidgetRenderer.Render(Mallenom.Widgets.Widget,System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>Отрисовывает виджет.</summary>
            <param name="widget">Отрисовываемый виджет.</param>
            <param name="graphics">Контекст графического устройства.</param>
            <param name="location">Абсолютная позиция виджета.</param>
            <param name="clipRectangle">Область отрисовки.</param>
        </member>
        <member name="E:Mallenom.Widgets.Primitives.ThumbWidget.Moved">
            <summary><see cref="T:Mallenom.Widgets.Primitives.ThumbWidget"/> перемещен пользователем.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Primitives.ThumbWidget.OnMoved(Mallenom.Widgets.Primitives.ThumbMovedEventArgs)">
            <summary>Вызывается при перемещении виджета пользователем.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="T:Mallenom.Widgets.RectangleExtensions">
            <summary>Расширения для <see cref="T:System.Drawing.Rectangle"/>.</summary>
        </member>
        <member name="T:Mallenom.Widgets.ScrollBarVisibility">
            <summary>Режим отображения полосы прокрутки.</summary>
        </member>
        <member name="F:Mallenom.Widgets.ScrollBarVisibility.Auto">
            <summary>Автоматически.</summary>
        </member>
        <member name="F:Mallenom.Widgets.ScrollBarVisibility.Always">
            <summary>Всегда показывать.</summary>
        </member>
        <member name="F:Mallenom.Widgets.ScrollBarVisibility.Never">
            <summary>Никогда не показывать.</summary>
        </member>
        <member name="T:Mallenom.Widgets.ScrollBarWidget">
            <summary>Полоса прокрутки.</summary>
        </member>
        <member name="M:Mallenom.Widgets.ScrollBarWidget.#ctor(System.Windows.Forms.Orientation)">
            <summary>Создание <see cref="T:Mallenom.Widgets.ScrollBarWidget"/>.</summary>
            <param name="orientation">Ориентация полосы прокрутки.</param>
        </member>
        <member name="P:Mallenom.Widgets.ScrollBarWidget.Style">
            <summary>Возвращает и устанаваливает стиль полосы прокрутки.</summary>
            <value>Стиль полосы прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollBarWidget.Orientation">
            <summary>Возвращает ориентацию полосы прокрутки.</summary>
            <value>Ориентация полосы прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollBarWidget.Value">
            <summary>Возвращает и устанавливает текущее значение полосы прокрутки.</summary>
            <value>Текущее значение полосы прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollBarWidget.Minimum">
            <summary>Возвращает и устанавливает минимальное значение полосы прокрутки.</summary>
            <value>Минимальное значение полосы прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollBarWidget.Maximum">
            <summary>Возвращает и устанавливает максимальное значение полосы прокрутки.</summary>
            <value>Максимальное значение полосы прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollBarWidget.SmallChange">
            <summary>Возвращает и устанавливает значение, на которое прокручивается полоса при нажатии на кнопки прокрутки.</summary>
            <value>Значение, на которое прокручивается полоса при нажатии на кнопки прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollBarWidget.LargeChange">
            <summary>Возвращает и устанавливает значение, соответствующее отображаемой части прокручиваемого контента.</summary>
            <value>Значение, соответствующее отображаемой части прокручиваемого контента.</value>
        </member>
        <member name="T:Mallenom.Widgets.ScrollViewWidget">
            <summary>Виджет с полосами прокрутки.</summary>
        </member>
        <member name="M:Mallenom.Widgets.ScrollViewWidget.#ctor">
            <summary>Создание <see cref="T:Mallenom.Widgets.ScrollViewWidget"/>.</summary>
        </member>
        <member name="P:Mallenom.Widgets.ScrollViewWidget.Content">
            <summary>Возвращает и устанавливает прокручиваемый контент.</summary>
            <value>Прокручиваемый контент.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollViewWidget.BackColor">
            <summary>Возвращает и устанавливает цвет фона.</summary>
            <value>Цвет фона.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollViewWidget.VerticalScrollbarVisibility">
            <summary>Возвращает и устанавливает режим отображения вертикальной полосы прокрутки.</summary>
            <value>Режим отображения вертикальной полосы прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollViewWidget.HorizontalScrollbarVisibility">
            <summary>Возвращает и устанавливает режим отображения горизонтальной полосы прокрутки.</summary>
            <value>Режим отображения горизонтальной полосы прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollViewWidget.VerticalScrollbar">
            <summary>Возвращает вертикальную полосу прокрутки.</summary>
            <value>Вертикальная полоса прокрутки.</value>
        </member>
        <member name="P:Mallenom.Widgets.ScrollViewWidget.HorizontalScrollBar">
            <summary>Возвращает горизонтальную полосу прокрутки.</summary>
            <value>Горизонтальная полоса прокрутки.</value>
        </member>
        <member name="M:Mallenom.Widgets.ScrollViewWidget.OnRender(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>Вызывается при необходимости отрисовки виджета.</summary>
            <param name="graphics">Контекст графического устройства.</param>
            <param name="location">Позиция, в которой отрисовывается виджет.</param>
            <param name="clipRectangle">Отрисовываемая область.</param>
        </member>
        <member name="T:Mallenom.Widgets.StackPanelWidget">
            <summary>Панель, раскладывающая дочерние виджеты в стек.</summary>
        </member>
        <member name="E:Mallenom.Widgets.StackPanelWidget.OrientationChanged">
            <summary>Значение свойства <see cref="P:Mallenom.Widgets.StackPanelWidget.Orientation"/> изменилось.</summary>
        </member>
        <member name="M:Mallenom.Widgets.StackPanelWidget.OnOrientationChnaged(System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="P:Mallenom.Widgets.StackPanelWidget.Orientation"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.StackPanelWidget.#ctor">
            <summary>Создание <see cref="T:Mallenom.Widgets.StackPanelWidget"/>.</summary>
        </member>
        <member name="P:Mallenom.Widgets.StackPanelWidget.Orientation">
            <summary>Возвращает и устанавливает ориентацию панели.</summary>
            <value>Ориентация панели.</value>
        </member>
        <member name="M:Mallenom.Widgets.StackPanelWidget.OnChildWidgetSizeChanged(System.Object,System.EventArgs)">
            <summary>Вызывается при изменении размеров дочернего виджета.</summary>
            <param name="sender">Виджет, изменивший размеры.</param>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.StackPanelWidget.OnChildWidgetIsVisibleChanged(System.Object,System.EventArgs)">
            <summary>Вызывается при изменении видимости дочернего виджета.</summary>
            <param name="sender">Виджет, изменивший видимость.</param>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.StackPanelWidget.ArrangeChildren">
            <summary>Располагает дочерние виджеты.</summary>
        </member>
        <member name="T:Mallenom.Widgets.Styles.MSVSScrollBarStyle.IColorTable">
            <summary>Defines colors for renderer.</summary>
        </member>
        <member name="T:Mallenom.Widgets.Widget">
            <summary>Виджет.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.#ctor(Mallenom.Widgets.WidgetFlags)">
            <summary>Создание <see cref="T:Mallenom.Widgets.Widget"/>.</summary>
            <param name="flags">Флаги виджета.</param>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Flags">
            <summary>Возвращает флаги виджета.</summary>
            <value>Флаги виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.HandlesMouseEvents">
            <summary>Возвращает и устанавливает флаг обработки событий мыши.</summary>
            <value><c>true</c>, если данный виджет обрабатывает события мыши, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.HandlesMouseWheelEvents">
            <summary>Возвращает и устанавливает флаг обработки событий прокрутки колеса мыши.</summary>
            <value><c>true</c>, если данный виджет обрабатывает события поркрутки мыши, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.HostControl">
            <summary>Возвращает контрол, в котором хостится данный виджет.</summary>
            <value>Контрол, в котором хостится данный виджет.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Layout">
            <summary>Возвращает и устанавливает логику автоматического расположения виджета.</summary>
            <value>Логика автоматического расположения виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Root">
            <summary>Возвращает корневой виджет.</summary>
            <value>Корневой виджет.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.HasChildren">
            <summary>Возвращает флаг наличия дочерних виджетов.</summary>
            <value><c>true</c>, если дочерние виджеты есть, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Children">
            <summary>Возвращает коллекцию дочерних виджетов.</summary>
            <value>Коллекция дочерних виджетов.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Parent">
            <summary>Возвращает и устанавливает родительский виджет.</summary>
            <value>Родительский виджет.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Bounds">
            <summary>Возвращает и устанавливает координаты привязки виджета.</summary>
            <value>Координаты привязки виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Location">
            <summary>Возвращает и устанавливает координаты виджета.</summary>
            <value>Координаты виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Left">
            <summary>Возвращает отступ от левого края родительского виджета.</summary>
            <value>Отступ от левого края родительского виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Top">
            <summary>Возвращает отступ от верхнего края родительского виджета.</summary>
            <value>Отступ от верхнего края родительского виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Size">
            <summary>Возвращает и устанавливает размер виджета.</summary>
            <value>Размер виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Width">
            <summary>Возвращает и устанавливает ширину виджета.</summary>
            <value>Ширина виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Height">
            <summary>Возвращает и устанавливает высоту виджета.</summary>
            <value>Высота виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.ClientRectangle">
            <summary>Возвращает прямоугольник, описывающий виджет в его клиентских координатах.</summary>
            <value>Прямоугольник, описывающий виджет в его клиентских координатах.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.IsVisible">
            <summary>Возвращает флаг видимости виджета.</summary>
            <value><c>true</c>, если виджет виден, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.IsMouseOver">
            <summary>Возвращает флаг позиции указателя мыши над виджетом.</summary>
            <value><c>true</c>, если указатель мыши в данный момент над виджетом, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.IsMouseDirectlyOver">
            <summary>Возвращает флаг позиции указателя мыши над виджетом.</summary>
            <value><c>true</c>, если указатель мыши в данный момент над виджетом, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Cursor">
            <summary>Возвращает и устанавливает курсор.</summary>
            <value>Курсор.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.IsMouseCaptured">
            <summary>Возвращает флаг захвата указателя мыши виджетом.</summary>
            <value><c>true</c>, если указатель мыши захвачен, иначе - <c>false</c>.</value>
            <remarks>При захваченном указателе виджет получает все MouseMove и MouseUp события.</remarks>
        </member>
        <member name="P:Mallenom.Widgets.Widget.IsPressed">
            <summary>Возвращает флаг зажатой левой кнопки мыши.</summary>
            <value><c>true</c>, если над виджетом зажата левая кнопка мыши, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Renderer">
            <summary>Возвращает и устанавливает отрисовщик виджета.</summary>
            <value>Отрисовщик виджета.</value>
        </member>
        <member name="M:Mallenom.Widgets.Widget.GetWidgetClipRectangle">
            <summary>Возвращает прямоугольник обрезки дочерних виджетов с учетом иерархии.</summary>
            <returns>Прямоугольная область, в которой могут отображаться дочерние виджеты.</returns>
        </member>
        <member name="M:Mallenom.Widgets.Widget.Invalidate">
            <summary>Сообщает о необходимости перерисовки виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.Invalidate(System.Drawing.Rectangle)">
            <summary>Сообщает о необходимости перерисовки виджета.</summary>
            <param name="invalidRect">Обоасть, требующая перерисовки.</param>
        </member>
        <member name="M:Mallenom.Widgets.Widget.HitTest(System.Int32,System.Int32)">
            <summary>Определяет, попадают ли указанные координаты в границы виджета.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
            <returns><c>true</c>, если указанные координаты попадают в область действия виджета, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Widgets.Widget.HandleMouseMove(System.Windows.Forms.MouseButtons,System.Int32,System.Int32)">
            <summary>Обрабатывает перемещние указателя мыши.</summary>
            <param name="buttons">Зажатые кнопки.</param>
            <param name="x">X-координата.</param>
            <param name="y">Y-координата.</param>
        </member>
        <member name="M:Mallenom.Widgets.Widget.HandleMouseDown(System.Windows.Forms.MouseButtons,System.Int32,System.Int32)">
            <summary>Обрабатывает нажатие кнопки мыши.</summary>
            <param name="buttons">Нажатые кнопки.</param>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
            <returns>Виджет, обработавший нажатие.</returns>
        </member>
        <member name="M:Mallenom.Widgets.Widget.HandleMouseUp(System.Windows.Forms.MouseButtons,System.Int32,System.Int32)">
            <summary>Обрабатывает отпускание кнопки мыши.</summary>
            <param name="buttons">Нажатые кнопки.</param>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnRender(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>Вызывается при необходимости отрисовки виджета.</summary>
            <param name="graphics">Контекст графического устройства.</param>
            <param name="location">Позиция, в которой отрисовывается виджет.</param>
            <param name="clipRectangle">Отрисовываемая область.</param>
        </member>
        <member name="M:Mallenom.Widgets.Widget.RenderChildren(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>Отрисовывает дочерние виджеты.</summary>
            <param name="graphics">Контекст графического устройства.</param>
            <param name="location">Позиция, в которой отрисовывается виджет.</param>
            <param name="clipRectangle">Отрисовываемая область.</param>
        </member>
        <member name="P:Mallenom.Widgets.Widget.Events">
            <summary>Возвращает обработчики событий виджета.</summary>
            <value>Обработчики событий виджета.</value>
        </member>
        <member name="E:Mallenom.Widgets.Widget.ParentChanged">
            <summary>Изменился родительский виджет.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnParentChanged(System.EventArgs)">
            <summary>Вызывается при изменении родительского виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.BoundsChanged">
            <summary>Изменены координаты и/или размер виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnBoundsChanged(Mallenom.Widgets.BoundsChangedEventArgs)">
            <summary>Вызывается при изменении координат привязки виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.CursorChanged">
            <summary>Изменился курсор.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnCursorChanged(System.EventArgs)">
            <summary>Вызывается при изменении курсора.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.LocationChanged">
            <summary>Координаты виджета изменены.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnLocationChanged(System.EventArgs)">
            <summary>Вызывается при изменении координат виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.SizeChanged">
            <summary>Размеры виджета изменены.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnSizeChanged(System.EventArgs)">
            <summary>Вызывается при изменении размеров виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.IsVisibleChanged">
            <summary>Изменился флаг видимости виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnIsVisibleChanged(System.EventArgs)">
            <summary>Вызывается при изменении свойства <see cref="M:IsVisible"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.IsMouseOverChanged">
            <summary>Указатель мыши вошел (или вышел) в пределы виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnIsMouseOverChanged(System.EventArgs)">
            <summary>Вызывается при изменении свойства <see cref="M:IsMouseOver"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.IsMouseDirectlyOverChanged">
            <summary>Указатель мыши вошел (или вышел) в пределы виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnIsMouseDirectlyOverChanged(System.EventArgs)">
            <summary>Вызывается при изменении свойства <see cref="M:IsMouseDirectlyOver"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.IsMouseCapturedChanged">
            <summary>Состояние захвата указателя мыши изменилось.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnIsMouseCapturedChanged(System.EventArgs)">
            <summary>Вызывается при изменении состояния захвата указателя мыши.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.IsPressedChanged">
            <summary>Нажата (или отпущена) левая кнопка мыши.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnIsPressedChanged(System.EventArgs)">
            <summary>Вызывается при изменении свойства <see cref="M:IsPressed"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.Invalidated">
            <summary>Требуется перерисовка.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnInvalidated(Mallenom.Widgets.WidgetInvalidatedEventArgs)">
            <summary>Вызывается при необходимости перерисовки.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.HasChildrenChanged">
            <summary>Значение совйства <see cref="P:Mallenom.Widgets.Widget.HasChildren"/> изменено.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnHasChildrenChanged(System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="P:Mallenom.Widgets.Widget.HasChildren"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.MouseLeave">
            <summary>Указатель мыши вышел за пределы виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnMouseLeave(System.EventArgs)">
            <summary>Вызывается при выходе указателя мыши за пределы виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.WidgetAdded">
            <summary>Добавлен дочерний виджет.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnWidgetAdded(Mallenom.Widgets.WidgetEventArgs)">
            <summary>Вызывается при добавлении дочернего вилджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.WidgetRemoved">
            <summary>Дочерний виджет удален.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnWidgetRemoved(Mallenom.Widgets.WidgetEventArgs)">
            <summary>Вызывается при удалении дочернего виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.MouseMove">
            <summary>Происходит перемещение указателя над виджетом.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnMouseMove(Mallenom.Widgets.WidgetMouseEventArgs)">
            <summary>Вызывается при перемещении указателя над виджетом.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.MouseDown">
            <summary>Происходит при нажатии кнопки мыши.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnMouseDown(Mallenom.Widgets.WidgetMouseEventArgs)">
            <summary>Вызывается при нажатии кнопки мыши.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.MouseUp">
            <summary>Происходит при отпускании кнопки мыши.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnMouseUp(Mallenom.Widgets.WidgetMouseEventArgs)">
            <summary>Вызывается при отпускании кнопки мыши.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.MouseWheel">
            <summary>Происходит при прокрутке колеса мыши.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnMouseWheel(Mallenom.Widgets.WidgetMouseEventArgs)">
            <summary>Вызывается при прокрутке колеса мыши.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.Click">
            <summary>Щелчок левой кнопкой.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnClick(System.EventArgs)">
            <summary>Вызывается при щелчке левой кнопки мыши.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.IsEnabledChanged">
            <summary>Значение свойства <see cref="P:Mallenom.Widgets.Widget.IsEnabled"/> изменено.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnIsEnabledChanged(System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="P:Mallenom.Widgets.Widget.IsEnabled"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.RendererChanged">
            <summary>Значение свойства <see cref="P:Mallenom.Widgets.Widget.Renderer"/> изменено.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnRendererChanged(System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="P:Mallenom.Widgets.Widget.Renderer"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.Widget.LayoutChanged">
            <summary>Значение свойства <see cref="P:Mallenom.Widgets.Widget.Layout"/> изменено.</summary>
        </member>
        <member name="M:Mallenom.Widgets.Widget.OnLayoutChanged(System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="P:Mallenom.Widgets.Widget.Layout"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="T:Mallenom.Widgets.WidgetAdapter">
            <summary>Адаптер для работы с виджетами.</summary>
        </member>
        <member name="T:Mallenom.Widgets.WidgetAdapter.HoveredWidgetsTracker">
            <summary>Трекер виджетов, над котоыми расположен указатель мыши.</summary>
        </member>
        <member name="E:Mallenom.Widgets.WidgetAdapter.RootWidgetChanged">
            <summary>Корнеыой виджет был изменен.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetAdapter.OnRootWidgetChanged(System.EventArgs)">
            <summary>Вызывается при изменении корневого виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Widgets.WidgetAdapter.CursorChanged">
            <summary>Актуальный курсор изменился.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetAdapter.OnCursorChanged(System.EventArgs)">
            <summary>Вызывается при изменении актуального курсора.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetAdapter.#ctor">
            <summary>Создание <see cref="T:Mallenom.Widgets.WidgetAdapter"/>.</summary>
        </member>
        <member name="P:Mallenom.Widgets.WidgetAdapter.RootWidget">
            <summary>Возвращает и устанавливает корнеыой виджет.</summary>
            <value>Корневой виджет.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetAdapter.CaptureWidget">
            <summary>Возвращает и устанавливает виджет, получающий все события указателя мыши.</summary>
            <value>Виджет, получающий все события указателя мыши.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetAdapter.HoveredWidget">
            <summary>Возвращает и устанавливает виджет, над которым находится указатель.</summary>
            <value>Виджет, над которым находится указатель.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetAdapter.PressedWidget">
            <summary>Возвращает и устанавливает нажатый виджет.</summary>
            <value>Нажатый виджет.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetAdapter.CursorWidget">
            <summary>Возвращает и устаналвивает виджет, являющийся источником курсора.</summary>
            <value>Виджет, являющийся источником курсора.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetAdapter.Cursor">
            <summary>Возвращает актуальный курсор.</summary>
            <value>Актуальный курсор.</value>
        </member>
        <member name="M:Mallenom.Widgets.WidgetAdapter.Invalidate(System.Drawing.Rectangle)">
            <summary>Вызывается при необходимости перерисовать часть хоста.</summary>
            <param name="invalidRect">Прямоугольная область, подлежащая перерисовке.</param>
        </member>
        <member name="T:Mallenom.Widgets.WidgetAncestorEnumerator">
            <summary>Перечислитель родительских виджетов.</summary>
        </member>
        <member name="T:Mallenom.Widgets.WidgetEventArgs">
            <summary>Аргументы события, связанного с виджетом.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetEventArgs.#ctor(Mallenom.Widgets.Widget)">
            <summary>Создание <see cref="T:Mallenom.Widgets.WidgetEventArgs"/>.</summary>
            <param name="widget">Виджет, связанный с событием.</param>
        </member>
        <member name="P:Mallenom.Widgets.WidgetEventArgs.Widget">
            <summary>Возвращает виджет, связанный с событием.</summary>
            <value>Виджет, связанный с событием.</value>
        </member>
        <member name="T:Mallenom.Widgets.WidgetEvents">
            <summary>Коллекция обработчиков событий виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetEvents.#ctor">
            <summary>Создание <see cref="T:Mallenom.Widgets.WidgetEvents"/>.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetEvents.AddHandler(System.Object,System.Delegate)">
            <summary>Добавляет обработчик события.</summary>
            <param name="eventKey">Ключ события.</param>
            <param name="handler">Обработчик события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetEvents.RemoveHandler(System.Object,System.Delegate)">
            <summary>Удаляет обработчик события.</summary>
            <param name="eventKey">Ключ события.</param>
            <param name="handler">Обработчик события.</param>
        </member>
        <member name="P:Mallenom.Widgets.WidgetEvents.Item(System.Object)">
            <summary>Возвращает обработчик указанного события.</summary>
            <param name="eventKey">Ключ события.</param>
            <returns>Обработчик события или <c>null</c>, если обработчика нет.</returns>
        </member>
        <member name="M:Mallenom.Widgets.WidgetEvents.Raise(System.Object,System.Object,System.EventArgs)">
            <summary>Генерирует указанное событие.</summary>
            <param name="sender">Источник события.</param>
            <param name="eventKey">Ключ собтия.</param>
            <param name="e">Аргумениты события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetEvents.Raise``1(System.Object,System.Object,``0)">
            <summary>Генерирует указанное событие.</summary>
            <typeparam name="T">Тип аргументов события.</typeparam>
            <param name="sender">Источник события.</param>
            <param name="eventKey">Ключ собтия.</param>
            <param name="e">Аргумениты события.</param>
        </member>
        <member name="T:Mallenom.Widgets.WidgetExtensions">
            <summary>Расширения для <see cref="T:Mallenom.Widgets.Widget"/>.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetExtensions.Dock(Mallenom.Widgets.Widget,System.Windows.Forms.DockStyle)">
            <summary>Пристыковать виджет относительно родительского виджета.</summary>
            <param name="widget">Пристыковываемый виджет.</param>
            <param name="dock">Желаемое расположение виджета.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetExtensions.Dock(Mallenom.Widgets.Widget,System.Windows.Forms.Padding,System.Windows.Forms.DockStyle)">
            <summary>Пристыковать виджет относительно родительского виджета.</summary>
            <param name="widget">Пристыковываемый виджет.</param>
            <param name="margin">Отступы от границ виджета до границ родительского виджета.</param>
            <param name="dock">Желаемое расположение виджета.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetExtensions.CenterParent(Mallenom.Widgets.Widget)">
            <summary>Центрует виджет относительно родительского.</summary>
            <param name="widget">Центруемый виджет.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetExtensions.CenterParent(Mallenom.Widgets.Widget,System.Windows.Forms.Padding)">
            <summary>Центрует виджет относительно родительского.</summary>
            <param name="widget">Центруемый виджет.</param>
            <param name="margin">Дополнительные внешние размеры виджета.</param>
        </member>
        <member name="T:Mallenom.Widgets.WidgetFlags">
            <summary>Флаги виджета.</summary>
        </member>
        <member name="F:Mallenom.Widgets.WidgetFlags.None">
            <summary>Без флагов.</summary>
        </member>
        <member name="F:Mallenom.Widgets.WidgetFlags.DisableChildrenScrollOptimization">
            <summary>Отключить оптимизацию прокрутки дочерних виджетов.</summary>
        </member>
        <member name="F:Mallenom.Widgets.WidgetFlags.DisableParentScrollOptimization">
            <summary>Отключить оптимизацию прокрутки в родительском виджете.</summary>
        </member>
        <member name="T:Mallenom.Widgets.WidgetInvalidatedEventArgs">
            <summary>Аргументы события запроса перерисовки виджета.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetInvalidatedEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>Создание <see cref="T:Mallenom.Widgets.WidgetInvalidatedEventArgs"/>.</summary>
            <param name="invalidRect">Область, требующая перерисовки.</param>
        </member>
        <member name="P:Mallenom.Widgets.WidgetInvalidatedEventArgs.InvalidRect">
            <summary>Возвращает область, требующую перерисовки.</summary>
            <value>Область, требующая перерисовки.</value>
        </member>
        <member name="T:Mallenom.Widgets.WidgetLayout">
            <summary>Логика расположения виджета относительно родителя.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetLayout.#ctor">
            <summary>Создание <see cref="T:Mallenom.Widgets.WidgetLayout"/>.</summary>
        </member>
        <member name="P:Mallenom.Widgets.WidgetLayout.Anchor">
            <summary>Возвращает и устанавливает стороны привязки виджета.</summary>
            <value>Стороны привязки виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetLayout.Dock">
            <summary>Возвращает и устанавливает способ заполнения пространства родительского виджета.</summary>
            <value>Способ заполнения пространства родительского виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetLayout.Margin">
            <summary>Возвращает и устанавливает отступы до границ родительского виджета.</summary>
            <value>Отступы до границ родительского виджета.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetLayout.Owner">
            <summary>Виджет, которые подчиняется данной логике.</summary>
        </member>
        <member name="T:Mallenom.Widgets.WidgetMouseEventArgs">
            <summary>Аргументы события, связанного с мышью.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetMouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32)">
            <summary>Создание <see cref="T:Mallenom.Widgets.WidgetMouseEventArgs"/>.</summary>
            <param name="buttons">Кнопки мышиЮ связанные с событием.</param>
            <param name="x">Координата X указателя мыши.</param>
            <param name="y">Координата Y указателя мыши.</param>
            <param name="delta">Счетчик поворотов колеса мыши.</param>
        </member>
        <member name="P:Mallenom.Widgets.WidgetMouseEventArgs.Buttons">
            <summary>Возвращает кнопки мыши, связанные с событием. </summary>
            <value>Кнопки мышиЮ связанные с событием.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetMouseEventArgs.X">
            <summary>Возвращает координату X указателя мыши.</summary>
            <value>Координата X указателя мыши.</value>
            <remarks>Координаты заданы относительно виджета.</remarks>
        </member>
        <member name="P:Mallenom.Widgets.WidgetMouseEventArgs.Y">
            <summary>Возвращает координату Y указателя мыши.</summary>
            <value>Координата Y указателя мыши.</value>
            <remarks>Координаты заданы относительно виджета.</remarks>
        </member>
        <member name="P:Mallenom.Widgets.WidgetMouseEventArgs.Delta">
            <summary>Возвращает счетчик поворотов колеса мыши.</summary>
            <value>Счетчик поворотов колеса мыши.</value>
        </member>
        <member name="P:Mallenom.Widgets.WidgetMouseEventArgs.Location">
            <summary>Возвращает координаты указателя мыши.</summary>
            <value>Координаты указателя мыши.</value>
            <remarks>Координаты заданы относительно виджета.</remarks>
        </member>
        <member name="T:Mallenom.Widgets.WidgetsCollection">
            <summary>Коллекция виджетов.</summary>
        </member>
        <member name="E:Mallenom.Widgets.WidgetsCollection.WidgetAdded">
            <summary>Виджет добавлен.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetsCollection.OnWidgetAdded(Mallenom.Widgets.Widget)">
            <summary>Вызывается при добалении виджета.</summary>
            <param name="widget">Добавленный виджет.</param>
        </member>
        <member name="E:Mallenom.Widgets.WidgetsCollection.WidgetRemoved">
            <summary>Виджет удален.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WidgetsCollection.OnWidgetRemoved(Mallenom.Widgets.Widget)">
            <summary>Вызывается при удалении виджета.</summary>
            <param name="widget">Удаленный виджет.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetsCollection.#ctor(Mallenom.Widgets.Widget)">
            <summary>Создание <see cref="T:Mallenom.Widgets.WidgetsCollection"/>.</summary>
            <param name="owner">Владелец коллекции.</param>
        </member>
        <member name="P:Mallenom.Widgets.WidgetsCollection.Owner">
            <summary>Возвращает владельца коллекции виджетов.</summary>
            <value>Владелец коллекции виджетов.</value>
        </member>
        <member name="M:Mallenom.Widgets.WidgetsCollection.SetItem(System.Int32,Mallenom.Widgets.Widget)">
            <summary>Вызывается при замене элемента.</summary>
            <param name="index">Индекс элемента.</param>
            <param name="item">Новвый элемент.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetsCollection.InsertItem(System.Int32,Mallenom.Widgets.Widget)">
            <summary>Вызывается при вставке элемента.</summary>
            <param name="index">Индекс элемента.</param>
            <param name="item">Новвый элемент.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetsCollection.RemoveItem(System.Int32)">
            <summary>Вызывается при удалении элемента.</summary>
            <param name="index">Индекс удаляемого элемента.</param>
        </member>
        <member name="M:Mallenom.Widgets.WidgetsCollection.ClearItems">
            <summary>Вызывается при очистке коллекции.</summary>
        </member>
        <member name="T:Mallenom.Widgets.WrapPanel">
            <summary>Панель последовательно раскладывющая элементы слева направо, разбивая содержимое до следующей строки на краю содержащего окна.</summary>
            <remarks>
            Размещает дочерние элементы последовательно слева направо, разбивая содержимое до следующей строки на краю содержащего окна.
            Последующее упорядочивание происходит последовательно сверху вниз или справа налево, в зависимости от значения Orientation свойство.
            </remarks>
        </member>
        <member name="F:Mallenom.Widgets.WrapPanel._orientation">
            <summary>Ориентация панели.</summary>
        </member>
        <member name="F:Mallenom.Widgets.WrapPanel.OrientationChangedEvent">
            <summary>Объект собития изменения свойства <see cref="P:Mallenom.Widgets.WrapPanel.Orientation"/>.</summary>
        </member>
        <member name="E:Mallenom.Widgets.WrapPanel.OrientationChanged">
            <summary>Значение свойства <see cref="P:Mallenom.Widgets.WrapPanel.Orientation"/> изменилось.</summary>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.OnOrientationChanged(System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="P:Mallenom.Widgets.WrapPanel.Orientation"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.#ctor">
            <summary>Создает <see cref="T:Mallenom.Widgets.WrapPanel"/>.</summary>
        </member>
        <member name="P:Mallenom.Widgets.WrapPanel.Orientation">
            <summary>Возвращает и устанавливает ориентацию панели.</summary>
            <value>Ориентация панели.</value>
        </member>
        <member name="P:Mallenom.Widgets.WrapPanel.BackColor">
            <summary>Возвращает цвет фона.</summary>
            <value>Цвет фона.</value>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.OnSizeChanged(System.EventArgs)">
            <summary>Вызывается при изменении размеров виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.OnWidgetAdded(Mallenom.Widgets.WidgetEventArgs)">
            <summary>Вызывается при добавлении дочернего вилджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.OnWidgetRemoved(Mallenom.Widgets.WidgetEventArgs)">
            <summary>Вызывается при удалении дочернего виджета.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.OnChildWidgetSizeChanged(System.Object,System.EventArgs)">
            <summary>Вызывается при изменении размеров дочернего виджета.</summary>
            <param name="sender">Виджет, изменивший размеры.</param>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.OnChildWidgetIsVisibleChanged(System.Object,System.EventArgs)">
            <summary>Вызывается при изменении видимости дочернего виджета.</summary>
            <param name="sender">Виджет, изменивший видимость.</param>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.OnChildWidgetLayoutChanged(System.Object,System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="P:Mallenom.Widgets.Widget.Layout"/> дочернего виджета.</summary>
            <param name="sender">Виджет, изменивший видимость.</param>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Widgets.WrapPanel.ArrangeChildren">
            <summary>Располагает дочерние виджеты.</summary>
        </member>
        <member name="T:Mallenom.XmlUtlity.XmlDiff">
            <summary>Алгоритм сравнения XML-документов.</summary>
        </member>
        <member name="M:Mallenom.XmlUtlity.XmlDiff.GetName(System.Xml.Linq.XElement)">
            <summary>Возвращает полное имя XML-элемента.</summary>
            <param name="element">Элемент, имя которго требуется вычислить.</param>
            <returns></returns>
        </member>
        <member name="M:Mallenom.XmlUtlity.XmlDiff.Compare(System.Xml.Linq.XDocument,System.Xml.Linq.XDocument)">
            <summary>Сравнивает 2 XML-документа.</summary>
            <param name="a">Документ до изменений.</param>
            <param name="b">Документ после изменений.</param>
            <returns>Перечень обнаруженных изменений.</returns>
        </member>
        <member name="T:Mallenom.XmlUtlity.XmlDiffChange">
            <summary>Изменение XML-документа.</summary>
        </member>
        <member name="M:Mallenom.XmlUtlity.XmlDiffChange.#ctor(Mallenom.XmlUtlity.XmlObjectType,System.String,Mallenom.XmlUtlity.XmlDiffChangeType,System.String,System.String)">
            <summary>Создание <see cref="T:Mallenom.XmlUtlity.XmlDiffChange"/>.</summary>
            <param name="objectType">Тип объекта.</param>
            <param name="objectName">Имя объекта.</param>
            <param name="changeType">Тип изменения.</param>
            <param name="oldValue">Старое значение.</param>
            <param name="newValue">Новое значение.</param>
        </member>
        <member name="P:Mallenom.XmlUtlity.XmlDiffChange.ObjectName">
            <summary>Возвращает им яизмененного объекта.</summary>
            <value>Имя измененного объекта.</value>
        </member>
        <member name="P:Mallenom.XmlUtlity.XmlDiffChange.ObjectType">
            <summary>Возвращает тип измененного объекта.</summary>
            <value>Тип измененного объекта.</value>
        </member>
        <member name="P:Mallenom.XmlUtlity.XmlDiffChange.ChangeType">
            <summary>Возвращает тип изменения.</summary>
            <value>Тип изменения.</value>
        </member>
        <member name="P:Mallenom.XmlUtlity.XmlDiffChange.OldValue">
            <summary>Возвращает старое значение.</summary>
        </member>
        <member name="P:Mallenom.XmlUtlity.XmlDiffChange.NewValue">
            <summary>Возвращает новое значение.</summary>
            <value>Новое значение.</value>
        </member>
        <member name="M:Mallenom.XmlUtlity.XmlDiffChange.ToString">
            <summary>Возвращает строковое представление данного <see cref="T:Mallenom.XmlUtlity.XmlDiffChange"/>.</summary>
            <returns>Строковое представление данного <see cref="T:Mallenom.XmlUtlity.XmlDiffChange"/>.</returns>
        </member>
        <member name="T:Mallenom.XmlUtlity.XmlDiffChangeType">
            <summary>Тип изменения XML-документа.</summary>
        </member>
        <member name="F:Mallenom.XmlUtlity.XmlDiffChangeType.Added">
            <summary>Добавлено.</summary>
        </member>
        <member name="F:Mallenom.XmlUtlity.XmlDiffChangeType.Removed">
            <summary>Удалено.</summary>
        </member>
        <member name="F:Mallenom.XmlUtlity.XmlDiffChangeType.Changed">
            <summary>Изменено.</summary>
        </member>
        <member name="T:Mallenom.XmlUtlity.XmlObjectType">
            <summary>Тип измененного XML-объекта.</summary>
        </member>
        <member name="F:Mallenom.XmlUtlity.XmlObjectType.Element">
            <summary>XML-элемент.</summary>
        </member>
        <member name="F:Mallenom.XmlUtlity.XmlObjectType.Attribute">
            <summary>XML-атрибут.</summary>
        </member>
        <member name="T:Native.Constants">
            <summary>Константы для native-функций.</summary>
        </member>
        <member name="F:Native.Constants.INVALID_HANDLE_VALUE">
            <summary>Invalid handle value.</summary>
        </member>
        <member name="F:Native.Constants.HWND_BOTTOM">
            <summary>
            Places the window at the bottom of the Z order.
            If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.
            </summary>
        </member>
        <member name="F:Native.Constants.HWND_NOTOPMOST">
            <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows).
            This flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:Native.Constants.HWND_TOP">
            <summary>Places the window at the top of the Z order.</summary>
        </member>
        <member name="F:Native.Constants.HWND_TOPMOST">
            <summary>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.</summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_NONE">
            <summary>
            Prevents other processes from opening a file or device if they request delete, read, or write access.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_READ">
            <summary>
            Enables subsequent open operations on a file or device to request read access.
            Otherwise, other processes cannot open the file or device if they request read access.
            If this flag is not specified, but the file or device has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_WRITE">
            <summary>
            Enables subsequent open operations on a file or device to request write access.
            Otherwise, other processes cannot open the file or device if they request write access.
            If this flag is not specified, but the file or device has been opened for write access or has a file mapping with write access, the function fails.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_DELETE">
            <summary>
            Enables subsequent open operations on a file or device to request delete access.
            Otherwise, other processes cannot open the file or device if they request delete access.
            If this flag is not specified, but the file or device has been opened for delete access, the function fails.
            </summary>
            <remarks>Delete access allows both delete and rename operations.</remarks>
        </member>
        <member name="F:Native.Constants.CREATE_ALWAYS">
            <summary>
            Creates a new file, always.
            If the specified file exists and is writable, the function overwrites the file, the function succeeds, and last-error code is set to ERROR_ALREADY_EXISTS (183).
            If the specified file does not exist and is a valid path, a new file is created, the function succeeds, and the last-error code is set to zero.
            </summary>
        </member>
        <member name="F:Native.Constants.CREATE_NEW">
            <summary>
            Creates a new file, only if it does not already exist.
            If the specified file exists, the function fails and the last-error code is set to ERROR_FILE_EXISTS (80).
            If the specified file does not exist and is a valid path to a writable location, a new file is created.
            </summary>
        </member>
        <member name="F:Native.Constants.OPEN_ALWAYS">
            <summary>
            Opens a file, always.
            If the specified file exists, the function succeeds and the last-error code is set to ERROR_ALREADY_EXISTS (183).
            If the specified file does not exist and is a valid path to a writable location, the function creates a file and the last-error code is set to zero.
            </summary>
        </member>
        <member name="F:Native.Constants.OPEN_EXISTING">
            <summary>
            Opens a file or device, only if it exists.
            If the specified file or device does not exist, the function fails and the last-error code is set to ERROR_FILE_NOT_FOUND (2).
            </summary>
        </member>
        <member name="F:Native.Constants.TRUNCATE_EXISTING">
            <summary>
            Opens a file and truncates it so that its size is zero bytes, only if it exists.
            If the specified file does not exist, the function fails and the last-error code is set to ERROR_FILE_NOT_FOUND (2).
            The calling process must open the file with the GENERIC_WRITE bit set as part of the dwDesiredAccess parameter.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_ARCHIVE">
            <summary>
            The file should be archived. Applications use this attribute to mark files for backup or removal.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_ENCRYPTED">
            <summary>
            The file or directory is encrypted. For a file, this means that all data in the file is encrypted.
            For a directory, this means that encryption is the default for newly created files and subdirectories.
            This flag has no effect if <see cref="F:Native.Constants.FILE_ATTRIBUTE_SYSTEM"/> is also specified.
            This flag is not supported on Home, Home Premium, Starter, or ARM editions of Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_HIDDEN">
            <summary>
            The file is hidden. Do not include it in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_NORMAL">
            <summary>
            The file does not have other attributes set. This attribute is valid only if used alone.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_OFFLINE">
            <summary>
            The data of a file is not immediately available.
            This attribute indicates that file data is physically moved to offline storage.
            This attribute is used by Remote Storage, the hierarchical storage management software.
            Applications should not arbitrarily change this attribute.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_READONLY">
            <summary>
            The file is read only. Applications can read the file, but cannot write to or delete it.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_SYSTEM">
            <summary>
            The file is part of or used exclusively by an operating system.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_TEMPORARY">
            <summary>
            The file is being used for temporary storage.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_BACKUP_SEMANTICS">
            <summary>
            The file is being opened or created for a backup or restore operation.
            The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges.
            You must set this flag to obtain a handle to a directory.
            A directory handle can be passed to some functions instead of a file handle.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_DELETE_ON_CLOSE">
            <summary>
            The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles.
            If there are existing open handles to a file, the call fails unless they were all opened with the <see cref="F:Native.Constants.FILE_SHARE_DELETE"/> share mode.
            Subsequent open requests for the file fail, unless the FILE_SHARE_DELETE share mode is specified.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_NO_BUFFERING">
            <summary>
            The file or device is being opened with no system caching for data reads and writes.
            This flag does not affect hard disk caching or memory mapped files.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OPEN_NO_RECALL">
            <summary>
            The file data is requested, but it should continue to be located in remote storage.
            It should not be transported back to local storage.
            This flag is for use by remote storage systems.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OPEN_REPARSE_POINT">
            <summary>
            Normal reparse point processing will not occur;
            CreateFile will attempt to open the reparse point. When a file is opened, a file handle is returned,
            whether or not the filter that controls the reparse point is operational.
            This flag cannot be used with the <see cref="F:Native.Constants.CREATE_ALWAYS"/> flag.
            If the file is not a reparse point, then this flag is ignored.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OVERLAPPED">
            <summary>
            The file or device is being opened or created for asynchronous I/O.
            When subsequent I/O operations are completed on this handle, the event specified in the OVERLAPPED structure will be set to the signaled state.
            If this flag is specified, the file can be used for simultaneous read and write operations.
            If this flag is not specified, then I/O operations are serialized, even if the calls to the read and write functions specify an OVERLAPPED structure.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_POSIX_SEMANTICS">
            <summary>
            Access will occur according to POSIX rules.
            This includes allowing multiple files with names, differing only in case, for file systems that support that naming.
            Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_RANDOM_ACCESS">
            <summary>
            Access is intended to be random. The system can use this as a hint to optimize file caching.
            This flag has no effect if the file system does not support cached I/O and <see cref="F:Native.Constants.FILE_FLAG_NO_BUFFERING"/>.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_SESSION_AWARE">
            <summary>
            The file or device is being opened with session awareness.
            If this flag is not specified, then per-session devices (such as a redirected USB device) cannot be opened by processes running in session 0.
            This flag has no effect for callers not in session 0.
            This flag is supported only on server editions of Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_SEQUENTIAL_SCAN">
            <summary>
            Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching.
            This flag should not be used if read-behind (that is, reverse scans) will be used.
            This flag has no effect if the file system does not support cached I/O and <see cref="F:Native.Constants.FILE_FLAG_NO_BUFFERING"/>.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_WRITE_THROUGH">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to disk.
            </summary>
        </member>
        <member name="F:Native.Constants.GENERIC_READ">
            <summary>Read access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_WRITE">
            <summary>Write access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_EXECUTE">
            <summary>Execute access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_ALL">
            <summary>All possible access rights.</summary>
        </member>
        <member name="F:Native.Constants.GWL_EXSTYLE">
            <summary>Extended window style.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_HINSTANCE">
            <summary>Application instance handle.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_ID">
            <summary>Identifier of the child window.</summary>
        </member>
        <member name="F:Native.Constants.GWL_STYLE">
            <summary>Window style.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_USERDATA">
            <summary>
            user data associated with the window.
            This data is intended for use by the application that created the window.
            Its value is initially zero.
            </summary>
        </member>
        <member name="F:Native.Constants.GWLP_WNDPROC">
            <summary>Address for the window procedure.</summary>
        </member>
        <member name="T:Native.Kernel32">
            <summary>Функции библиотеки kernel32.dll.</summary>
        </member>
        <member name="F:Native.Kernel32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.Kernel32.CopyMemoryEntryPoint">
            <summary>Точка входа функции CopyMemory.</summary>
        </member>
        <member name="M:Native.Kernel32.CopyMemory(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>Copies a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the copied block's destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to copy.</param>
            <param name="length">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.CopyMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>Copies a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the copied block's destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to copy.</param>
            <param name="length">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="F:Native.Kernel32.MoveMemoryEntryPoint">
            <summary>Точка входа функции CopyMemory.</summary>
        </member>
        <member name="M:Native.Kernel32.MoveMemory(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>Moves a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the move destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="length">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.MoveMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>Moves a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the move destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="length">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="F:Native.Kernel32.CloseHandleEntryPoint">
            <summary>Точка входа функции CloseHandle.</summary>
        </member>
        <member name="M:Native.Kernel32.CloseHandle(System.IntPtr)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724211.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.MulDivEntryPoint">
            <summary>Точка входа функции MulDiv.</summary>
        </member>
        <member name="M:Native.Kernel32.MulDiv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value.
            The final result is rounded to the nearest integer.
            </summary>
            <param name="nNumber">The multiplicand.</param>
            <param name="nNumerator">The multiplier.</param>
            <param name="nDenominator">The number by which the result of the multiplication operation is to be divided.</param>
            <returns>
            If the function succeeds, the return value is the result of the multiplication and division, rounded to the nearest integer.
            If the result is a positive half integer (ends in .5), it is rounded up. If the result is a negative half integer, it is rounded down.
            If either an overflow occurred or nDenominator was 0, the return value is -1.
            </returns>
        </member>
        <member name="F:Native.Kernel32.CreateFileEntryPoint">
            <summary>Точка входа функции CreateFile.</summary>
        </member>
        <member name="M:Native.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file or I/O device.
            The most commonly used I/O devices are as follows:
            	file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.
            The function returns a handle that can be used to access the file or device for various types of I/O depending
            on the file or device and the flags and attributes specified.
            </summary>
            <param name="lpFileName">
            The name of the file or device to be created or opened.
            You may use either forward slashes (/) or backslashes (\) in this name.</param>
            <param name="dwDesiredAccess">
            The requested access to the file or device, which can be summarized as read, write, both or neither zero).
            </param>
            <param name="dwShareMode">
            The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table).
            Access requests to attributes or extended attributes are not affected by this flag.
            </param>
            <param name="lpSecurityAttributes">
            A pointer to a SECURITY_ATTRIBUTES structure that contains two separate but related data members:
            an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes.
            </param>
            <param name="dwCreationDisposition">
            An action to take on a file or device that exists or does not exist.
            </param>
            <param name="dwFlagsAndAttributes">
            The file or device attributes and flags, <see cref="F:Native.Constants.FILE_ATTRIBUTE_NORMAL"/> being the most common default value for files.
            </param>
            <param name="hTemplateFile">
            A valid handle to a template file with the GENERIC_READ access right.
            The template file supplies file attributes and extended attributes for the file that is being created.
            </param>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is <see cref="F:Native.Constants.INVALID_HANDLE_VALUE"/>.
            </returns>
        </member>
        <member name="F:Native.Kernel32.DeviceIOControlEntryPoint">
            <summary>Точка входа функции DeviceIoControl.</summary>
        </member>
        <member name="M:Native.Kernel32.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
            </summary>
            <param name="hDevice">
            A handle to the device on which the operation is to be performed.
            The device is typically a volume, directory, file, or stream.
            To retrieve a device handle, use the <see cref="M:Native.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> function.</param>
            <param name="dwIoControlCode">
            The control code for the operation. This value identifies the specific operation to be performed and the type of device on which to perform it.
            </param>
            <param name="lpInBuffer">
            A pointer to the input buffer that contains the data required to perform the operation.
            The format of this data depends on the value of the <paramref name="dwIoControlCode"/> parameter.
            This parameter can be NULL if <paramref name="dwIoControlCode"/> specifies an operation that does not require input data.
            </param>
            <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
            <param name="lpOutBuffer">
            A pointer to the output buffer that is to receive the data returned by the operation.
            The format of this data depends on the value of the <paramref name="dwIoControlCode"/> parameter.
            This parameter can be NULL if <paramref name="dwIoControlCode"/> specifies an operation that does not return data.
            </param>
            <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
            <param name="lpBytesReturned">A pointer to a variable that receives the size of the data stored in the output buffer, in bytes.</param>
            <param name="lpOverlapped">
            A pointer to an OVERLAPPED structure.
            If hDevice was opened without specifying <see cref="F:Native.Constants.FILE_FLAG_OVERLAPPED"/>, <paramref name="lpOverlapped"/> is ignored.
            </param>
            <returns>
            If the operation completes successfully, the return value is nonzero.
            If the operation fails or is pending, the return value is zero.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/aa363216.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.WaitForMultipleObjectsEntryPoint">
            <summary>Точка входа функции WaitForMultipleObjects.</summary>
        </member>
        <member name="M:Native.Kernel32.WaitForMultipleObjects(System.Int32,System.IntPtr[],System.Boolean,System.UInt32)">
            <summary>
            Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses.
            To enter an alertable wait state, use the <see cref="M:Native.Kernel32.WaitForMultipleObjectsEx(System.Int32,System.IntPtr[],System.Boolean,System.UInt32,System.Boolean)"/> function.
            </summary>
            <param name="nCount">
            The number of object handles in the array pointed to by lpHandles.
            The maximum number of object handles is <see cref="F:Native.Constants.MAXIMUM_WAIT_OBJECTS"/>.
            This parameter cannot be zero.
            </param>
            <param name="lpHandles">
            An array of object handles. The array can contain handles to objects of different types.
            It may not contain multiple copies of the same handle.
            </param>
            <param name="bWaitAll">
            If this parameter is <c>true</c>, the function returns when the state of all objects in the lpHandles array is signaled.
            If <c>false</c>, the function returns when the state of any one of the objects is set to signaled.
            In the latter case, the return value indicates the object whose state caused the function to return.
            </param>
            <param name="dwMilliseconds">
            The time-out interval, in milliseconds.
            If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses.
            If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately.
            If dwMilliseconds is <see cref="F:Native.Constants.INFINITE"/>, the function will return only when the specified objects are signaled.
            </param>
            <returns>
            If the function succeeds, the return value indicates the event that caused the function to return.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms687025.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.WaitForMultipleObjectsExEntryPoint">
            <summary>Точка входа функции WaitForMultipleObjectsEx.</summary>
        </member>
        <member name="M:Native.Kernel32.WaitForMultipleObjectsEx(System.Int32,System.IntPtr[],System.Boolean,System.UInt32,System.Boolean)">
            <summary>
            Waits until one or all of the specified objects are in the signaled state, an I/O completion routine
            or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses.
            </summary>
            <param name="nCount">
            The number of object handles in the array pointed to by lpHandles.
            The maximum number of object handles is <see cref="F:Native.Constants.MAXIMUM_WAIT_OBJECTS"/>.
            This parameter cannot be zero.
            </param>
            <param name="lpHandles">
            An array of object handles. The array can contain handles to objects of different types.
            It may not contain multiple copies of the same handle.
            </param>
            <param name="bWaitAll">
            If this parameter is <c>true</c>, the function returns when the state of all objects in the lpHandles array is signaled.
            If <c>false</c>, the function returns when the state of any one of the objects is set to signaled.
            In the latter case, the return value indicates the object whose state caused the function to return.
            </param>
            <param name="dwMilliseconds">
            The time-out interval, in milliseconds.
            If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses.
            If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately.
            If dwMilliseconds is <see cref="F:Native.Constants.INFINITE"/>, the function will return only when the specified objects are signaled.
            </param>
            <param name="bAlertable">
            If this parameter is TRUE and the thread is in the waiting state, the function returns when the
            system queues an I/O completion routine or APC, and the thread runs the routine or function.
            Otherwise, the function does not return and the completion routine or APC function is not executed.
            </param>
            <returns>
            If the function succeeds, the return value indicates the event that caused the function to return.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms687028.aspx</seealso>
        </member>
        <member name="M:Native.Kernel32.GetShortPathName(System.String,System.Char[],System.Int32)">
            <summary>Retrieves the short path form of the specified path.</summary>
            <param name="lpszLongPath">
            The path string.
            In the ANSI version of this function, the name is limited to MAX_PATH characters.
            To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path.
            </param>
            <param name="lpszShortPath">
            A pointer to a buffer to receive the null-terminated short form of the path that <paramref name="lpszLongPath"/> specifies.
            Passing NULL for this parameter and zero for cchBuffer will always return the required buffer size for a specified <paramref name="lpszLongPath"/>.
            </param>
            <param name="cchBuffer">
            The size of the buffer that <paramref name="lpszShortPath"/> points to, in chars.
            Set this parameter to zero if <paramref name="lpszShortPath"/> is set to <c>null</c>.
            </param>
            <returns>
            If the function succeeds, the return value is the length, in TCHARs, of the string that is copied to <paramref name="lpszShortPath"/>, not including the terminating null character.
            If the lpszShortPath buffer is too small to contain the path, the return value is the size of the buffer, in TCHARs, that is required to hold the path and the terminating null character.
            If the function fails for any other reason, the return value is zero. To get extended error information, call GetLastError().
            </returns>
        </member>
        <member name="M:Native.Kernel32.GetProcAddress(Native.ModuleHandle,System.String)">
            <summary>Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).</summary>
            <param name="hModule">
            A handle to the DLL module that contains the function or variable. The LoadLibrary, LoadLibraryEx, LoadPackagedLibrary, or GetModuleHandle function returns this handle.
            The <see cref="M:GetProcAddress()"/> function does not retrieve addresses from modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag.
            </param>
            <param name="procName">
            The function or variable name, or the function's ordinal value.
            </param>
            <returns>
            If the function succeeds, the return value is the address of the exported function or variable.
            If the function fails, the return value is <see cref="M:IntPtr.Zero"/>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.GetProcAddress(System.IntPtr,System.String)">
            <summary>Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).</summary>
            <param name="hModule">
            A handle to the DLL module that contains the function or variable. The LoadLibrary, LoadLibraryEx, LoadPackagedLibrary, or GetModuleHandle function returns this handle.
            The <see cref="M:GetProcAddress()"/> function does not retrieve addresses from modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag.
            </param>
            <param name="procName">
            The function or variable name, or the function's ordinal value.
            </param>
            <returns>
            If the function succeeds, the return value is the address of the exported function or variable.
            If the function fails, the return value is <see cref="M:IntPtr.Zero"/>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
            For additional load options, use the <see cref="M:LoadLibraryEx()"/> function.
            </summary>
            <param name="lpFileName">
            The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file).
            The name specified is the file name of the module and is not related to the name stored in the library module itself,
            as specified by the LIBRARY keyword in the module-definition (.def) file.
            If the string specifies a full path, the function searches only that path for the module.
            If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module.
            If the function cannot find the module, the function fails.When specifying a path, be sure to use backslashes (\), not forward slashes(/).
            For more information about paths, see Naming a File or Directory.
            If the string specifies a module name without a path and the file name extension is omitted,
            the function appends the default library extension .dll to the module name.To prevent the function from appending .dll
            to the module name, include a trailing point character (.) in the module name string.
            </param>
            <returns>If the function succeeds, the return value is a handle to the module.
            If the function fails, the return value is invalid handle.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.LoadLibraryEx(System.String,System.IntPtr,Native.LoadLibraryFlags)">
            <summary>
            Loads the specified module into the address space of the calling process.
            The specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">
            The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file).
            The name specified is the file name of the module and is not related to the name stored in the library module itself,
            as specified by the LIBRARY keyword in the module-definition (.def) file.
            If the string specifies a full path, the function searches only that path for the module.
            If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module.
            If the function cannot find the module, the function fails.When specifying a path, be sure to use backslashes (\), not forward slashes(/).
            For more information about paths, see Naming a File or Directory.
            If the string specifies a module name without a path and the file name extension is omitted,
            the function appends the default library extension .dll to the module name.To prevent the function from appending .dll
            to the module name, include a trailing point character (.) in the module name string.
            </param>
            <param name="hFile">This parameter is reserved for future use. It must be <see cref="M:IntPtr.Zero"/>.</param>
            <param name="flags">
            The action to be taken when loading the module.
            If no flags are specified, the behavior of this function is identical to that of the <see cref="M:LoadLibrary()"/> function.
            </param>
            <returns></returns>
        </member>
        <member name="M:Native.Kernel32.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.
            When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid.
            </summary>
            <param name="hModule">
            A handle to the loaded library module.
            The LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx function returns this handle.
            </param>
            <returns></returns>
        </member>
        <member name="M:Native.Kernel32.SetDllDirectory(System.String)">
            <summary>Adds a directory to the search path used to locate DLLs for the application.</summary>
            <param name="lpPathName">
            The directory to be added to the search path.
            If this parameter is an empty string (""), the call removes the current directory from the default DLL search order.
            If this parameter is <c>null</c>, the function restores the default search order.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.SetErrorMode(Native.SEM)">
            <summary>
            Controls whether the system will handle the specified types of serious errors or whether the process will handle them.
            </summary>
            <param name="mode">The process error mode.</param>
            <returns>The return value is the previous state of the error-mode bit flags.</returns>
        </member>
        <member name="M:Native.Kernel32.GetErrorMode">
            <summary>Retrieves the error mode for the current process.</summary>
            <returns>The process error mode.</returns>
        </member>
        <member name="M:Native.Kernel32.GetFileAttributes(System.String)">
            <summary>Retrieves file system attributes for a specified file or directory.</summary>
            <param name="lpFileName">The name of the file or directory.</param>
            <returns>
            If the function succeeds, the return value contains the attributes of the specified file or directory.
            If the function fails, the return value is <see cref="M:FILE_ATTRIBUTE.INVALID"/>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.SetFileAttributes(System.String,Native.FILE_ATTRIBUTE)">
            <summary>Sets the attributes for a file or directory.</summary>
            <param name="lpFileName">The name of the file whose attributes are to be set.</param>
            <param name="dwFileAttributes">The file attributes to set for the file.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.DeleteFile(System.String)">
            <summary>Deletes an existing file.</summary>
            <param name="lpFileName">The name of the file to be deleted.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.GetFileType(System.IntPtr)">
            <summary>Retrieves the file type of the specified file.</summary>
            <param name="hFile">A handle to the file.</param>
            <returns>One of <see cref="T:Native.FILE_TYPE"/> values.</returns>
        </member>
        <member name="M:Native.Kernel32.GetFileType(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Retrieves the file type of the specified file.</summary>
            <param name="hFile">A handle to the file.</param>
            <returns>One of <see cref="T:Native.FILE_TYPE"/> values.</returns>
        </member>
        <member name="M:Native.Kernel32.GetFileSizeEx(System.IntPtr,System.Int64@)">
            <summary>Retrieves the size of the specified file.</summary>
            <param name="hFile">
            A handle to the file.
            The handle must have been created with the FILE_READ_ATTRIBUTES access right or equivalent,
            or the caller must have sufficient permission on the directory that contains the file.
            </param>
            <param name="lpFileSize">Variable that receives the file size, in bytes.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.GetFileSizeEx(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int64@)">
            <summary>Retrieves the size of the specified file.</summary>
            <param name="hFile">
            A handle to the file.
            The handle must have been created with the FILE_READ_ATTRIBUTES access right or equivalent,
            or the caller must have sufficient permission on the directory that contains the file.
            </param>
            <param name="lpFileSize">Variable that receives the file size, in bytes.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.BackupRead(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)">
            <summary>
            The BackupRead function can be used to back up a file or directory, including the security information.
            The function reads data associated with a specified file or directory into a buffer,
            which can then be written to the backup medium using the WriteFile function.
            </summary>
            <param name="hFile">
            Handle to the file or directory to be backed up.
            To obtain the handle, call the CreateFile function.
            The SACLs are not read unless the file handle was created with the ACCESS_SYSTEM_SECURITY access right.
            </param>
            <param name="lpBuffer">Pointer to a buffer that receives the data.</param>
            <param name="nNumberOfBytesToRead">
            Length of the buffer, in bytes.The buffer size must be greater than the size
            of a WIN32_STREAM_ID structure.
            </param>
            <param name="lpNumberOfBytesRead">
            Pointer to a variable that receives the number of bytes read.
            If the function returns a nonzero value, and the variable pointed to by <paramref name="lpNumberOfBytesRead"/> is zero,
            then all the data associated with the file handle has been read.
            </param>
            <param name="bAbort">
            Indicates whether you have finished using BackupRead on the handle.
            While you are backing up the file, specify this parameter as <c>false</c>.
            Once you are done using BackupRead, you must call BackupRead one more time
            specifying <c>true</c> for this parameter and passing the appropriate <paramref name="lpContext"/>.
            <paramref name="lpContext"/> must be passed when bAbort is <c>true</c>; all other parameters are ignored.
            </param>
            <param name="bProcessSecurity">
            Indicates whether the function will restore the access-control list(ACL) data for the file or directory.
            If <paramref name="bProcessSecurity"/> is <c>true</c>, the ACL data will be backed up.
            </param>
            <param name="lpContext">
            Pointer to a variable that receives a pointer to an internal data structure used by BackupRead
            to maintain context information during a backup operation. 
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>, indicating that
            an I/O error occurred.To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.BackupRead(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)">
            <summary>
            The BackupRead function can be used to back up a file or directory, including the security information.
            The function reads data associated with a specified file or directory into a buffer,
            which can then be written to the backup medium using the WriteFile function.
            </summary>
            <param name="hFile">
            Handle to the file or directory to be backed up.
            To obtain the handle, call the CreateFile function.
            The SACLs are not read unless the file handle was created with the ACCESS_SYSTEM_SECURITY access right.
            </param>
            <param name="lpBuffer">Pointer to a buffer that receives the data.</param>
            <param name="nNumberOfBytesToRead">
            Length of the buffer, in bytes.The buffer size must be greater than the size
            of a WIN32_STREAM_ID structure.
            </param>
            <param name="lpNumberOfBytesRead">
            Pointer to a variable that receives the number of bytes read.
            If the function returns a nonzero value, and the variable pointed to by <paramref name="lpNumberOfBytesRead"/> is zero,
            then all the data associated with the file handle has been read.
            </param>
            <param name="bAbort">
            Indicates whether you have finished using BackupRead on the handle.
            While you are backing up the file, specify this parameter as <c>false</c>.
            Once you are done using BackupRead, you must call BackupRead one more time
            specifying <c>true</c> for this parameter and passing the appropriate <paramref name="lpContext"/>.
            <paramref name="lpContext"/> must be passed when bAbort is <c>true</c>; all other parameters are ignored.
            </param>
            <param name="bProcessSecurity">
            Indicates whether the function will restore the access-control list(ACL) data for the file or directory.
            If <paramref name="bProcessSecurity"/> is <c>true</c>, the ACL data will be backed up.
            </param>
            <param name="lpContext">
            Pointer to a variable that receives a pointer to an internal data structure used by BackupRead
            to maintain context information during a backup operation. 
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>, indicating that
            an I/O error occurred.To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.BackupSeek(System.IntPtr,System.UInt32,System.UInt32,System.UInt32@,System.UInt32@,System.IntPtr@)">
            <summary>
            The BackupSeek function seeks forward in a data stream initially accessed by
            using the BackupRead or BackupWrite function.
            </summary>
            <param name="hFile">
            Handle to the file or directory.This handle is created by using the CreateFile function.
            The handle must be synchronous (nonoverlapped). This means that the FILE_FLAG_OVERLAPPED
            flag must not be set when CreateFile is called.
            This function does not validate that the handle it receives is synchronous, so it does
            not return an error code for a synchronous handle, but calling it with an asynchronous(overlapped)
            handle can result in subtle errors that are very difficult to debug.
            </param>
            <param name="dwLowBytesToSeek">Low-order part of the number of bytes to seek.</param>
            <param name="dwHighBytesToSeek">High-order part of the number of bytes to seek.</param>
            <param name="lpdwLowByteSeeked">Pointer to a variable that receives the low-order bits of the number of bytes the function actually seeks.</param>
            <param name="lpdwHighByteSeeked">Pointer to a variable that receives the high-order bits of the number of bytes the function actually seeks.</param>
            <param name="context">
            Pointer to an internal data structure used by the function.
            This structure must be the same structure that was initialized by the BackupRead or BackupWrite function. An application must not touch the contents of this structure.
            </param>
            <returns>
            If the function could seek the requested amount, the function returns <c>true</c>.
            If the function could not seek the requested amount, the function returns <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.BackupSeek(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32@,System.UInt32@,System.IntPtr@)">
            <summary>
            The BackupSeek function seeks forward in a data stream initially accessed by
            using the BackupRead or BackupWrite function.
            </summary>
            <param name="hFile">
            Handle to the file or directory.This handle is created by using the CreateFile function.
            The handle must be synchronous (nonoverlapped). This means that the FILE_FLAG_OVERLAPPED
            flag must not be set when CreateFile is called.
            This function does not validate that the handle it receives is synchronous, so it does
            not return an error code for a synchronous handle, but calling it with an asynchronous(overlapped)
            handle can result in subtle errors that are very difficult to debug.
            </param>
            <param name="dwLowBytesToSeek">Low-order part of the number of bytes to seek.</param>
            <param name="dwHighBytesToSeek">High-order part of the number of bytes to seek.</param>
            <param name="lpdwLowByteSeeked">Pointer to a variable that receives the low-order bits of the number of bytes the function actually seeks.</param>
            <param name="lpdwHighByteSeeked">Pointer to a variable that receives the high-order bits of the number of bytes the function actually seeks.</param>
            <param name="context">
            Pointer to an internal data structure used by the function.
            This structure must be the same structure that was initialized by the BackupRead or BackupWrite function. An application must not touch the contents of this structure.
            </param>
            <returns>
            If the function could seek the requested amount, the function returns <c>true</c>.
            If the function could not seek the requested amount, the function returns <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="T:Native.Gdi32">
            <summary>Функции библиотеки gdi32.dll.</summary>
        </member>
        <member name="F:Native.Gdi32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.Gdi32.SetStretchBltModeEntryPoint">
            <summary>Точка входа функции SetStretchBltMode.</summary>
        </member>
        <member name="M:Native.Gdi32.SetStretchBltMode(System.IntPtr,Native.StretchBltMode)">
            <summary>This function sets the bitmap stretching mode in the specified device context. </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="iStretchMode">Specifies the stretching mode.</param>
            <returns>
            If the function succeeds, the return value is the previous stretching mode.
            If the function fails, the return value is
            <see cref="M:StretchBltMode.INVALID"/> or
            <see cref="M:StretchBltMode.INVALID_PARAMETER"/>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145089.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.StretchBltEntryPoint">
            <summary>Точка входа функции StretchBlt.</summary>
        </member>
        <member name="M:Native.Gdi32.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.RasterOperation)">
            <summary>
            The StretchBlt function copies a bitmap from a source rectangle into a destination rectangle,
            stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary.
            The system stretches or compresses the bitmap according to the stretching mode currently set in the
            destination device context.
            </summary>
            <param name="hDCDest">A handle to the destination device context.</param>
            <param name="xOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="hDCSrc">A handle to the source device context.</param>
            <param name="xOriginScr">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="yOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="widthScr">The width, in logical units, of the source rectangle.</param>
            <param name="heightScr">The height, in logical units, of the source rectangle.</param>
            <param name="rop">
            The raster operation to be performed. Raster operation codes define how the system combines
            colors in output operations that involve a brush, a source bitmap, and a destination bitmap.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.Gdi32.BitBltEntryPoint">
            <summary>Точка входа функции StretchBlt.</summary>
        </member>
        <member name="M:Native.Gdi32.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,Native.RasterOperation)">
            <summary>
            The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels 
            from the specified source device context into a destination device context.
            </summary>
            <param name="hDCDest">A handle to the destination device context.</param>
            <param name="xOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the source and destination rectangles.</param>
            <param name="heightDest">The height, in logical units, of the source and the destination rectangles.</param>
            <param name="hDCSrc">A handle to the source device context.</param>
            <param name="xOriginScr">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="yOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="rop">
            A raster-operation code. These codes define how the color data for the source rectangle is to be combined with the
            color data for the destination rectangle to achieve the final color.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.Gdi32.StretchDIBitsEntryPoint">
            <summary>Точка входа функции StretchDIBits.</summary>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,Native.BITMAPINFOHEADER@,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a <see cref="T:Native.BITMAPINFOHEADER"/> structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.SelectObjectEntryPoint">
            <summary>Точка входа функции SelectObject.</summary>
        </member>
        <member name="M:Native.Gdi32.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The SelectObject function selects an object into the specified device context (DC).
            The new object replaces the previous object of the same type.
            </summary>
            <param name="hDC">A handle to the DC.</param>
            <param name="hObject">A handle to the object to be selected.</param>
            <returns>
            If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced.
            If the selected object is a region and the function succeeds, the return value is one of the following values:
              SIMPLEREGION, COMPLEXREGION, NULLREGION.
            If an error occurs and the selected object is not a region, the return value is NULL. Otherwise, it is HGDI_ERROR.
            </returns>
            <remarks>
            This function returns the previously selected object of the specified type.
            An application should always replace a new object with the original, default object after it has finished drawing with the new object.
            An application cannot select a single bitmap into more than one DC at a time.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd162957.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.DeleteObjectEntryPoint">
            <summary>Точка входа функции DeleteObject.</summary>
        </member>
        <member name="M:Native.Gdi32.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all
            system resources associated with the object.
            After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the specified handle is not valid or is currently selected into a DC, the return value is <c>false</c>.
            </returns>
            <remarks>
            Do not delete a drawing object (pen or brush) while it is still selected into a DC.
            When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183539.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.CreateCompatibleDCEntryPoint">
            <summary>Точка входа функции CreateCompatibleDC.</summary>
        </member>
        <member name="M:Native.Gdi32.CreateCompatibleDC(System.IntPtr)">
            <summary>
            The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.
            </summary>
            <param name="hDC">
            A handle to an existing DC. If this handle is NULL, the function creates a
            memory DC compatible with the application's current screen.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a memory DC.
            If the function fails, the return value is NULL.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183489.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.DeleteDCEntryPoint">
            <summary>Точка входа функции DeleteDC.</summary>
        </member>
        <member name="M:Native.Gdi32.DeleteDC(System.IntPtr)">
            <summary>The DeleteDC function deletes the specified device context (DC).</summary>
            <param name="hDC">A handle to the device context.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
            <remarks>
            An application must not delete a DC whose handle was obtained by calling the GetDC function.
            Instead, it must call the ReleaseDC function to free the DC.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183533.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.GetDeviceCapsEntryPoint">
            <summary>Точка входа функции GetDeviceCaps.</summary>
        </member>
        <member name="M:Native.Gdi32.GetDeviceCaps(System.IntPtr,Native.DeviceCaps)">
            <summary>The GetDeviceCaps function retrieves device-specific information for the specified device.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="nIndex">The item to be returned.</param>
            <returns>
            The return value specifies the value of the desired item.
            When nIndex is <see cref="M:DeviceCaps.BITSPIXEL"/> and the device has 15bpp or 16bpp, the return value is 16.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd144877.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.CreateCompatibleBitmapEntryPoint">
            <summary>Точка входа функции CreateCompatibleBitmap.</summary>
        </member>
        <member name="M:Native.Gdi32.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context.
            </summary>
            <param name="hDC">A handle to a device context.</param>
            <param name="width">The bitmap width, in pixels.</param>
            <param name="weigth">The bitmap height, in pixels.</param>
            <returns>
            If the function succeeds, the return value is a handle to the compatible bitmap (DDB).
            If the function fails, the return value is <c>IntPtr.Zero</c>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183488.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.GetStockObject(Native.StockObject)">
            <summary>Retrieves a handle to one of the stock pens, brushes, fonts, or palettes.</summary>
            <param name="fnObject">The type of stock object.</param>
            <returns>
            If the function succeeds, the return value is a handle to the requested logical object.
            If the function fails, the return value is <c>IntPtr.Zero</c>.
            </returns>
            <seealso>https://msdn.microsoft.com/en-us/library/windows/desktop/dd144925%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="T:Native.User32">
            <summary>Функции библиотеки user32.dll.</summary>
        </member>
        <member name="F:Native.User32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.User32.AttachThreadInputEntryPoint">
            <summary>Точка входа функции AttachThreadInput.</summary>
        </member>
        <member name="M:Native.User32.AttachThreadInput(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attaches or detaches the input processing mechanism of one thread to that of another thread.
            </summary>
            <param name="idAttach">
            The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread.
            </param>
            <param name="idAttachTo">
            The identifier of the thread to which idAttach will be attached. This thread cannot be a system thread.
            A thread cannot attach to itself. Therefore, idAttachTo cannot equal idAttach.
            </param>
            <param name="fAttach">
            If this parameter is <c>true</c>, the two threads are attached. If the parameter is <c>false</c>, the threads are detached.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="F:Native.User32.AllowSetForegroundWindowEntryPoint">
            <summary>Точка входа функции AllowSetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.AllowSetForegroundWindow(System.Int32)">
            <summary>
            Enables the specified process to set the foreground window using the SetForegroundWindow function.
            The calling process must already be able to set the foreground window.
            For more information, see Remarks later in this topic.
            </summary>
            <param name="dwProcessId">
            The identifier of the process that will be enabled to set the foreground window.
            If this parameter is ASFW_ANY, all processes will be enabled to set the foreground window.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            The function will fail if the calling process cannot set the foreground window.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="F:Native.User32.LockSetForegroundWindowEntryPoint">
            <summary>Точка входа функции LockSetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.LockSetForegroundWindow(Native.LSFW)">
            <summary>
            The foreground process can call the LockSetForegroundWindow function to disable calls
            to the <see cref="M:SetForegroundWindow"/> function.
            </summary>
            <param name="uLockCode">
            Specifies whether to enable or disable calls to <see cref="M:SetForegroundWindow"/>.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="F:Native.User32.GetDCEntryPoint">
            <summary>Точка входа функции GetDC.</summary>
        </member>
        <member name="M:Native.User32.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified
            window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw
            in the DC. The device context is an opaque data structure, whose values are used internally by GDI.
            </summary>
            <param name="hWnd">
            A handle to the window whose DC is to be retrieved.
            If this value is NULL, GetDC retrieves the DC for the entire screen.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="F:Native.User32.ReleaseDCEntryPoint">
            <summary>Точка входа функции ReleaseDC.</summary>
        </member>
        <member name="M:Native.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>
            The return value indicates whether the DC was released.
            If the DC was released, the return value is 1.
            If the DC was not released, the return value is zero.
            </returns>
        </member>
        <member name="F:Native.User32.ShowWindowEntryPoint">
            <summary>Точка входа функции ShowWindow.</summary>
        </member>
        <member name="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)">
            <summary>Sets the specified window's show state.</summary>
            <param name="handle">A handle to the window. </param>
            <param name="flags">
            Controls how the window is to be shown.
            This parameter is ignored the first time an application calls <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/>,
            if the program that launched the application provides a STARTUPINFO structure.
            Otherwise, the first time <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/> is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter.
            </param>
            <returns></returns>
        </member>
        <member name="F:Native.User32.GetSystemMetricsEntryPoint">
            <summary>Точка входа функции GetSystemMetrics.</summary>
        </member>
        <member name="M:Native.User32.GetSystemMetrics(Native.SM)">
            <summary>Retrieves the specified system metric or system configuration setting.</summary>
            <param name="nIndex">The system metric or configuration setting to be retrieved.</param>
            <returns>
            If the function succeeds, the return value is the requested system metric or configuration setting.
            If the function fails, the return value is 0.
            GetLastError does not provide extended error information. 
            </returns>
            <remarks>Note that all dimensions retrieved by <see cref="M:Native.User32.GetSystemMetrics(Native.SM)"/> are in pixels.</remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724385.aspx</seealso>
        </member>
        <member name="F:Native.User32.ScrollDCEntryPoint">
            <summary>Точка входа функции ScrollDC.</summary>
        </member>
        <member name="M:Native.User32.ScrollDC(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,Native.RECT@)">
            <summary>The ScrollDC function scrolls a rectangle of bits horizontally and vertically.</summary>
            <param name="hDC">Handle to the device context that contains the bits to be scrolled. </param>
            <param name="dx">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="dy">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up.
            </param>
            <param name="lprcScroll">
            Pointer to a RECT structure containing the coordinates of the bits to be scrolled.
            The only bits affected by the scroll operation are bits in the intersection of this rectangle and the
            rectangle specified by lprcClip.
            If lprcScroll is NULL, the entire client area is used.
            </param>
            <param name="lprcClip">
            Pointer to a RECT structure containing the coordinates of the clipping rectangle.
            The only bits that will be painted are the bits that remain inside this rectangle after the
            scroll operation has been completed.
            If lprcClip is NULL, the entire client area is used.
            </param>
            <param name="hrgnUpdate">
            Handle to the region uncovered by the scrolling process.
            ScrollDC defines this region; it is not necessarily a rectangle.
            </param>
            <param name="lprcUpdate">
            Pointer to a RECT structure that receives the coordinates of the rectangle bounding the scrolling update region.
            This is the largest rectangular area that requires repainting. When the function returns,
            the values in the structure are in client coordinates, regardless of the mapping mode for
            the specified device context.
            This allows applications to use the update region in a call to the InvalidateRgn function, if required.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.User32.ScrollWindowExEntryPoint">
            <summary>Точка входа функции ScrollWindowEx.</summary>
        </member>
        <member name="M:Native.User32.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,System.IntPtr,Native.ScrollWindowFlags)">
            <summary>
            The ScrollWindowEx function scrolls the contents of the specified window's client area.
            </summary>
            <param name="hWnd">Handle to the window where the client area is to be scrolled. </param>
            <param name="nXAmount">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="nYAmount">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up. 
            </param>
            <param name="rectScrollRegion">
            Pointer to a <see cref="T:Native.RECT"/> structure that specifies the portion of the client area to be scrolled.
            If this parameter is NULL, the entire client area is scrolled.
            </param>
            <param name="rectClip">
            Pointer to a RECT structure that contains the coordinates of the clipping rectangle.
            Only device bits within the clipping rectangle are affected.
            Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside
            of the rectangle to the outside are not painted.
            This parameter may be NULL.
            </param>
            <param name="hrgnUpdate">
            Handle to the region that is modified to hold the region invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="prcUpdate">
            Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="flags">Specifies flags that control scrolling.</param>
            <returns>
            If the function succeeds, the return value is
            	SIMPLEREGION (rectangular invalidated region),
            	COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles),
             or NULLREGION (no invalidated region).
            If the function fails, the return value is ERROR.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/bb787593.aspx</seealso>
        </member>
        <member name="M:Native.User32.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,Native.RECT@,Native.ScrollWindowFlags)">
            <summary>
            The ScrollWindowEx function scrolls the contents of the specified window's client area.
            </summary>
            <param name="hWnd">Handle to the window where the client area is to be scrolled. </param>
            <param name="nXAmount">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="nYAmount">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up. 
            </param>
            <param name="rectScrollRegion">
            Pointer to a <see cref="T:Native.RECT"/> structure that specifies the portion of the client area to be scrolled.
            If this parameter is NULL, the entire client area is scrolled.
            </param>
            <param name="rectClip">
            Pointer to a RECT structure that contains the coordinates of the clipping rectangle.
            Only device bits within the clipping rectangle are affected.
            Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside
            of the rectangle to the outside are not painted.
            This parameter may be NULL.
            </param>
            <param name="hrgnUpdate">
            Handle to the region that is modified to hold the region invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="prcUpdate">
            Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling.
            </param>
            <param name="flags">Specifies flags that control scrolling.</param>
            <returns>
            If the function succeeds, the return value is
            	SIMPLEREGION (rectangular invalidated region),
            	COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles),
             or NULLREGION (no invalidated region).
            If the function fails, the return value is ERROR. To get extended error information, call GetLastError.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/bb787593.aspx</seealso>
        </member>
        <member name="F:Native.User32.WindowFromPointEntryPoint">
            <summary>Точка входа функции WindowFromPoint.</summary>
        </member>
        <member name="M:Native.User32.WindowFromPoint(Native.POINT)">
            <summary>Retrieves a handle to the window that contains the specified point.</summary>
            <param name="point">The point to be checked.</param>
            <returns>
            The return value is a handle to the window that contains the point.
            If no window exists at the given point, the return value is NULL.
            If the point is over a static text control, the return value is a handle to the window under the static text control.
            </returns>
        </member>
        <member name="F:Native.User32.ChildWindowFromPointEntryPoint">
            <summary>Точка входа функции ChildWindowFromPoint.</summary>
        </member>
        <member name="M:Native.User32.ChildWindowFromPoint(System.IntPtr,Native.POINT)">
            <summary>
            Determines which, if any, of the child windows belonging to a parent window contains the specified point.
            The search is restricted to immediate child windows.
            Grandchildren, and deeper descendant windows are not searched.
            To skip certain child windows, use the <see cref="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)"/> function.
            </summary>
            <param name="hWndParent">A handle to the parent window.</param>
            <param name="point">A structure that defines the client coordinates, relative to <paramref name="hWndParent"/>, of the point to be checked.</param>
            <returns>
            The return value is a handle to the child window that contains the point, even if the child window is hidden or disabled.
            If the point lies outside the parent window, the return value is NULL.
            If the point is within the parent window but not within any child window, the return value is a handle to the parent window. 
            </returns>
        </member>
        <member name="F:Native.User32.ChildWindowFromPointExEntryPoint">
            <summary>Точка входа функции ChildWindowFromPointEx.</summary>
        </member>
        <member name="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)">
            <summary>
            Determines which, if any, of the child windows belonging to the specified parent window contains the specified point.
            The function can ignore invisible, disabled, and transparent child windows.
            The search is restricted to immediate child windows.
            Grandchildren and deeper descendants are not searched. 
            </summary>
            <param name="hWndParent">A handle to the parent window.</param>
            <param name="point">A structure that defines the client coordinates (relative to <paramref name="hWndParent"/>) of the point to be checked. </param>
            <param name="uFlags">The child windows to be skipped (<see cref="T:Native.CWP"/>).</param>
            <returns>
            The return value is a handle to the first child window that contains the point and meets the criteria specified by <paramref name="uFlags"/>.
            If the point is within the parent window but not within any child window that meets the criteria, the return value is a handle to the parent window.
            If the point lies outside the parent window or if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="F:Native.User32.SendMessageEntryPoint">
            <summary>Точка входа функции SendMessage.</summary>
        </member>
        <member name="M:Native.User32.SendMessage(System.IntPtr,Native.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified
            window and does not return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message.
            If this parameter is HWND_BROADCAST ((IntPtr)0xffff), the message is sent to all top-level windows in the system,
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950.aspx</seealso>
        </member>
        <member name="F:Native.User32.PostMessageEntryPoint">
            <summary>Точка входа функции PostMessage.</summary>
        </member>
        <member name="M:Native.User32.PostMessage(System.IntPtr,Native.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the
            specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure is to receive the message. The following values have special meanings.
            	((IntPtr)0xffff): The message is posted to all top-level windows in the system, including disabled or invisible unowned windows,
            					  overlapped windows, and pop-up windows. The message is not posted to child windows.
            	IntPtr.Zero: The function behaves like a call to PostThreadMessage with the dwThreadId parameter set to the identifier of the current thread.
            </param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            GetLastError returns ERROR_NOT_ENOUGH_QUOTA when the limit is hit. 
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950.aspx</seealso>
        </member>
        <member name="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window.
            The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">
            A handle to the window and, indirectly, the class to which the window belongs.
            The <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function fails if the process that owns the window specified by the hWnd
            parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.
            </param>
            <param name="nIndex">
            The zero-based offset to the value to be set.
            Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.
            To set any other value, specify one of the following values:
            <see cref="M:Constants.GWL_EXSTYLE"/>
            <see cref="M:Constants.GWLP_HINSTANCE"/>
            <see cref="M:Constants.GWLP_ID"/>
            <see cref="M:Constants.GWL_STYLE"/>
            <see cref="M:Constants.GWLP_USERDATA"/>
            <see cref="M:Constants.GWLP_WNDPROC"/>
            </param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>
            If the function succeeds, the return value is the previous value of the specified offset.
            If the function fails, the return value is zero.
            </returns>
            <remarks>
            Certain window data is cached, so changes you make using <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> will not take effect
            until you call the <see cref="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)"/> function.
            </remarks>
        </member>
        <member name="M:Native.User32.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window.
            The function also retrieves the value at a specified offset into the extra window memory. 
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">
            The zero-based offset to the value to be retrieved.
            Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.
            To retrieve any other value, specify one of the following values:
            <see cref="M:Constants.GWL_EXSTYLE"/>
            <see cref="M:Constants.GWLP_HINSTANCE"/>
            <see cref="M:Constants.GWLP_ID"/>
            <see cref="M:Constants.GWL_STYLE"/>
            <see cref="M:Constants.GWLP_USERDATA"/>
            <see cref="M:Constants.GWLP_WNDPROC"/>
            </param>
            <returns>
            If the function succeeds, the return value is the requested value.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.GetWindowRect(System.IntPtr,Native.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window.
            The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">
            A pointer to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:Native.User32.GetClientRect(System.IntPtr,Native.RECT@)">
            <summary>
            Retrieves the coordinates of a window's client area.
            The client coordinates specify the upper-left and lower-right corners of the client area.
            Because client coordinates are relative to the upper-left corner of a window's client area,
            the coordinates of the upper-left corner are (0,0). 
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">
            A pointer to a <see cref="T:Native.RECT"/> structure that receives the client coordinates.
            The left and top members are zero.
            The right and bottom members contain the width and height of the window.
            </param>
            <returns></returns>
        </member>
        <member name="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window.
            These windows are ordered according to their appearance on the screen.
            The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">
            A handle to the window to precede the positioned window in the Z order.
            This parameter must be a window handle or one of the following values:
            <see cref="M:Constants.HWND_BOTTOM"/>
            <see cref="M:Constants.HWND_NOTOPMOST"/>
            <see cref="M:Constants.HWND_TOP"/>
            <see cref="M:Constants.HWND_TOPMOST"/>
            </param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels.</param>
            <param name="uFlags">The window sizing and positioning flags.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.User32.SetForegroundWindowEntryPoint">
            <summary>Точка входа функции SetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the window.
            Keyboard input is directed to the window, and various visual cues are changed for the user.
            The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads. 
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>
            If the window was brought to the foreground, the return value is nonzero.
            If the window was not brought to the foreground, the return value is zero.
            </returns>
        </member>
        <member name="F:Native.User32.BringWindowToTopEntryPoint">
            <summary>Точка входа функции BringWindowToTop.</summary>
        </member>
        <member name="M:Native.User32.BringWindowToTop(System.IntPtr)">
            <summary>
            Brings the specified window to the top of the Z order.
            If the window is a top-level window, it is activated.
            If the window is a child window, the top-level parent window associated with the child window is activated. 
            </summary>
            <param name="hWnd">A handle to the window to bring to the top of the Z order.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.User32.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system.
            The message value can be used when sending or posting messages.
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>
            If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.
            If the function fails, the return value is zero. To get extended error information, call GetLastError().
            </returns>
            <remarks>
            The RegisterWindowMessage function is typically used to register messages for communicating between two cooperating applications.
            If two different applications register the same message string, the applications return the same message value.
            The message remains registered until the session ends.
            Only use RegisterWindowMessage when more than one application must process the same message.
            For sending private messages within a window class, an application can use any integer in the range WM_USER through 0x7FFF.
            (Messages in this range are private to a window class, not to an application. For example, predefined control classes such as
            BUTTON, EDIT, LISTBOX, and COMBOBOX may use values in this range.) 
            </remarks>
        </member>
        <member name="M:Native.User32.GetForegroundWindow">
            <summary>
            Retrieves a handle to the foreground window (the window with which the user is currently working).
            The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.
            </summary>
            <returns>
            The return value is a handle to the foreground window.
            The foreground window can be <c>IntPtr.Zero</c> in certain circumstances, such as when a window is losing activation. 
            </returns>
        </member>
        <member name="M:Native.User32.GetActiveWindow">
            <summary>
            Retrieves the window handle to the active window attached to the calling thread's message queue.
            </summary>
            <returns>
            The return value is the handle to the active window attached to the calling thread's message queue.
            Otherwise, the return value is <c>IntPtr.Zero</c>.
            </returns>
        </member>
        <member name="M:Native.User32.FlashWindowEx(Native.FLASHWINFO@)">
            <summary>Flashes the specified window. It does not change the active state of the window.</summary>
            <param name="pwfi">A pointer to a <see cref="T:FLASHWINFO"/> structure.</param>
            <returns>
            The return value specifies the window's state before the call to the FlashWindowEx function.
            If the window caption was drawn as active before the call, the return value is nonzero.
            Otherwise, the return value is zero.
            </returns>
            <remarks>
            Typically, you flash a window to inform the user that the window requires attention but does not currently have the keyboard focus.
            When a window flashes, it appears to change from inactive to active status. An inactive caption bar changes to an active caption bar;
            an active caption bar changes to an inactive caption bar.
            </remarks>
        </member>
        <member name="M:Native.User32.MonitorFromWindow(System.IntPtr,Native.MONITOR)">
            <summary>
            Retrieves a handle to the display monitor that has the largest area of intersection
            with the bounding rectangle of a specified window.
            </summary>
            <param name="hwnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Native.User32.GetMonitorInfo(System.IntPtr,Native.MONITORINFO@)">
            <summary>Retrieves information about a display monitor.</summary>
            <param name="hMonitor">A handle to the display monitor of interest.</param>
            <param name="lpmi">A pointer to a <see cref="T:Native.MONITORINFO"/> structure that receives information about the specified display monitor.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="M:Native.User32.LockWorkStation">
            <summary>Locks the workstation's display. Locking a workstation protects it from unauthorized use.</summary>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            Because the function executes asynchronously, a <c>true</c> return value indicates that the operation has been initiated.
            It does not indicate whether the workstation has been successfully locked.
            </returns>
        </member>
        <member name="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)">
            <summary>
            The BeginPaint function prepares the specified window for painting and fills a
            <see cref="T:Native.PAINTSTRUCT"/> structure with information about the painting.
            </summary>
            <param name="hWnd">Handle to the window to be repainted.</param>
            <param name="ps">Pointer to the <see cref="T:Native.PAINTSTRUCT"/> structure that will receive painting information.</param>
            <returns>
            If the function succeeds, the return value is the handle to a display device context for the specified window.
            If the function fails, the return value is <see cref="M:IntPtr.Zero"/>, indicating that no display device context is available.
            </returns>
        </member>
        <member name="M:Native.User32.EndPaint(System.IntPtr,Native.PAINTSTRUCT@)">
            <summary>
            The EndPaint function marks the end of painting in the specified window.
            This function is required for each call to the <see cref="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)"/> function, but only after painting is complete.
            </summary>
            <param name="hWnd">Handle to the window that has been repainted.</param>
            <param name="ps">Pointer to a <see cref="T:Native.PAINTSTRUCT"/> structure that contains the painting information retrieved by <see cref="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)"/>.</param>
            <returns>The return value is always <c>true</c>.</returns>
        </member>
        <member name="M:Native.User32.UpdateLayeredWindow(System.IntPtr,System.IntPtr,Native.POINT@,Native.SIZE@,System.IntPtr,Native.POINT@,System.Int32,Native.BLENDFUNCTION@,Native.ULW)">
            <summary>Updates the position, size, shape, content, and translucency of a layered window.</summary>
            <param name="hwnd">
            A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function.
            Windows 8: The WS_EX_LAYERED style is supported for top-level windows and child windows.
            Previous Windows versions support WS_EX_LAYERED only for top-level windows.
            </param>
            <param name="hdcDst">
            A handle to a DC for the screen. This handle is obtained by specifying NULL when calling the function.
            It is used for palette color matching when the window contents are updated.
            If hdcDst isNULL, the default palette will be used.
            If hdcSrc is NULL, hdcDst must be NULL.
            </param>
            <param name="pptDst">
            A pointer to a structure that specifies the new screen position of the layered window.
            If the current position is not changing, pptDst can be NULL.
            </param>
            <param name="psize">
            A pointer to a structure that specifies the new size of the layered window.
            If the size of the window is not changing, psize can be NULL.
            If hdcSrc is NULL, psize must be NULL.
            </param>
            <param name="hdcSrc">
            A handle to a DC for the surface that defines the layered window.
            This handle can be obtained by calling the CreateCompatibleDC function.
            If the shape and visual context of the window are not changing, hdcSrc can be NULL. 
            </param>
            <param name="pprSrc">
            A pointer to a structure that specifies the location of the layer in the device context.
            If hdcSrc is NULL, pptSrc should be NULL. 
            </param>
            <param name="crKey">
            A structure that specifies the color key to be used when composing the layered window.
            To generate a COLORREF, use the RGB macro. 
            </param>
            <param name="pblend">
            A pointer to a structure that specifies the transparency value to be used when composing the layered window. 
            </param>
            <param name="dwFlags"><see cref="T:ULW"/>.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:Native.User32.AnimateWindow(System.IntPtr,System.UInt32,Native.AW)">
            <summary>
            Enables you to produce special effects when showing or hiding windows.
            There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade.
            </summary>
            <param name="hWnd">
            A handle to the window to animate.
            The calling thread must own this window.
            </param>
            <param name="dwTime">
            The time it takes to play the animation, in milliseconds.
            Typically, an animation takes 200 milliseconds to play.
            </param>
            <param name="dwFlags">
            The type of animation. Note that, by default, these flags take effect when showing a window.
            To take effect when hiding a window, use <see cref="M:AW.HIDE"/> and a logical OR operator with the appropriate flags. 
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="M:Native.User32.RedrawWindow(System.IntPtr,Native.RECT@,System.IntPtr,Native.RDW)">
            <summary>
            Updates the specified rectangle or region in a window's client area.
            </summary>
            <param name="hWnd">
            A handle to the window to be redrawn.
            If this parameter is IntPtr.Zero, the desktop window is updated.
            </param>
            <param name="lprcUpdate">
            A pointer to a RECT structure containing the coordinates, in device units, of the update rectangle.
            This parameter is ignored if the <paramref name="hrgnUpdate"/> parameter identifies a region.
            </param>
            <param name="hrgnUpdate">
            A handle to the update region. If both the <paramref name="hrgnUpdate"/> and <paramref name="lprcUpdate"/> parameters are IntPtr.Zero,
            the entire client area is added to the update region.
            </param>
            <param name="flags">
            One or more redraw flags. This parameter can be used to invalidate or validate a window,
            control repainting, and control which windows are affected by RedrawWindow().
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,Native.RDW)">
            <summary>
            Updates the specified rectangle or region in a window's client area.
            </summary>
            <param name="hWnd">
            A handle to the window to be redrawn.
            If this parameter is IntPtr.Zero, the desktop window is updated.
            </param>
            <param name="lprcUpdate">
            A pointer to a RECT structure containing the coordinates, in device units, of the update rectangle.
            This parameter is ignored if the <paramref name="hrgnUpdate"/> parameter identifies a region.
            </param>
            <param name="hrgnUpdate">
            A handle to the update region. If both the <paramref name="hrgnUpdate"/> and <paramref name="lprcUpdate"/> parameters are IntPtr.Zero,
            the entire client area is added to the update region.
            </param>
            <param name="flags">
            One or more redraw flags. This parameter can be used to invalidate or validate a window,
            control repainting, and control which windows are affected by RedrawWindow().
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.GetParent(System.IntPtr)">
            <summary>
            Retrieves a handle to the specified window's parent or owner.
            To retrieve a handle to a specified ancestor, use the GetAncestor function.
            </summary>
            <param name="hWnd">A handle to the window whose parent window handle is to be retrieved.</param>
            <returns>
            If the window is a child window, the return value is a handle to the parent window.
            If the window is a top-level window with the WS_POPUP style, the return value is a handle to the owner window.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Native.User32.FillRect(System.IntPtr,Native.RECT@,System.IntPtr)">
            <summary>
            The FillRect function fills a rectangle by using the specified brush.
            This function includes the left and top borders, but excludes the right and bottom borders
            of the rectangle.
            </summary>
            <param name="hDC">A handle to the device context.</param>
            <param name="lprc">A pointer to a <see cref="T:Native.RECT"/> structure that contains the logical coordinates of the rectangle to be filled.</param>
            <param name="hbr">A handle to the brush used to fill the rectangle.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
            <seealso>https://msdn.microsoft.com/en-us/library/windows/desktop/dd162719%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="M:Native.User32.MapWindowPoints(System.IntPtr,System.IntPtr,Native.POINT[],System.Int32)">
            <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate
            space relative to one window to a coordinate space relative to another window.
            </summary>
            <param name="hWndFrom">
            A handle to the window from which points are converted.
            If this parameter is NULL or HWND_DESKTOP, the points are presumed
            to be in screen coordinates.
            </param>
            <param name="hWndTo">
            A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP,
            the points are converted to screen coordinates.
            </param>
            <param name="lpPoints">
            A pointer to an array of POINT structures that contain the set of points
            to be converted. The points are in device units. This parameter can also
            point to a RECT structure, in which case the cPoints parameter should be set to 2.
            </param>
            <param name="cPoints">
            The number of POINT structures in the array pointed to by the lpPoints parameter.
            </param>
            <returns>
            If the function succeeds, the low-order word of the return value is the number of
            pixels added to the horizontal coordinate of each source point in order to compute
            the horizontal coordinate of each destination point. (In addition to that,
            if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal
            coordinate is multiplied by -1.) The high-order word is the number of pixels added
            to the vertical coordinate of each source point in order to compute the vertical
            coordinate of each destination point.
            </returns>
        </member>
        <member name="M:Native.User32.MapWindowPoints(System.IntPtr,System.IntPtr,Native.POINT@,System.Int32)">
            <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate
            space relative to one window to a coordinate space relative to another window.
            </summary>
            <param name="hWndFrom">
            A handle to the window from which points are converted.
            If this parameter is NULL or HWND_DESKTOP, the points are presumed
            to be in screen coordinates.
            </param>
            <param name="hWndTo">
            A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP,
            the points are converted to screen coordinates.
            </param>
            <param name="lpPoints">
            A pointer to an array of POINT structures that contain the set of points
            to be converted. The points are in device units. This parameter can also
            point to a RECT structure, in which case the cPoints parameter should be set to 2.
            </param>
            <param name="cPoints">
            The number of POINT structures in the array pointed to by the lpPoints parameter.
            </param>
            <returns>
            If the function succeeds, the low-order word of the return value is the number of
            pixels added to the horizontal coordinate of each source point in order to compute
            the horizontal coordinate of each destination point. (In addition to that,
            if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal
            coordinate is multiplied by -1.) The high-order word is the number of pixels added
            to the vertical coordinate of each source point in order to compute the vertical
            coordinate of each destination point.
            </returns>
        </member>
        <member name="T:Native.Dwmapi">
            <summary>Функции библиотеки dwmapi.dll.</summary>
        </member>
        <member name="F:Native.Dwmapi.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.IntPtr,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Int32@,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean@,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMNCRP)">
            <summary>Sets non-client rendering policy.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="renderingPolicy">Non-client rendering policy.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMFLIP3D)">
            <summary>Sets Flip3D window behavior.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="flip3DPolicy">Flip3D window behavior.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean)">
            <summary>Sets boolean window attribute.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="value"/>
            parameter specifies the value of that attribute.
            </param>
            <param name="value">Attribute value.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.IntPtr,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.Int32@,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean@,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmExtendFrameIntoClientArea(System.IntPtr,Native.MARGINS@)">
            <summary>Extends the window frame into the client area.</summary>
            <param name="hWnd">The handle to the window in which the frame will be extended into the client area.</param>
            <param name="pMarInset">
            A reference to a <see cref="T:MARGINS"/> structure that describes the margins to use
            when extending the frame into the client area.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>
            This function must be called whenever Desktop Window Manager (DWM) composition is toggled.
            Handle the <see cref="M:WM.DWMCOMPOSITIONCHANGED"/> message for composition change notification.
            Use negative margin values to create the "sheet of glass" effect where the client area is rendered as
            a solid surface with no window border.
            </remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmEnableBlurBehindWindow(System.IntPtr,Native.DWM_BLURBEHIND@)">
            <summary>Enables the blur effect on a specified window.</summary>
            <param name="hWnd">The handle to the window on which the blur behind data is applied.</param>
            <param name="pBlurBehind">
            A reference to a <see cref="T:DWM_BLURBEHIND"/> structure that provides blur behind data.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmEnableComposition(Native.DWM_EC)">
            <summary>Enables or disables Desktop Window Manager (DWM) composition.</summary>
            <param name="uCompositionAction">
            <see cref="M:DWM_EC.ENABLECOMPOSITION"/> to enable DWM composition;
            <see cref="M:DWM_EC.DISABLECOMPOSITION"/> to disable composition. 
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>This function is deprecated as of Windows 8. DWM can no longer be programmatically disabled.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmIsCompositionEnabled(System.Boolean@)">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            Applications can listen for composition state changes by handling the <see cref="M:WM.DWMCOMPOSITIONCHANGED"/> notification.
            </summary>
            <param name="pfEnabled">
            A pointer to a value that, when this function returns successfully, receives <c>true</c> if DWM
            composition is enabled; otherwise, <c>false</c>.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Native.RasterOperation">
            <summary>Растровые операции.</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:Native.RasterOperation.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:Native.RasterOperation.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:Native.RasterOperation.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:Native.RasterOperation.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:Native.RasterOperation.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="T:Native.DibCompression">
            <summary>Тип сжатия DIB.</summary>
        </member>
        <member name="F:Native.DibCompression.RGB">
            <summary>An uncompressed format.</summary>
        </member>
        <member name="F:Native.DibCompression.RLE8">
            <summary>
            A run-length encoded (RLE) format for bitmaps with 8 bpp.
            The compression format is a 2-byte format consisting of a count byte followed by a byte containing a color index. 
            </summary>
        </member>
        <member name="F:Native.DibCompression.RLE4">
            <summary>
            An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte
            followed by two word-length color indexes. 
            </summary>
        </member>
        <member name="F:Native.DibCompression.BITFIELDS">
            <summary>
            Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the red, green,
            and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bpp bitmaps.
            </summary>
        </member>
        <member name="F:Native.DibCompression.JPEG">
            <summary>Indicates that the image is a JPEG image.</summary>
        </member>
        <member name="F:Native.DibCompression.PNG">
            <summary>Indicates that the image is a PNG image.</summary>
        </member>
        <member name="T:Native.DibUsage">
            <summary>Определяет тип изображения (с палитрой/без).</summary>
        </member>
        <member name="F:Native.DibUsage.DIB_RGB_COLORS">
            <summary>Color table in RGBs.</summary>
        </member>
        <member name="F:Native.DibUsage.DIB_PAL_COLORS">
            <summary>Color table in palette indices.</summary>
        </member>
        <member name="T:Native.StretchBltMode">
            <summary>Определяет способ растяжения/сжатия изображения.</summary>
        </member>
        <member name="F:Native.StretchBltMode.INVALID">
            <summary>Invalid value.</summary>
        </member>
        <member name="F:Native.StretchBltMode.INVALID_PARAMETER">
            <summary>One or more of the input parameters is invalid.</summary>
        </member>
        <member name="F:Native.StretchBltMode.BLACKONWHITE">
            <summary>
            Performs a Boolean AND operation using the color values for the eliminated and existing pixels.
            If the bitmap is a monochrome bitmap, this mode preserves black pixels at the expense of white pixels.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.WHITEONBLACK">
            <summary>
            Performs a Boolean OR operation using the color values for the eliminated and existing pixels.
            If the bitmap is a monochrome bitmap, this mode preserves white pixels at the expense of black pixels.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.COLORONCOLOR">
            <summary>
            Deletes the pixels. This mode deletes all eliminated lines of pixels without trying to preserve their information.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.HALFTONE">
            <summary>
            Maps pixels from the source rectangle into blocks of pixels in the destination rectangle.
            The average color over the destination block of pixels approximates the color of the source pixels.
            After setting the HALFTONE stretching mode, an application must call the SetBrushOrgEx function to set the brush origin.
            If it fails to do so, brush misalignment occurs.
            </summary>
        </member>
        <member name="T:Native.ScrollWindowFlags">
            <summary>Флаги для функции ScrollWindowEx.</summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.SCROLLCHILDREN">
            <summary>
            Scroll children within *lprcScroll.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.INVALIDATE">
            <summary>
            Invalidate after scrolling.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.ERASE">
            <summary>
            If SW_INVALIDATE, don't send <see cref="M:WM.ERASEBACKGROUND"/>.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.SMOOTHSCROLL">
            <summary>
            Use smooth scrolling.
            </summary>
        </member>
        <member name="T:Native.SW">
            <summary>Опции для <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/>.</summary>
        </member>
        <member name="F:Native.SW.FORCEMINIMIZE">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding.
            This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:Native.SW.HIDE">
            <summary>Hides the window and activates another window.</summary>
        </member>
        <member name="F:Native.SW.MAXIMIZE">
            <summary>Maximizes the specified window.</summary>
        </member>
        <member name="F:Native.SW.MINIMIZE">
            <summary>Minimizes the specified window and activates the next top-level window in the Z order.</summary>
        </member>
        <member name="F:Native.SW.RESTORE">
            <summary>
            Activates and displays the window.
            If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess
            function by the program that started the application. 
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window.
            This value is similar to <see cref="F:Native.SW.SHOWMINIMIZED"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNA">
            <summary>
            Displays the window in its current size and position.
            This value is similar to <see cref="F:Native.SW.SHOW"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position.
            This value is similar to <see cref="F:Native.SW.SHOWNORMAL"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNORMAL">
            <summary>
            Activates and displays a window.
            If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="T:Native.WM">
            <summary>Windows message.</summary>
        </member>
        <member name="T:Native.CS">
            <summary>Window class styles.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ff729176.aspx</seealso>
        </member>
        <member name="F:Native.CS.BYTEALIGNCLIENT">
            <summary>
            Aligns the window's client area on a byte boundary (in the x direction).
            This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Native.CS.BYTEALIGNWINDOW">
            <summary>
            Aligns the window on a byte boundary (in the x direction).
            This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Native.CS.CLASSDC">
            <summary>
            Allocates one device context to be shared by all windows in the class.
            Because window classes are process specific, it is possible for multiple threads of an application to create a window of the same class.
            It is also possible for the threads to attempt to use the device context simultaneously.
            When this happens, the system allows only one thread to successfully finish its drawing operation. 
            </summary>
        </member>
        <member name="F:Native.CS.DBLCLKS">
            <summary>
            Sends a double-click message to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class.
            </summary>
        </member>
        <member name="F:Native.CS.DROPSHADOW">
            <summary>
            Enables the drop shadow effect on a window. The effect is turned on and off through SPI_SETDROPSHADOW.
            Typically, this is enabled for small, short-lived windows such as menus to emphasize their Z order relationship to other windows.
            </summary>
        </member>
        <member name="F:Native.CS.GLOBALCLASS">
            <summary>
            Indicates that the window class is an application global class.
            For more information, see the "Application Global Classes" section of About Window Classes.
            </summary>
        </member>
        <member name="F:Native.CS.HREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the width of the client area.
            </summary>
        </member>
        <member name="F:Native.CS.NOCLOSE">
            <summary>
            Disables Close on the window menu.
            </summary>
        </member>
        <member name="F:Native.CS.OWNDC">
            <summary>
            Allocates a unique device context for each window in the class.
            </summary>
        </member>
        <member name="F:Native.CS.PARENTDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the child can draw on the parent.
            A window with the <see cref="F:Native.CS.PARENTDC"/> style bit receives a regular device context from the system's cache of device contexts.
            It does not give the child the parent's device context or device context settings.
            Specifying <see cref="F:Native.CS.PARENTDC"/> enhances an application's performance. 
            </summary>
        </member>
        <member name="F:Native.CS.SAVEBITS">
            <summary>
            Saves, as a bitmap, the portion of the screen image obscured by a window of this class.
            When the window is removed, the system uses the saved bitmap to restore the screen image, including other windows that were obscured.
            Therefore, the system does not send <see cref="M:WM.PAINT"/> messages to windows that were obscured if the memory used by the bitmap
            has not been discarded and if other screen actions have not invalidated the stored image. 
            </summary>
        </member>
        <member name="F:Native.CS.VREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the height of the client area.
            </summary>
        </member>
        <member name="T:Native.WS">
            <summary>Window styles.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms632600.aspx</seealso>
        </member>
        <member name="F:Native.WS.BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:Native.WS.CAPTION">
            <summary>The window has a title bar (includes the <see cref="F:Native.WS.BORDER"/> style).</summary>
        </member>
        <member name="F:Native.WS.CHILD">
            <summary>
            The window is a child window. A window with this style cannot have a menu bar.
            This style cannot be used with the <see cref="F:Native.WS.POPUP"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.CHILDWINDOW">
            <summary>Same as <see cref="F:Native.WS.CHILD"/> style.</summary>
        </member>
        <member name="F:Native.WS.CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within the parent window.
            This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:Native.WS.CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a
            <see cref="M:WM.PAINT"/> message, the <see cref="F:Native.WS.CLIPSIBLINGS"/> style clips all other overlapping child
            windows out of the region of the child window to be updated.
            If <see cref="F:Native.WS.CLIPSIBLINGS"/> is not specified and child windows overlap, it is possible, when drawing within
            the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Native.WS.DISABLED">
            <summary>
            The window is initially disabled. A disabled window cannot receive input from the user.
            To change this after a window has been created, use the EnableWindow function.
            </summary>
        </member>
        <member name="F:Native.WS.DLGFRAME">
            <summary>
            The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.
            </summary>
        </member>
        <member name="F:Native.WS.GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it,
            up to the next control with the <see cref="F:Native.WS.GROUP"/> style. The first control in each group usually has the <see cref="F:Native.WS.TABSTOP"/> style
            so that the user can move from group to group.
            The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            </summary>
        </member>
        <member name="F:Native.WS.HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:Native.WS.ICONIC">
            <summary>The window is initially minimized. Same as the <see cref="F:Native.WS.MINIMIZE"/> style.</summary>
        </member>
        <member name="F:Native.WS.MAXIMIZE">
            <summary>The window is initially maximized.</summary>
        </member>
        <member name="F:Native.WS.MAXIMIZEBOX">
            <summary>
            The window has a maximize button. Cannot be combined with the <see cref="M:WS_EX.CONTEXTHELP"/> style.
            The <see cref="F:Native.WS.SYSMENU"/> style must also be specified. 
            </summary>
        </member>
        <member name="F:Native.WS.MINIMIZE">
            <summary>
            The window is initially minimized. Same as the <see cref="F:Native.WS.ICONIC"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.MINIMIZEBOX">
            <summary>
            The window has a minimize button. Cannot be combined with the <see cref="M:WS_EX.CONTEXTHELP"/> style.
            The <see cref="F:Native.WS.SYSMENU"/> style must also be specified. 
            </summary>
        </member>
        <member name="F:Native.WS.OVERLAPPED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border.
            Same as the <see cref="F:Native.WS.TILED"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the <see cref="F:Native.WS.TILEDWINDOW"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.POPUP">
            <summary>
            The windows is a pop-up window. This style cannot be used with the <see cref="F:Native.WS.CHILD"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.POPUPWINDOW">
            <summary>
            The window is a pop-up window. The <see cref="F:Native.WS.CAPTION"/> and <see cref="F:Native.WS.POPUPWINDOW"/> styles
            must be combined to make the window menu visible.
            </summary>
        </member>
        <member name="F:Native.WS.SIZEBOX">
            <summary>
            The window has a sizing border. Same as the <see cref="F:Native.WS.THICKFRAME"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.SYSMENU">
            <summary>
            The window has a window menu on its title bar. The <see cref="F:Native.WS.CAPTION"/> style must also be specified.
            </summary>
        </member>
        <member name="F:Native.WS.TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the <see cref="F:Native.WS.TABSTOP"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.THICKFRAME">
            <summary>
            The window has a sizing border. Same as the <see cref="F:Native.WS.SIZEBOX"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.TILED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border.
            Same as the <see cref="F:Native.WS.OVERLAPPED"/> style. 
            </summary>
        </member>
        <member name="F:Native.WS.TILEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the <see cref="F:Native.WS.OVERLAPPEDWINDOW"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.VISIBLE">
            <summary>
            The window is initially visible.
            This style can be turned on and off by using the ShowWindow or SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WS.VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="T:Native.WS_EX">
            <summary>Extended window styles.</summary>
        </member>
        <member name="F:Native.WS_EX.ACCEPTFILES">
            <summary>The window accepts drag-drop files.</summary>
        </member>
        <member name="F:Native.WS_EX.APPWINDOW">
            <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
        </member>
        <member name="F:Native.WS_EX.CLIENTEDGE">
            <summary>The window has a border with a sunken edge.</summary>
        </member>
        <member name="F:Native.WS_EX.COMPOSITED">
            <summary>
            Paints all descendants of a window in bottom-to-top painting order using double-buffering.
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
            <remarks>Windows 2000:  This style is not supported.</remarks>
        </member>
        <member name="F:Native.WS_EX.CONTEXTHELP">
            <summary>
            The title bar of the window includes a question mark.
            When the user clicks the question mark, the cursor changes to a question mark with a pointer.
            If the user then clicks a child window, the child receives a <see cref="M:WM.HELP"/> message.
            The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command.
            The Help application displays a pop-up window that typically contains help for the child window.
            <see cref="F:Native.WS_EX.CONTEXTHELP"/> cannot be used with the <see cref="M:WS.MAXIMIZEBOX"/> or  <see cref="M:WS.MINIMIZEBOX"/> styles.
            </summary>
        </member>
        <member name="F:Native.WS_EX.CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window when performing
            navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:Native.WS_EX.DLGMODALFRAME">
            <summary>
            The window has a double border; the window can, optionally, be created with a title bar
            by specifying the <see cref="M:WS.CAPTION"/> style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LAYERED">
            <summary>
            The window is a layered window.
            This style cannot be used if the window has a class style of either <see cref="M:CS.OWNDC"/> or <see cref="M:CS.CLASSDC"/>.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LAYOUTRTL">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment,
            the horizontal origin of the window is on the right edge.
            Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:Native.WS_EX.LEFT">
            <summary>The window has generic left-aligned properties. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment,
            the vertical scroll bar (if present) is to the left of the client area.
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LTRREADING">
            <summary>The window text is displayed using left-to-right reading-order properties. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.MDICHILD">
            <summary>The window is a MDI child window.</summary>
        </member>
        <member name="F:Native.WS_EX.NOACTIVATE">
            <summary>
            A top-level window created with this style does not become the foreground window when the user clicks it.
            The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
            </summary>
        </member>
        <member name="F:Native.WS_EX.NOINHERITLAYOUT">
            <summary>The window does not pass its window layout to its child windows.</summary>
        </member>
        <member name="F:Native.WS_EX.NOPARENTNOTIFY">
            <summary>
            The child window created with this style does not send the <see cref="F:Native.WM.PARENTNOTIFY"/> message
            to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:Native.WS_EX.NOREDIRECTIONBITMAP">
            <summary>
            The window does not render to a redirection surface. This is for windows that do not have visible content
            or that use mechanisms other than surfaces to provide their visual.
            </summary>
        </member>
        <member name="F:Native.WS_EX.OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Native.WS_EX.PALETTEWINDOW">
            <summary>The window is palette window, which is a modeless dialog box that presents an array of commands.</summary>
        </member>
        <member name="F:Native.WS_EX.RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class.
            This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports
            reading-order alignment; otherwise, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.RIGHTSCROLLBAR">
            <summary>The vertical scroll bar (if present) is to the right of the client area. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment,
            the window text is displayed using right-to-left reading-order properties.
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.STATICEDGE">
            <summary>
            The window has a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:Native.WS_EX.TOOLWINDOW">
            <summary>
            The window is intended to be used as a floating toolbar. A tool window has a title bar that is shorter than
            a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear
            in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu,
            its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:Native.WS_EX.TOPMOST">
            <summary>
            The window should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
            To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WS_EX.TRANSPARENT">
            <summary>
            The window should not be painted until siblings beneath the window (that were created by the same thread) have been painted.
            The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:Native.WS_EX.WINDOWEDGE">
            <summary>The window has a border with a raised edge.</summary>
        </member>
        <member name="T:Native.CWP">
            <summary>Флаги для функции <see cref="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)"/>.</summary>
        </member>
        <member name="F:Native.CWP.ALL">
            <summary>Does not skip any child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPDISABLED">
            <summary>Skips disabled child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPINVISIBLE">
            <summary>Skips invisible child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPTRANSPARENT">
            <summary>Skips transparent child windows.</summary>
        </member>
        <member name="T:Native.SM">
            <summary>System metric.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724385.aspx</seealso>
        </member>
        <member name="F:Native.SM.ARRANGE">
            <summary>The flags that specify how the system arranged minimized windows. </summary>
        </member>
        <member name="F:Native.SM.CLEANBOOT">
            <summary>
            The value that specifies how the system is started:
            	0 = Normal boot
            	1 = Fail-safe boot
            	2 = Fail-safe with network boot
            A fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files.
            </summary>
        </member>
        <member name="F:Native.SM.CMONITORS">
            <summary>The number of display monitors on a desktop.</summary>
        </member>
        <member name="F:Native.SM.CMOUSEBUTTONS">
            <summary>The number of buttons on a mouse, or zero if no mouse is installed.</summary>
        </member>
        <member name="F:Native.SM.CXBORDER">
            <summary>
            The width of a window border, in pixels.
            This is equivalent to the <see cref="F:Native.SM.CXEDGE"/> value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:Native.SM.CXCURSOR">
            <summary>The width of a cursor, in pixels. The system cannot create cursors of other sizes.</summary>
        </member>
        <member name="F:Native.SM.CXDLGFRAME">
            <summary>This value is the same as <see cref="F:Native.SM.CXFIXEDFRAME"/>.</summary>
        </member>
        <member name="F:Native.SM.CXDOUBLECLK">
            <summary>
            The width of the rectangle around the location of a first click in a double-click sequence, in pixels.
            The second click must occur within the rectangle that is defined by <see cref="F:Native.SM.CXDOUBLECLK"/> and <see cref="F:Native.SM.CYDOUBLECLK"/>
            for the system to consider the two clicks a double-click.
            The two clicks must also occur within a specified time. 
            </summary>
        </member>
        <member name="F:Native.SM.CXPADDEDBORDER">
            <summary>
            The amount of border padding for captioned windows, in pixels. Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.SM.CXDRAG">
            <summary>
            The number of pixels on either side of a mouse-down point that the mouse pointer can move before a drag operation begins.
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.
            </summary>
        </member>
        <member name="F:Native.SM.CXEDGE">
            <summary>
            The width of a 3-D border, in pixels. This metric is the 3-D counterpart of <see cref="F:Native.SM.CXBORDER"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            <see cref="F:Native.SM.CXFIXEDFRAME"/> is the height of the horizontal border, and <see cref="F:Native.SM.CYFIXEDFRAME"/> is the width of the vertical border.
            This value is the same as SM_CXDLGFRAME.
            </summary>
        </member>
        <member name="F:Native.SM.CXFOCUSBORDER">
            <summary>
            The width of the left and right edges of the focus rectangle that the DrawFocusRect draws. This value is in pixels. 
            </summary>
        </member>
        <member name="F:Native.SM.CXFRAME">
            <summary>
            This value is the same as <see cref="F:Native.SM.CXSIZEFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXFULLSCREEN">
            <summary>
            The width of the client area for a full-screen window on the primary display monitor, in pixels.
            To get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Native.SM.CXHSCROLL">
            <summary>The width of the arrow bitmap on a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXHTHUMB">
            <summary>
            The width of the thumb box in a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CXICON">
            <summary>
            The default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions that
            <see cref="F:Native.SM.CXICON"/> and <see cref="F:Native.SM.CYICON"/> specifies.
            </summary>
        </member>
        <member name="F:Native.SM.CXICONSPACING">
            <summary>
            The width of a grid cell for items in large icon view, in pixels.
            Each item fits into a rectangle of size <see cref="F:Native.SM.CXICONSPACING"/> by <see cref="F:Native.SM.CYICONSPACING"/> when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CXICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXMAXIMIZED">
            <summary>The default width, in pixels, of a maximized top-level window on the primary display monitor.</summary>
        </member>
        <member name="F:Native.SM.CXMAXTRACK">
            <summary>
            The default maximum width of a window that has a caption and sizing borders, in pixels.
            This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CXMENUCHECK">
            <summary>The width of the default menu check-mark bitmap, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMENUSIZE">
            <summary>
            The width of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CXMIN">
            <summary>The minimum width of a window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMINIMIZED">
            <summary>The width of a minimized window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMINSPACING">
            <summary>
            The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CXMINIMIZED"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXMINTRACK">
            <summary>
            The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CXSCREEN">
            <summary>
            The width of the screen of the primary display monitor, in pixels. This is the same value obtained by calling GetDeviceCaps
            as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES).
            </summary>
        </member>
        <member name="F:Native.SM.CXSIZE">
            <summary>The width of a button in a window caption or title bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.
            <see cref="F:Native.SM.CXSIZEFRAME"/> is the width of the horizontal border, and <see cref="F:Native.SM.CYSIZEFRAME"/> is the height of the vertical border.
            This value is the same as SM_CXFRAME.
            </summary>
        </member>
        <member name="F:Native.SM.CXSMICON">
            <summary>
            The recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:Native.SM.CXSMSIZE">
            <summary>The width of small caption buttons, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXVIRTUALSCREEN">
            <summary>
            The width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CXVIRTUALSCREEN"/> metric is the coordinates for the left side of the virtual screen. 
            </summary>
        </member>
        <member name="F:Native.SM.CXVSCROLL">
            <summary>The width of a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYBORDER">
            <summary>
            The height of a window border, in pixels. This is equivalent to the <see cref="F:Native.SM.CYEDGE"/> value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:Native.SM.CYCAPTION">
            <summary>The height of a caption area, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYCURSOR">
            <summary>The height of a cursor, in pixels. The system cannot create cursors of other sizes.</summary>
        </member>
        <member name="F:Native.SM.CYDLGFRAME">
            <summary>This value is the same as <see cref="F:Native.SM.CYFIXEDFRAME"/>.</summary>
        </member>
        <member name="F:Native.SM.CYDOUBLECLK">
            <summary>
            The height of the rectangle around the location of a first click in a double-click sequence, in pixels.
            The second click must occur within the rectangle defined by <see cref="F:Native.SM.CXDOUBLECLK"/> and <see cref="F:Native.SM.CYDOUBLECLK"/>
            for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time. 
            </summary>
        </member>
        <member name="F:Native.SM.CYDRAG">
            <summary>
            The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins.
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            If this value is negative, it is subtracted from above the mouse-down point and added below it. 
            </summary>
        </member>
        <member name="F:Native.SM.CYEDGE">
            <summary>
            The height of a 3-D border, in pixels. This is the 3-D counterpart of <see cref="F:Native.SM.CYBORDER"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            <see cref="F:Native.SM.CXFIXEDFRAME"/> is the height of the horizontal border, and <see cref="F:Native.SM.CYFIXEDFRAME"/> is the width of the vertical border.
            This value is the same as <see cref="F:Native.SM.CYDLGFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFOCUSBORDER">
            <summary>The height of the top and bottom edges of the focus rectangle drawn by DrawFocusRect. This value is in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYFRAME">
            <summary>
            This value is the same as <see cref="F:Native.SM.CYSIZEFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFULLSCREEN">
            <summary>
            The height of the client area for a full-screen window on the primary display monitor, in pixels.
            To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Native.SM.CYHSCROLL">
            <summary>The height of a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYICON">
            <summary>
            The default height of an icon, in pixels.
            The LoadIcon function can load only icons with the dimensions <see cref="F:Native.SM.CXICON"/> and <see cref="F:Native.SM.CYICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYICONSPACING">
            <summary>
            The height of a grid cell for items in large icon view, in pixels.
            Each item fits into a rectangle of size <see cref="F:Native.SM.CXICONSPACING"/> by <see cref="F:Native.SM.CYICONSPACING"/> when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CYICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYKANJIWINDOW">
            <summary>
            For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CYMAXIMIZED">
            <summary>
            The default height, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:Native.SM.CYMAXTRACK">
            <summary>
            The default maximum height of a window that has a caption and sizing borders, in pixels.
            This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CYMENU">
            <summary>The height of a single-line menu bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMENUCHECK">
            <summary>The height of the default menu check-mark bitmap, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMENUSIZE">
            <summary>
            The height of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CYMIN">
            <summary>The minimum height of a window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMINIMIZED">
            <summary>The height of a minimized window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMINSPACING">
            <summary>
            The height of a grid cell for a minimized window, in pixels.
            Each minimized window fits into a rectangle this size when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CYMINIMIZED"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYMINTRACK">
            <summary>
            The minimum tracking height of a window, in pixels.
            The user cannot drag the window frame to a size smaller than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CYSCREEN">
            <summary>
            The height of the screen of the primary display monitor, in pixels.
            This is the same value obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES).
            </summary>
        </member>
        <member name="F:Native.SM.CYSIZE">
            <summary>The height of a button in a window caption or title bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.
            <see cref="F:Native.SM.CXSIZEFRAME"/> is the width of the horizontal border, and <see cref="F:Native.SM.CYSIZEFRAME"/> is the height of the vertical border.
            This value is the same as <see cref="F:Native.SM.CYFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYSMCAPTION">
            <summary>The height of a small caption, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYSMICON">
            <summary>The recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.</summary>
        </member>
        <member name="F:Native.SM.CYSMSIZE">
            <summary>The height of small caption buttons, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYVIRTUALSCREEN">
            <summary>
            The height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.YVIRTUALSCREEN"/> metric is the coordinates for the top of the virtual screen.
            </summary>
        </member>
        <member name="F:Native.SM.CYVSCROLL">
            <summary>The height of the arrow bitmap on a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYVTHUMB">
            <summary>The height of the thumb box in a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.DBCSENABLED">
            <summary>Nonzero if User32.dll supports DBCS; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.DEBUG">
            <summary>Nonzero if the debug version of User.exe is installed; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.DIGITIZER">
            <summary>
            Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input service is started; otherwise, 0.
            The return value is a bitmask that specifies the type of digitizer input supported by the device.
            </summary>
        </member>
        <member name="F:Native.SM.IMMENABLED">
            <summary>Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.MAXIMUMTOUCHES">
            <summary>Nonzero if there are digitizers in the system; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.MEDIACENTER">
            <summary>Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.</summary>
        </member>
        <member name="F:Native.SM.MENUDROPALIGNMENT">
            <summary>Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are left-aligned.</summary>
        </member>
        <member name="F:Native.SM.MIDEASTENABLED">
            <summary>Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.</summary>
        </member>
        <member name="F:Native.SM.MOUSEPRESENT">
            <summary>
            Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice
            and because some systems detect the presence of the port instead of the presence of a mouse.
            </summary>
        </member>
        <member name="F:Native.SM.MOUSEHORIZONTALWHEELPRESENT">
            <summary>Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.</summary>
        </member>
        <member name="F:Native.SM.MOUSEWHEELPRESENT">
            <summary>Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.</summary>
        </member>
        <member name="F:Native.SM.NETWORK">
            <summary>
            The least significant bit is set if a network is present; otherwise, it is cleared.
            The other bits are reserved for future use.
            </summary>
        </member>
        <member name="F:Native.SM.PENWINDOWS">
            <summary>
            Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.
            </summary>
        </member>
        <member name="F:Native.SM.REMOTECONTROL">
            <summary>
            This system metric is used in a Terminal Services environment to determine if the current
            Terminal Server session is being remotely controlled.
            Its value is nonzero if the current session is remotely controlled; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.REMOTESESSION">
            <summary>
            This system metric is used in a Terminal Services environment.
            If the calling process is associated with a Terminal Services client session, the return value is nonzero.
            If the calling process is associated with the Terminal Services console session, the return value is 0. 
            </summary>
        </member>
        <member name="F:Native.SM.SAMEDISPLAYFORMAT">
            <summary>
            Nonzero if all the display monitors have the same color format, otherwise, 0.
            Two displays can have the same bit depth, but different color formats.
            For example, the red, green, and blue pixels can be encoded with different numbers of bits,
            or those bits can be located in different places in a pixel color value.
            </summary>
        </member>
        <member name="F:Native.SM.SECURE">
            <summary>This system metric should be ignored; it always returns 0.</summary>
        </member>
        <member name="F:Native.SM.SERVERR2">
            <summary>
            The build number if the system is Windows Server 2003 R2; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SHOWSOUNDS">
            <summary>
            Nonzero if the user requires an application to present information visually in
            situations where it would otherwise present the information only in audible form; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SHUTTINGDOWN">
            <summary>Nonzero if the current session is shutting down; otherwise, 0.</summary>
            <remarks>Windows 2000:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.SM.SLOWMACHINE">
            <summary>
            Nonzero if the computer has a low-end (slow) processor; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SWAPBUTTON">
            <summary>
            Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.STARTER">
            <summary>
            Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter,
            or Windows XP Starter Edition; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.TABLETPC">
            <summary>
            Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current
            operating system is Windows Vista or Windows 7 and the Tablet PC Input service is started; otherwise, 0.
            The <see cref="F:Native.SM.DIGITIZER"/> setting indicates the type of digitizer input supported by a device running Windows 7
            or Windows Server 2008 R2.
            </summary>
        </member>
        <member name="F:Native.SM.XVIRTUALSCREEN">
            <summary>
            The coordinates for the left side of the virtual screen.
            The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CXVIRTUALSCREEN"/> metric is the width of the virtual screen.
            </summary>
        </member>
        <member name="F:Native.SM.YVIRTUALSCREEN">
            <summary>
            The coordinates for the top of the virtual screen.
            The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CYVIRTUALSCREEN"/> metric is the height of the virtual screen.
            </summary>
        </member>
        <member name="T:Native.DeviceCaps">
            <summary>Device caps.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd144877.aspx</seealso>
        </member>
        <member name="F:Native.DeviceCaps.DRIVERVERSION">
            <summary>Device driver version.</summary>
        </member>
        <member name="F:Native.DeviceCaps.TECHNOLOGY">
            <summary>Device classification.</summary>
        </member>
        <member name="F:Native.DeviceCaps.HORZSIZE">
            <summary>Horizontal size in millimeters.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VERTSIZE">
            <summary>Vertical size in millimeters.</summary>
        </member>
        <member name="F:Native.DeviceCaps.HORZRES">
            <summary>Horizontal width in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VERTRES">
            <summary>Vertical height in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.BITSPIXEL">
            <summary>Number of bits per pixel.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PLANES">
            <summary>Number of planes.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMBRUSHES">
            <summary>Number of brushes the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMPENS">
            <summary>Number of pens the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMMARKERS">
            <summary>Number of markers the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMFONTS">
            <summary>Number of fonts the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMCOLORS">
            <summary>Number of colors the device supports.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PDEVICESIZE">
            <summary>Size required for device descriptor.</summary>
        </member>
        <member name="F:Native.DeviceCaps.CURVECAPS">
            <summary>Curve capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LINECAPS">
            <summary>Line capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.POLYGONALCAPS">
            <summary>Polygonal capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.TEXTCAPS">
            <summary>Text capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.CLIPCAPS">
            <summary>Clipping capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.RASTERCAPS">
            <summary>Bitblt capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTX">
            <summary>Length of the X leg.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTY">
            <summary>Length of the Y leg.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTXY">
            <summary>Length of the hypotenuse.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SHADEBLENDCAPS">
            <summary>Shading and Blending caps.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LOGPIXELSX">
            <summary>Logical pixels inch in X.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LOGPIXELSY">
            <summary>Logical pixels inch in Y.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SIZEPALETTE">
            <summary>Number of entries in physical palette.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMRESERVED">
            <summary>Number of reserved entries in palette.</summary>
        </member>
        <member name="F:Native.DeviceCaps.COLORRES">
            <summary>Actual color resolution.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALWIDTH">
            <summary>Physical Width in device units.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALHEIGHT">
            <summary>Physical Height in device units.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALOFFSETX">
            <summary>Physical Printable Area x margin.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALOFFSETY">
            <summary>Physical Printable Area y margin.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SCALINGFACTORX">
            <summary>Scaling factor x.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SCALINGFACTORY">
            <summary>Scaling factor y.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VREFRESH">
            <summary>Current vertical refresh rate of the display device (for displays only) in Hz.</summary>
        </member>
        <member name="F:Native.DeviceCaps.DESKTOPVERTRES">
            <summary>Horizontal width of entire desktop in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.DESKTOPHORZRES">
            <summary>Vertical height of entire desktop in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.BLTALIGNMENT">
            <summary>Preferred blt alignment.</summary>
        </member>
        <member name="T:Native.SWP">
            <summary>Flags for <see cref="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)"/>.</summary>
        </member>
        <member name="F:Native.SWP.NOSIZE">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
        </member>
        <member name="F:Native.SWP.NOMOVE">
            <summary>Retains the current position (ignores x and y parameters).</summary>
        </member>
        <member name="F:Native.SWP.NOZORDER">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
        </member>
        <member name="F:Native.SWP.NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs.
            This applies to the client area, the nonclient area (including the title bar and scroll bars),
            and any part of the parent window uncovered as a result of the window being moved. When this flag is set,
            the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:Native.SWP.NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set, the window is activated and moved to the
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Native.SWP.DRAWFRAME">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
        </member>
        <member name="F:Native.SWP.FRAMECHANGED">
            <summary>
            Applies new frame styles set using the <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function.
            Sends a <see cref="M:WM.NCCALCSIZE"/> message to the window, even if the window's size is not being changed.
            If this flag is not specified, <see cref="M:WM.NCCALCSIZE"/> is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:Native.SWP.SHOWWINDOW">
            <summary>Displays the window.</summary>
        </member>
        <member name="F:Native.SWP.HIDEWINDOW">
            <summary>Hides the window.</summary>
        </member>
        <member name="F:Native.SWP.NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area.
            If this flag is not specified, the valid contents of the client area are saved and copied back
            into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:Native.SWP.NOOWNERZORDER">
            <summary>Does not change the owner window's position in the Z order.</summary>
        </member>
        <member name="F:Native.SWP.NOREPOSITION">
            <summary>Same as the <see cref="F:Native.SWP.NOOWNERZORDER"/> flag.</summary>
        </member>
        <member name="F:Native.SWP.NOSENDCHANGING">
            <summary>Prevents the window from receiving the <see cref="M:WM.WINDOWPOSCHANGING"/> message.</summary>
        </member>
        <member name="F:Native.SWP.DEFERERASE">
            <summary>Prevents generation of the <see cref="M:WM.SYNCPAINT"/> message.</summary>
        </member>
        <member name="F:Native.SWP.ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues,
            the system posts the request to the thread that owns the window.
            This prevents the calling thread from blocking its execution while other threads process the request. 
            </summary>
        </member>
        <member name="T:Native.DWMWA">
            <summary>DWM Window Attributes.</summary>
        </member>
        <member name="F:Native.DWMWA.NCRENDERING_ENABLED">
            <summary>[get] Is non-client rendering enabled/disabled.</summary>
        </member>
        <member name="F:Native.DWMWA.NCRENDERING_POLICY">
            <summary>[set] Non-client rendering policy.</summary>
        </member>
        <member name="F:Native.DWMWA.TRANSITIONS_FORCEDISABLED">
            <summary>[set] Potentially enable/forcibly disable transitions.</summary>
        </member>
        <member name="F:Native.DWMWA.ALLOW_NCPAINT">
            <summary>[set] Allow contents rendered in the non-client area to be visible on the DWM-drawn frame.</summary>
        </member>
        <member name="F:Native.DWMWA.CAPTION_BUTTON_BOUNDS">
            <summary>[get] Bounds of the caption button area in window-relative space.</summary>
        </member>
        <member name="F:Native.DWMWA.NONCLIENT_RTL_LAYOUT">
            <summary>[set] Is non-client content RTL mirrored.</summary>
        </member>
        <member name="F:Native.DWMWA.FORCE_ICONIC_REPRESENTATION">
            <summary>[set] Force this window to display iconic thumbnails.</summary>
        </member>
        <member name="F:Native.DWMWA.FLIP3D_POLICY">
            <summary>[set] Designates how Flip3D will treat the window.</summary>
        </member>
        <member name="F:Native.DWMWA.EXTENDED_FRAME_BOUNDS">
            <summary>[get] Gets the extended frame bounds rectangle in screen space.</summary>
        </member>
        <member name="F:Native.DWMWA.HAS_ICONIC_BITMAP">
            <summary>[set] Indicates an available bitmap when there is no better thumbnail representation.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.DISALLOW_PEEK">
            <summary>[set] Don't invoke Peek on the window.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.EXCLUDED_FROM_PEEK">
            <summary>[set] LivePreview exclusion information.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.CLOAK">
            <summary>[set] Cloak or uncloak the window.</summary>
            <remarks>Do not use.</remarks>
        </member>
        <member name="F:Native.DWMWA.CLOAKED">
            <summary>[get] Gets the cloaked state of the window.</summary>
            <remarks>Windows 7 and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.FREEZE_REPRESENTATION">
            <summary>[set] Force this window to freeze the thumbnail without live update.</summary>
            <remarks>Windows 7 and earlier:  This value is not supported.</remarks>
        </member>
        <member name="T:Native.DWMNCRP">
            <summary>Non-client rendering policy attribute values.</summary>
        </member>
        <member name="F:Native.DWMNCRP.USEWINDOWSTYLE">
            <summary>Enable/disable non-client rendering based on window style.</summary>
        </member>
        <member name="F:Native.DWMNCRP.DISABLED">
            <summary>Disabled non-client rendering; window style is ignored.</summary>
        </member>
        <member name="F:Native.DWMNCRP.ENABLED">
            <summary>Enabled non-client rendering; window style is ignored.</summary>
        </member>
        <member name="T:Native.DWMFLIP3D">
            <summary>Values designating how Flip3D treats a given window.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.DEFAULT">
            <summary>Hide or include the window in Flip3D based on window style and visibility.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.EXCLUDEBELOW">
            <summary>Display the window under Flip3D and disabled.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.EXCLUDEABOVE">
            <summary>Display the window above Flip3D and enabled.</summary>
        </member>
        <member name="T:Native.DWM_CLOAKED">
            <summary>Cloaked flags describing why a window is cloaked.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.APP">
            <summary>The window was cloaked by its owner application.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.SHELL">
            <summary>The window was cloaked by the Shell.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.INHERITED">
            <summary>The cloak value was inherited from its owner window.</summary>
        </member>
        <member name="F:Native.DWM_BB.ENABLE">
            <summary>A value for the fEnable member has been specified.</summary>
        </member>
        <member name="F:Native.DWM_BB.BLURREGION">
            <summary>A value for the hRgnBlur member has been specified.</summary>
        </member>
        <member name="F:Native.DWM_BB.TRANSITIONONMAXIMIZED">
            <summary>A value for the fTransitionOnMaximized member has been specified.</summary>
        </member>
        <member name="T:Native.FLASHW">
            <summary>Flags for <see cref="T:FLASHWINFO"/>.</summary>
        </member>
        <member name="F:Native.FLASHW.ALL">
            <summary>
            Flash both the window caption and taskbar button.
            This is equivalent to setting the CAPTION | TRAY flags.
            </summary>
        </member>
        <member name="F:Native.FLASHW.CAPTION">
            <summary>Flash the window caption.</summary>
        </member>
        <member name="F:Native.FLASHW.STOP">
            <summary>Stop flashing. The system restores the window to its original state.</summary>
        </member>
        <member name="F:Native.FLASHW.TIMER">
            <summary>Flash continuously, until the STOP flag is set.</summary>
        </member>
        <member name="F:Native.FLASHW.TIMERNOFG">
            <summary>Flash continuously until the window comes to the foreground.</summary>
        </member>
        <member name="F:Native.FLASHW.TRAY">
            <summary>Flash the taskbar button.</summary>
        </member>
        <member name="T:Native.MONITOR">
            <summary>
            Flags for <see cref="M:User32.MonitorFromWindow()"/>.
            Determines the function's return value if the window does not intersect any display monitor.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTONULL">
            <summary>
            Returns IntPtr.Zero.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTOPRIMARY">
            <summary>
            Returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTONEAREST">
            <summary>
            Returns a handle to the display monitor that is nearest to the window.
            </summary>
        </member>
        <member name="F:Native.ULW.ALPHA">
            <summary>
            Use pblend as the blend function.
            If the display mode is 256 colors or less, the effect of this value is the same as the effect of ULW_OPAQUE.
            </summary>
        </member>
        <member name="F:Native.ULW.COLORKEY">
            <summary>Use crKey as the transparency color.</summary>
        </member>
        <member name="F:Native.ULW.ULW_OPAQUE">
            <summary>Draw an opaque layered window.</summary>
        </member>
        <member name="T:Native.AW">
            <summary>Flags for <see cref="M:User32.AnimateWindow"/>.</summary>
        </member>
        <member name="F:Native.AW.ACTIVATE">
            <summary>Activates the window. Do not use this value with <see cref="M:HIDE"/>.</summary>
        </member>
        <member name="F:Native.AW.BLEND">
            <summary>Uses a fade effect. This flag can be used only if hwnd is a top-level window.</summary>
        </member>
        <member name="F:Native.AW.CENTER">
            <summary>
            Makes the window appear to collapse inward if <see cref="M:HIDE"/> is used or expand outward
            if the <see cref="M:HIDE"/> is not used. The various direction flags have no effect.
            </summary>
        </member>
        <member name="F:Native.AW.HIDE">
            <summary>Hides the window. By default, the window is shown.</summary>
        </member>
        <member name="F:Native.AW.HOR_POSITIVE">
            <summary>
            Animates the window from left to right.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.HOR_NEGATIVE">
            <summary>
            Animates the window from right to left.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.SLIDE">
            <summary>
            Uses slide animation. By default, roll animation is used.
            This flag is ignored when used with <see cref="M:CENTER"/>.
            </summary>
        </member>
        <member name="F:Native.AW.VER_POSITIVE">
            <summary>
            Animates the window from top to bottom.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.VER_NEGATIVE">
            <summary>
            Animates the window from bottom to top.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="T:Native.RDW">
            <summary>Flags for <see cref="M:User32.RedrawWindow"/>.</summary>
        </member>
        <member name="F:Native.RDW.INVALIDATE">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL,
            RDW_INVALIDATE invalidates the entire window.
            </summary>
        </member>
        <member name="F:Native.RDW.INTERNALPAINT">
            <summary>
            Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.
            </summary>
        </member>
        <member name="F:Native.RDW.ERASE">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:Native.RDW.VALIDATE">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:Native.RDW.NOINTERNALPAINT">
            <summary>
            Suppresses any pending internal WM_PAINT messages. This flag does not affect WM_PAINT
            messages resulting from a non-NULL update area.
            </summary>
        </member>
        <member name="F:Native.RDW.NOERASE">
            <summary>Suppresses any pending WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:Native.RDW.NOCHILDREN">
            <summary>Excludes child windows, if any, from the repainting operation.</summary>
        </member>
        <member name="F:Native.RDW.ALLCHILDREN">
            <summary>Includes child windows, if any, in the repainting operation.</summary>
        </member>
        <member name="F:Native.RDW.UPDATENOW">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values,
            to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.
            </summary>
        </member>
        <member name="F:Native.RDW.ERASENOW">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values,
            to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            </summary>
        </member>
        <member name="F:Native.RDW.FRAME">
            <summary>
            Causes any part of the nonclient area of the window that intersects the update region to receive a WM_NCPAINT message.
            The RDW_INVALIDATE flag must also be specified; otherwise, RDW_FRAME has no effect. The WM_NCPAINT message is typically
            not sent during the execution of RedrawWindow unless either RDW_UPDATENOW or RDW_ERASENOW is specified.
            </summary>
        </member>
        <member name="F:Native.RDW.NOFRAME">
            <summary>
            Suppresses any pending WM_NCPAINT messages. This flag must be used with RDW_VALIDATE and is typically
            used with RDW_NOCHILDREN. RDW_NOFRAME should be used with care, as it could cause parts of a window to be painted improperly.
            </summary>
        </member>
        <member name="T:Native.StockObject">
            <summary>Stock objects.</summary>
        </member>
        <member name="F:Native.StockObject.WHITE_BRUSH">
            <summary>White brush.</summary>
        </member>
        <member name="F:Native.StockObject.LTGRAY_BRUSH">
            <summary>Light gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.GRAY_BRUSH">
            <summary>Gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.DKGRAY_BRUSH">
            <summary>Dark gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.BLACK_BRUSH">
            <summary>Black brush.</summary>
        </member>
        <member name="F:Native.StockObject.NULL_BRUSH">
            <summary>Null brush (equivalent to HOLLOW_BRUSH).</summary>
        </member>
        <member name="F:Native.StockObject.HOLLOW_BRUSH">
            <summary>Hollow brush (equivalent to NULL_BRUSH).</summary>
        </member>
        <member name="F:Native.StockObject.WHITE_PEN">
            <summary>White pen.</summary>
        </member>
        <member name="F:Native.StockObject.BLACK_PEN">
            <summary>Black pen.</summary>
        </member>
        <member name="F:Native.StockObject.NULL_PEN">
            <summary>Null pen. The null pen draws nothing.</summary>
        </member>
        <member name="F:Native.StockObject.OEM_FIXED_FONT">
            <summary>Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font.</summary>
        </member>
        <member name="F:Native.StockObject.ANSI_FIXED_FONT">
            <summary>Windows fixed-pitch (monospace) system font.</summary>
        </member>
        <member name="F:Native.StockObject.ANSI_VAR_FONT">
            <summary>Windows variable-pitch (proportional space) system font.</summary>
        </member>
        <member name="F:Native.StockObject.SYSTEM_FONT">
            <summary>
            System font. By default, the system uses the system font to draw menus, dialog box controls, and text.
            It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows.
            The default system font is Tahoma.
            </summary>
        </member>
        <member name="F:Native.StockObject.DEVICE_DEFAULT_FONT">
            <summary> Device-dependent font.</summary>
        </member>
        <member name="F:Native.StockObject.DEFAULT_PALETTE">
            <summary>Default palette. This palette consists of the static colors in the system palette.</summary>
        </member>
        <member name="F:Native.StockObject.SYSTEM_FIXED_FONT">
            <summary></summary>
        </member>
        <member name="F:Native.StockObject.DEFAULT_GUI_FONT">
            <summary>
            Default font for user interface objects such as menus and dialog boxes.
            It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows.
            The default font is Tahoma.
            </summary>
        </member>
        <member name="F:Native.StockObject.DC_BRUSH">
            <summary>
            Solid color brush. The default color is white.
            The color can be changed by using the SetDCBrushColor function.
            For more information, see the Remarks section.
            </summary>
        </member>
        <member name="F:Native.StockObject.DC_PEN">
            <summary>
            Solid pen color. The default color is white.
            The color can be changed by using the SetDCPenColor function.
            For more information, see the Remarks section.
            </summary>
        </member>
        <member name="T:Native.TABLET">
            <summary>Flags for <see cref="M:WM.TABLET_QUERYSYSTEMGESTURESTATUS"/>.</summary>
            <seealso>https://msdn.microsoft.com/en-us/library/bb969148%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="T:Native.POINTER_MESSAGE_FLAG">
            <summary>Pointer message flags.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.NEW">
            <summary>New pointer.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.INRANGE">
            <summary>Pointer has not departed.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.INCONTACT">
            <summary>Pointer is in contact.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FIRSTBUTTON">
            <summary>Primary action.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.SECONDBUTTON">
            <summary>Secondary action.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.THIRDBUTTON">
            <summary>Third button</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FOURTHBUTTON">
            <summary>Fourth button</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FIFTHBUTTON">
            <summary>Fifth button.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.PRIMARY">
            <summary>Pointer is primary.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.CONFIDENCE">
            <summary>Pointer is considered unlikely to be accidental.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.CANCELED">
            <summary>Pointer is departing in an abnormal manner.</summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES">
            <summary>
            If this value is used, and the executable module is a DLL, the system does not call DllMain for process and thread initialization and termination. Also, the system does not load additional executable modules that are referenced by the specified module.
            Note Do not use this value; it is provided only for backward compatibility. If you are planning to access only data or resources in the DLL, use LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_IMAGE_RESOURCE or both. Otherwise, load the library as a DLL or executable module using the LoadLibrary function.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_IGNORE_CODE_AUTHZ_LEVEL">
            <summary>
            If this value is used, the system does not check AppLocker rules or apply Software Restriction Policies for the DLL. This action applies only to the DLL being loaded and not to its dependencies. This value is recommended for use in setup programs that must run extracted DLLs during installation.
            Windows Server 2008 R2 and Windows 7:  On systems with KB2532445 installed, the caller must be running as "LocalSystem" or "TrustedInstaller"; otherwise the system ignores this flag.For more information, see "You can circumvent AppLocker rules by using an Office macro on a computer that is running Windows 7 or Windows Server 2008 R2" in the Help and Support Knowledge Base at http://support.microsoft.com/kb/2532445.
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  AppLocker was introduced in Windows 7 and Windows Server 2008 R2.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE">
            <summary>
            If this value is used, the system maps the file into the calling process's virtual address space as if it were a data file. Nothing is done to execute or prepare to execute the mapped file. Therefore, you cannot call functions like GetModuleFileName, GetModuleHandle or GetProcAddress with this DLL. Using this value causes writes to read-only memory to raise an access violation. Use this flag when you want to load a DLL only to extract messages or resources from it.
            This value can be used with LOAD_LIBRARY_AS_IMAGE_RESOURCE.For more information, see Remarks.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE">
            <summary>
            Similar to LOAD_LIBRARY_AS_DATAFILE, except that the DLL file is opened with exclusive write access for the calling process.Other processes cannot open the DLL file for write access while it is in use.However, the DLL can still be opened by other processes.
            This value can be used with LOAD_LIBRARY_AS_IMAGE_RESOURCE.For more information, see Remarks.
            Windows Server 2003 and Windows XP:  This value is not supported until Windows Vista.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_AS_IMAGE_RESOURCE">
            <summary>
            If this value is used, the system maps the file into the process's virtual address space as an image file. However, the loader does not load the static imports or perform the other usual initialization steps. Use this flag when you want to load a DLL only to extract messages or resources from it.
            Unless the application depends on the file having the in-memory layout of an image, this value should be used with either LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_DATAFILE.For more information, see the Remarks section.
            Windows Server 2003 and Windows XP:  This value is not supported until Windows Vista.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_APPLICATION_DIR">
            <summary>
            If this value is used, the application's installation directory is searched for the DLL and its dependencies. Directories in the standard search path are not searched. This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS">
            <summary>
            This value is a combination of LOAD_LIBRARY_SEARCH_APPLICATION_DIR, LOAD_LIBRARY_SEARCH_SYSTEM32, and LOAD_LIBRARY_SEARCH_USER_DIRS. Directories in the standard search path are not searched.This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            This value represents the recommended maximum number of directories an application should include in its DLL search path.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR">
            <summary>
            If this value is used, the directory that contains the DLL is temporarily added to the beginning of the list of directories that are searched for the DLL's dependencies. Directories in the standard search path are not searched.
            The lpFileName parameter must specify a fully qualified path.This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            For example, if Lib2.dll is a dependency of C:\Dir1\Lib1.dll, loading Lib1.dll with this value causes the system to search for Lib2.dll only in C:\Dir1.To search for Lib2.dll in C:\Dir1 and all of the directories in the DLL search path, combine this value with LOAD_LIBRARY_DEFAULT_DIRS.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_SYSTEM32">
            <summary>
            If this value is used, %windows%\system32 is searched for the DLL and its dependencies.Directories in the standard search path are not searched.This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_USER_DIRS">
            <summary>
            If this value is used, directories added using the AddDllDirectory or the SetDllDirectory function are searched for the DLL and its dependencies.If more than one directory has been added, the order in which the directories are searched is unspecified.Directories in the standard search path are not searched.This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH">
            <summary>
            If this value is used and lpFileName specifies an absolute path, the system uses the alternate file search strategy discussed in the Remarks section to find associated executable modules that the specified module causes to be loaded. If this value is used and lpFileName specifies a relative path, the behavior is undefined.
            If this value is not used, or if lpFileName does not specify a path, the system uses the standard search strategy discussed in the Remarks section to find associated executable modules that the specified module causes to be loaded.
            This value cannot be combined with any LOAD_LIBRARY_SEARCH flag.
            </summary>
        </member>
        <member name="T:Native.SEM">
            <summary>Flags for <see cref="M:Native.Kernel32.SetErrorMode(Native.SEM)"/>.</summary>
        </member>
        <member name="F:Native.SEM.Default">
            <summary>Use the system default, which is to display all error dialog boxes.</summary>
        </member>
        <member name="F:Native.SEM.FAILCRITICALERRORS">
            <summary>
            The system does not display the critical-error-handler message box.
            Instead, the system sends the error to the calling process.
            </summary>
            <remarks>
            Best practice is that all applications call the process-wide SetErrorMode function with a parameter of <see cref="M:SEM.FAILCRITICALERRORS"/> at startup.
            This is to prevent error mode dialogs from hanging the application.
            </remarks>
        </member>
        <member name="F:Native.SEM.NOALIGNMENTFAULTEXCEPT">
            <summary>
            The system automatically fixes memory alignment faults and makes them invisible to the application.
            It does this for the calling process and any descendant processes.
            This feature is only supported by certain processor architectures.
            After this value is set for a process, subsequent attempts to clear the value are ignored.
            </summary>
        </member>
        <member name="F:Native.SEM.NOGPFAULTERRORBOX">
            <summary>
            The system does not display the Windows Error Reporting dialog.
            </summary>
        </member>
        <member name="F:Native.SEM.NOOPENFILEERRORBOX">
            <summary>
            The system does not display a message box when it fails to find a file.
            Instead, the error is returned to the calling process.
            </summary>
        </member>
        <member name="T:Native.FILE_ATTRIBUTE">
            <summary>File attribute flags.</summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.INVALID">
            <summary>Error.</summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.ARCHIVE">
            <summary>
            A file or directory that is an archive file or directory.
            Applications typically use this attribute to mark files for backup or removal.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.COMPRESSED">
            <summary>
            A file or directory that is compressed.
            For a file, all of the data in the file is compressed.
            For a directory, compression is the default for newly created files and subdirectories.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.DEVICE">
            <summary>This value is reserved for system use.</summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.DIRECTORY">
            <summary>The handle that identifies a directory.</summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.ENCRYPTED">
            <summary>
            A file or directory that is encrypted.
            For a file, all data streams in the file are encrypted.
            For a directory, encryption is the default for newly created files and subdirectories.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.HIDDEN">
            <summary>
            The file or directory is hidden.
            It is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.INTEGRITY_STREAM">
            <summary>
            The directory or user data stream is configured with integrity (only supported on ReFS volumes).
            It is not included in an ordinary directory listing.
            The integrity setting persists with the file if it's renamed.
            If a file is copied the destination file will have integrity set if either the source
            file or destination directory have integrity set.
            </summary>
            <remarks>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista,
            Windows Server 2003, and Windows XP: This flag is not supported until Windows Server 2012.
            </remarks>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.NORMAL">
            <summary>
            A file that does not have other attributes set.
            This attribute is valid only when used alone.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.NOT_CONTENT_INDEXED">
            <summary>
            The file or directory is not to be indexed by the content indexing service.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.NO_SCRUB_DATA">
            <summary>
            The user data stream not to be read by the background data integrity scanner (AKA scrubber).
            When set on a directory it only provides inheritance. This flag is only supported on
            Storage Spaces and ReFS volumes.It is not included in an ordinary directory listing.
            </summary>
            <remarks>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista,
            Windows Server 2003, and Windows XP: This flag is not supported until Windows 8 and Windows Server 2012.
            </remarks>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.OFFLINE">
            <summary>
            The data of a file is not available immediately.
            This attribute indicates that the file data is physically moved to offline storage.
            This attribute is used by Remote Storage, which is the hierarchical storage management software.
            Applications should not arbitrarily change this attribute.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.READONLY">
            <summary>
            A file that is read-only.
            Applications can read the file, but cannot write to it or delete it.
            This attribute is not honored on directories.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.REPARSE_POINT">
            <summary>
            A file or directory that has an associated reparse point, or a file that is a symbolic link.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.SPARSE_FILE">
            <summary>A file that is a sparse file.</summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.SYSTEM">
            <summary>
            A file or directory that the operating system uses a part of, or uses exclusively.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.TEMPORARY">
            <summary>
            A file that is being used for temporary storage.
            File systems avoid writing data back to mass storage if sufficient
            cache memory is available, because typically, an application deletes a temporary
            file after the handle is closed.
            In that scenario, the system can entirely avoid writing the data.
            Otherwise, the data is written after the handle is closed.
            </summary>
        </member>
        <member name="F:Native.FILE_ATTRIBUTE.VIRTUAL">
            <summary>This value is reserved for system use.</summary>
        </member>
        <member name="T:Native.FILE_TYPE">
            <summary>File type.</summary>
        </member>
        <member name="F:Native.FILE_TYPE.CHAR">
            <summary>
            The specified file is a character file, typically an LPT device or a console.
            </summary>
        </member>
        <member name="F:Native.FILE_TYPE.DISK">
            <summary>
            The specified file is a disk file.
            </summary>
        </member>
        <member name="F:Native.FILE_TYPE.PIPE">
            <summary>
            The specified file is a socket, a named pipe, or an anonymous pipe.
            </summary>
        </member>
        <member name="F:Native.FILE_TYPE.REMOTE">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:Native.FILE_TYPE.UNKNOWN">
            <summary>
            Either the type of the specified file is unknown, or the function failed.
            </summary>
        </member>
        <member name="F:Native.BACKUP.ALTERNATE_DATA">
            <summary>
            Alternative data streams.This corresponds to the
            NTFS $DATA stream type on a named data stream.
            </summary>
        </member>
        <member name="F:Native.BACKUP.DATA">
            <summary>
            Standard data. This corresponds to the NTFS $DATA stream type on the default (unnamed) data stream.
            </summary>
        </member>
        <member name="F:Native.BACKUP.EA_DATA">
            <summary>
            Extended attribute data.
            This corresponds to the NTFS $EA stream type.
            </summary>
        </member>
        <member name="F:Native.BACKUP.LINK">
            <summary>
            Hard link information.
            This corresponds to the NTFS $FILE_NAME stream type.
            </summary>
        </member>
        <member name="F:Native.BACKUP.OBJECT_ID">
            <summary>
            Objects identifiers. This corresponds to the NTFS $OBJECT_ID stream type.
            </summary>
        </member>
        <member name="F:Native.BACKUP.PROPERTY_DATA">
            <summary>
            Property data.
            </summary>
        </member>
        <member name="F:Native.BACKUP.REPARSE_DATA">
            <summary>
            Reparse points. This corresponds to the NTFS $REPARSE_POINT stream type.
            </summary>
        </member>
        <member name="F:Native.BACKUP.SECURITY_DATA">
            <summary>
            Security descriptor data.
            </summary>
        </member>
        <member name="F:Native.BACKUP.SPARSE_BLOCK">
            <summary>
            Sparse file. This corresponds to the NTFS $DATA stream type for a sparse file.
            </summary>
        </member>
        <member name="F:Native.BACKUP.TXFS_DATA">
            <summary>
            Transactional NTFS (TxF) data stream.
            This corresponds to the NTFS $TXF_DATA stream type.
            </summary>
            <remarks>Windows Server 2003 and Windows XP:  This value is not supported.</remarks>
        </member>
        <member name="T:Native.STREAM">
            <summary>Stream attributes.</summary>
        </member>
        <member name="F:Native.STREAM.MODIFIED_WHEN_READ">
            <summary>
            Attribute set if the stream contains data that is modified when read. Allows the backup application to know that verification of data will fail.
            </summary>
        </member>
        <member name="F:Native.STREAM.CONTAINS_SECURITY">
            <summary>
            Stream contains security data (general attributes). Allows the stream to be ignored on cross-operations restore.
            </summary>
        </member>
        <member name="T:Native.BITMAPINFOHEADER">
            <summary>
            The BITMAPINFOHEADER structure contains information about the dimensions and color format of a DIB.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd183376.aspx</seealso>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biSize">
            <summary>The number of bytes required by the structure.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biWidth">
            <summary>The width of the bitmap, in pixels.</summary>
            <remarks>
            If biCompression is BI_JPEG or BI_PNG, the biWidth member specifies the width of the
            decompressed JPEG or PNG image file, respectively.
            </remarks>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biHeight">
            <summary>
            The height of the bitmap, in pixels.
            If biHeight is positive, the bitmap is a bottom-up DIB and its origin is the lower-left corner.
            If biHeight is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            </summary>
            <remarks>
            If biHeight is negative, indicating a top-down DIB, biCompression must be either BI_RGB or BI_BITFIELDS. Top-down DIBs cannot be compressed.
             If biCompression is BI_JPEG or BI_PNG, the biHeight member specifies the height of the decompressed JPEG or PNG image file, respectively.
            </remarks>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biPlanes">
            <summary>The number of planes for the target device. This value must be set to 1.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biBitCount">
            <summary>
            The number of bits-per-pixel. The biBitCount member of the BITMAPINFOHEADER structure determines the number of bits
            that define each pixel and the maximum number of colors in the bitmap. This member must be one of the following values:
            0, 1, 4, 8, 16, 24, 32
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biCompression">
            <summary>
            The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biSizeImage">
            <summary>
            The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. An application
            can use this value to select a bitmap from a resource group that best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>The vertical resolution, in pixels-per-meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biClrUsed">
            <summary>
            The number of color indexes in the color table that are actually used by the bitmap.
            If this value is zero, the bitmap uses the maximum number of colors corresponding to the value
            of the biBitCount member for the compression mode specified by biCompression.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biClrImportant">
            <summary>
            The number of color indexes that are required for displaying the bitmap. If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="M:Native.BITMAPINFOHEADER.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.BITMAPINFOHEADER"/>.</summary>
            <param name="binaryReader">Reader to read from.</param>
        </member>
        <member name="M:Native.BITMAPINFOHEADER.Write(System.IO.BinaryWriter)">
            <summary>Writes this <see cref="T:Native.BITMAPINFOHEADER"/> to a stream.</summary>
            <param name="binaryWriter">Writer to write to.</param>
        </member>
        <member name="T:Native.BITMAPFILEHEADER">
            <summary>
            The BITMAPFILEHEADER structure contains information about the type, size, and layout of a file that contains a DIB.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd183374.aspx</seealso>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.BMP_MAGIC_COOKIE">
            <summary>"BM".</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfType">
            <summary>The file type; must be <see cref="F:Native.BITMAPFILEHEADER.BMP_MAGIC_COOKIE"/>.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfSize">
            <summary>The size, in bytes, of the bitmap file.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfReserved1">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfReserved2">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfOffBits">
            <summary>
            The offset, in bytes, from the beginning of the BITMAPFILEHEADER structure to the bitmap bits.
            </summary>
        </member>
        <member name="M:Native.BITMAPFILEHEADER.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.BITMAPFILEHEADER"/>.</summary>
            <param name="binaryReader">Reader to read from.</param>
        </member>
        <member name="M:Native.BITMAPFILEHEADER.Write(System.IO.BinaryWriter)">
            <summary>Writes this <see cref="T:Native.BITMAPFILEHEADER"/> to a stream.</summary>
            <param name="binaryWriter">Writer to write to.</param>
        </member>
        <member name="T:Native.RGBQUAD">
            <summary>
            The RGBQUAD structure describes a color consisting of relative intensities of red, green, and blue.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/vstudio/dd162938.aspx</seealso>
        </member>
        <member name="F:Native.RGBQUAD.rgbBlue">
            <summary>The intensity of blue in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbGreen">
            <summary>The intensity of green in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbRed">
            <summary>The intensity of red in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbReserved">
            <summary>This member is reserved and must be zero.</summary>
        </member>
        <member name="M:Native.RGBQUAD.#ctor(System.IO.Stream)">
            <summary>Creates <see cref="T:Native.RGBQUAD"/>.</summary>
            <param name="stream">Stream to read from.</param>
        </member>
        <member name="M:Native.RGBQUAD.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.RGBQUAD"/>.</summary>
            <param name="br">Reader to read from.</param>
        </member>
        <member name="T:Native.BLENDFUNCTION">
            <summary>
            The <see cref="T:Native.BLENDFUNCTION"/> structure controls blending by specifying the blending
            functions for source and destination bitmaps.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.BlendOp">
            <summary>
            The source blend operation. Currently, the only source and destination
            blend operation that has been defined is AC_SRC_OVER.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.BlendFlags">
            <summary>Must be zero.</summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.SourceConstantAlpha">
            <summary>
            Specifies an alpha transparency value to be used on the entire source bitmap.
            The SourceConstantAlpha value is combined with any per-pixel alpha values in the source bitmap.
            If you set SourceConstantAlpha to 0, it is assumed that your image is transparent.
            Set the SourceConstantAlpha value to 255 (opaque) when you only want to use per-pixel alpha values.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.AlphaFormat">
            <summary>
            This member controls the way the source and destination bitmaps are interpreted.
            </summary>
        </member>
        <member name="T:Native.POINT">
            <summary>The POINT structure defines the x- and y- coordinates of a point.</summary>
        </member>
        <member name="F:Native.POINT.X">
            <summary>The x-coordinate of the point.</summary>
        </member>
        <member name="F:Native.POINT.Y">
            <summary>The y-coordinate of the point.</summary>
        </member>
        <member name="M:Native.POINT.#ctor(System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.POINT"/>.</summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
        </member>
        <member name="T:Native.SIZE">
            <summary>The SIZE structure specifies the width and height of a rectangle.</summary>
        </member>
        <member name="F:Native.SIZE.Width">
            <summary>Specifies the rectangle's width. The units depend on which function uses this.</summary>
        </member>
        <member name="F:Native.SIZE.Height">
            <summary>Specifies the rectangle's height. The units depend on which function uses this.</summary>
        </member>
        <member name="M:Native.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.SIZE"/> struct.</summary>
            <param name="width">Specifies the rectangle's width.</param>
            <param name="height">Specifies the rectangle's height.</param>
        </member>
        <member name="T:Native.RECT">
            <summary>The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Left">
            <summary>The x-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Top">
            <summary>The y-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Right">
            <summary>The x-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Bottom">
            <summary>The y-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="M:Native.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.RECT"/>.</summary>
            <param name="left">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the rectangle.</param>
        </member>
        <member name="T:Native.PAINTSTRUCT">
            <summary>
            The PAINTSTRUCT structure contains information for an application.
            This information can be used to paint the client area of a window owned by that application.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.hdc">
            <summary>A handle to the display DC to be used for painting.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fErase">
            <summary>
            Indicates whether the background must be erased.
            This value is nonzero if the application should erase the background.
            The application is responsible for erasing the background if a window class is created without a background brush.
            For more information, see the description of the hbrBackground member of the WNDCLASS structure.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.rcPaint">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the upper left and lower right corners of the rectangle in
            which the painting is requested, in device units relative to the upper-left corner of the client area.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fRestore">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fIncUpdate">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved1">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved2">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved3">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved4">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved5">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved6">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved7">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved8">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="T:Native.WINDOWPOS">
            <summary>Contains information about the size and position of a window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.hwnd">
            <summary>A handle to the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.hwndInsertAfter">
            <summary>
            The position of the window in Z order (front-to-back position).
            This member can be a handle to the window behind which this window is placed,
            or can be one of the special values listed with the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WINDOWPOS.x">
            <summary>The position of the left edge of the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.y">
            <summary>The position of the top edge of the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.cx">
            <summary>The window width, in pixels.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.cy">
            <summary>The window height, in pixels.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.flags">
            <summary>
            The window position. This member can be one or more of the following values:
            <see cref="M:SWP.DRAWFRAME"/>
            <see cref="M:SWP.FRAMECHANGED"/>
            <see cref="M:SWP.HIDEWINDOW"/>
            <see cref="M:SWP.NOACTIVATE"/>
            <see cref="M:SWP.NOCOPYBITS"/>
            <see cref="M:SWP.NOMOVE"/>
            <see cref="M:SWP.NOOWNERZORDER"/>
            <see cref="M:SWP.NOREDRAW"/>
            <see cref="M:SWP.NOREPOSITION"/>
            <see cref="M:SWP.NOSENDCHANGING"/>
            <see cref="M:SWP.NOSIZE"/>
            <see cref="M:SWP.NOZORDER"/>
            <see cref="M:SWP.SHOWWINDOW"/>
            </summary>
        </member>
        <member name="T:Native.DWM_BLURBEHIND">
            <summary>
            Specifies Desktop Window Manager (DWM) blur-behind properties.
            Used by the <see cref="M:Dwmapi.DwmEnableBlurBehindWindow"/> function.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.dwFlags">
            <summary>
            A bitwise combination of <see cref="T:DWM_BB"/> constant values that indicates
            which of the members of this structure have been set.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.fEnable">
            <summary>
            <c>true</c> to register the window handle to DWM blur behind;
            <c>false</c> to unregister the window handle from DWM blur behind.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.hRgnBlur">
            <summary>
            The region within the client area where the blur behind will be applied.
            A <c>IntPtr.Zero</c> value will apply the blur behind the entire client area.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.fTransitionOnMaximized">
            <summary>
            <c>true</c> if the window's colorization should transition to match the maximized windows;
            otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="T:Native.FLASHWINFO">
            <summary>Contains the flash status for a window and the number of times the system should flash the window.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.hwnd">
            <summary>A handle to the window to be flashed. The window can be either opened or minimized.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.dwFlags">
            <summary>The flash status.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.uCount">
            <summary>The number of times to flash the window.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.dwTimeout">
            <summary>
            The rate at which the window is to be flashed, in milliseconds.
            If dwTimeout is zero, the function uses the default cursor blink rate.</summary>
        </member>
        <member name="T:Native.MINMAXINFO">
            <summary>
            Contains information about a window's maximized size and position 
            and its minimum and maximum tracking size.
            </summary>
            <remarks>
            For systems with multiple monitors, the ptMaxSize and ptMaxPosition members describe the maximized size
            and position of the window on the primary monitor, even if the window ultimately maximizes onto a secondary monitor.
            In that case, the window manager adjusts these values to compensate for differences between the primary monitor and the
            monitor that displays the window. Thus, if the user leaves ptMaxSize untouched, a window on a monitor larger than the
            primary monitor maximizes to the size of the larger monitor.
            </remarks>
        </member>
        <member name="F:Native.MINMAXINFO.ptReserved">
            <summary>Reserved; do not use.</summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxSize">
            <summary>
            The maximized width (x member) and the maximized height (y member) of the window.
            For top-level windows, this value is based on the width of the primary monitor.
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxPosition">
            <summary>
            The position of the left side of the maximized window (x member) and the position
            of the top of the maximized window (y member). For top-level windows, this value
            is based on the position of the primary monitor.
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMinTrackSize">
            <summary>
            The minimum tracking width (x member) and the minimum tracking height (y member) of the window.
            This value can be obtained programmatically from the system metrics SM_CXMINTRACK and SM_CYMINTRACK (see the GetSystemMetrics function).
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxTrackSize">
            <summary>
            The maximum tracking width (x member) and the maximum tracking height (y member) of the window.
            This value is based on the size of the virtual screen and can be obtained programmatically from the system metrics SM_CXMAXTRACK and SM_CYMAXTRACK (see the GetSystemMetrics function).
            </summary>
        </member>
        <member name="T:Native.MONITORINFO">
            <summary>Contains information about a display monitor.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd145065%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="F:Native.MONITORINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Native.MONITORINFO.rcMonitor">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the display monitor rectangle, expressed in
            virtual-screen coordinates. Note that if the monitor is not the primary display monitor,
            some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:Native.MONITORINFO.rcWork">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the work area rectangle of the display monitor,
            expressed in virtual-screen coordinates. Note that if the monitor is not the primary display
            monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:Native.MONITORINFO.dwFlags">
            <summary>
            A set of flags that represent attributes of the display monitor.
            </summary>
        </member>
        <member name="T:Native.WIN32_STREAM_ID">
            <summary>Contains stream data.</summary>
        </member>
        <member name="F:Native.WIN32_STREAM_ID.dwStreamId">
            <summary>Type of data.</summary>
        </member>
        <member name="F:Native.WIN32_STREAM_ID.dwStreamAttributes">
            <summary>Attributes of data to facilitate cross-operating system transfer.</summary>
        </member>
        <member name="F:Native.WIN32_STREAM_ID.Size">
            <summary>Size of data, in bytes.</summary>
        </member>
        <member name="F:Native.WIN32_STREAM_ID.dwStreamNameSize">
            <summary>Length of the name of the alternative data stream, in bytes.</summary>
        </member>
    </members>
</doc>
