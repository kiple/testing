<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mallenom.imaging</name>
    </assembly>
    <members>
        <member name="T:Mallenom.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Mallenom.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Mallenom.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements
            </summary>
        </member>
        <member name="T:Mallenom.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements
            </summary>
        </member>
        <member name="T:Mallenom.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Mallenom.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Mallenom.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:Mallenom.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Mallenom.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Mallenom.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Mallenom.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Mallenom.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Mallenom.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Mallenom.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Mallenom.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Mallenom.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:Mallenom.MeansImplicitUseAttribute"/> or <see cref="T:Mallenom.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Mallenom.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Mallenom.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Mallenom.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Mallenom.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~)
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Mallenom.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection
            </summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection</summary>
        </member>
        <member name="T:Mallenom.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:Mallenom.AssertionConditionAttribute"/> attribute
            </summary>
        </member>
        <member name="T:Mallenom.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:Mallenom.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:Mallenom.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value</summary>
        </member>
        <member name="T:Mallenom.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:Mallenom.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:Mallenom.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:Mallenom.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:Mallenom.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be
            treated as <c>ItemsControl</c>-derived type, to enable inner  items <c>DataContext</c>
            type resolve.
            </summary>
        </member>
        <member name="T:Mallenom.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Mallenom.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:Mallenom.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:Mallenom.Assert">
            <summary>A static class for verifying assumptions.</summary>
        </member>
        <member name="T:Mallenom.Assert.EvaluateFunction">
            <summary>A function signature for Assert.Evaluate.</summary>
        </member>
        <member name="T:Mallenom.Assert.ImplicationFunction">
            <summary>A function signature for Assert.Implies.</summary>
            <returns>Returns the truth of a predicate.</returns>
        </member>
        <member name="M:Mallenom.Assert.Evaluate(Mallenom.Assert.EvaluateFunction)">
            <summary>
            Executes the specified argument.
            </summary>
            <param name="argument">The function to execute.</param>
        </member>
        <member name="M:Mallenom.Assert.AreEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are equal.  The assertion fails if they are not.
            </summary>
            <typeparam name="T">The generic type to compare for equality.</typeparam>
            <param name="expected">The first generic type data to compare.  This is is the expected value.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are not equal.  The assertion fails if they are.
            </summary>
            <typeparam name="T">The generic type to compare for inequality.</typeparam>
            <param name="notExpected">The first generic type data to compare.  This is is the value that's not expected.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Implies(System.Boolean,System.Boolean)">
            <summary>
            Verifies that if the specified condition is true, then so is the result.
            The assertion fails if the condition is true but the result is false.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="result">
            A second Boolean statement.  If the first was true then so must this be.
            If the first statement was false then the value of this is ignored.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Implies(System.Boolean,Mallenom.Assert.ImplicationFunction)">
            <summary>
            Lazy evaluation overload.  Verifies that if a condition is true, then so is a secondary value.
            </summary>
            <param name="condition">The conditional value.</param>
            <param name="result">A function to be evaluated for truth if the condition argument is true.</param>
            <remarks>
            This overload only evaluates the result if the first condition is true.
            </remarks>
        </member>
        <member name="M:Mallenom.Assert.IsNeitherNullNorEmpty(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not empty.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Mallenom.Assert.IsNeitherNullNorWhitespace(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not purely whitespace.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Mallenom.Assert.IsNotNull``1(``0)">
            <summary>
            Verifies the specified value is not null.  The assertion fails if it is.
            </summary>
            <typeparam name="T">The generic reference type.</typeparam>
            <param name="value">The value to check for nullness.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsFalse(System.Boolean)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <param name="message">The message to display if the condition is <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsTrue(System.Boolean)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <param name="message">The message to write in case the condition is <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Fail">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Fail(System.String)">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <param name="message">The message to display if this function is executed.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsNull``1(``0)">
            <summary>
            Verifies that the specified object is null.  The assertion fails if it is not.
            </summary>
            <param name="item">The item to verify is null.</param>
        </member>
        <member name="M:Mallenom.Assert.BoundedDoubleInc(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
        </member>
        <member name="M:Mallenom.Assert.BoundedInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundExclusive">The upper bound exclusive value.</param>
        </member>
        <member name="M:Mallenom.Assert.IsApartmentState(System.Threading.ApartmentState)">
            <summary>
            Verify the current thread's apartment state is what's expected.  The assertion fails if it isn't
            </summary>
            <param name="expectedState">
            The expected apartment state for the current thread.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="T:Mallenom.Verify">
            <summary>
            A static class for retail validated assertions.
            Instead of breaking into the debugger an exception is thrown.
            </summary>
        </member>
        <member name="T:Mallenom.Verify.Argument">
            <summary>Argument verification methods.</summary>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNeitherNullNorEmpty(System.String,System.String)">
            <summary>Ensure that a string argument is neither <c>null</c> nor empty.</summary>
            <param name="value">The string to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsNeitherNullNorEmpty(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNeitherNullNorWhitespace(System.String,System.String)">
            <summary>Ensure that a string argument is neither <c>null</c> nor does it consist only of whitespace.</summary>
            <param name="value">The string to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is empty or consists of whitespace only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsNeitherNullNorWhitespace(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotDefault``1(``0,System.String)">
            <summary>Verifies that an argument is not default value.</summary>
            <typeparam name="T">Type of the object to validate. Must be a value-type.</typeparam>
            <param name="value">Value to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> equals <c>default(T)</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotDefault(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNull``1(``0,System.String)">
            <summary>Verifies that an argument is not <c>null</c>.</summary>
            <typeparam name="T">Type of the object to validate. Must be a reference-type.</typeparam>
            <param name="value">The object to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(object argument)
            {
            	Verify.Argument.IsNotNull(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNull``1(``0,System.String)">
            <summary>Verifies that an argument is <c>null</c>.</summary>
            <typeparam name="T">Type of the object to validate. Must be a reference-type.</typeparam>
            <param name="value">The object to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> != <c>null</c>.
            </exception>
            <example><code>
            void Method(object argument)
            {
            	Verify.Argument.IsNull(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.SByte,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int16,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int32,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int64,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Single,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Double,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Decimal,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.SByte,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int16,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int32,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int64,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Single,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Double,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Decimal,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.SByte,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Byte,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(byte argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int16,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int32,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int64,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Single,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Double,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Decimal,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsInRange(argument &gt; 4, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsInRange(argument &gt; 4, "argument", "Must be greater than 4.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int16,System.Int16,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int32,System.Int32,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int64,System.Int64,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that argument equals expected value. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> != <paramref name="expected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsEqualTo(10, argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Verifies that argument equals expected value. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> != <paramref name="expected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsEqualTo(10, argument, "argument", "Must be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that argument is not of unexpected value. Throws an <see cref="T:System.ArgumentException"/> if it is.
            </summary>
            <param name="notExpected">Invalid value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> == <paramref name="notExpected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotEqualTo(10, argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Verifies that argument is not of unexpected value. Throws an <see cref="T:System.ArgumentException"/> if it is.
            </summary>
            <param name="notExpected">Invalid value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> == <paramref name="notExpected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotEqualTo(10, argument, "argument", "Must not be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsTrue(argument.Length == 10, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsTrue(argument.Length == 10, "argument", "String length must be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsFalse(argument == 10, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsFalse(argument == 10, "argument", "Value must not be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.HasNoNullItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Verifies that sequence contains no <c>null</c> items.
            Throws an <see cref="T:System.ArgumentException"/> if contains.
            </summary>
            <param name="sequence">Sequence to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sequence"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sequence"/> contains <c>null</c> items.
            </exception>
            <example><code>
            void Method(object[] values)
            {
            	Verify.Argument.HasNoNullItems(values, "values");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.FileExists(System.String,System.String)">
            <summary>Verifies that argument is an existing file.</summary>
            <param name="filePath">File path.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            File does not exist or <paramref name="filePath"/> is not a valid path.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.FileExists(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.DirectoryExists(System.String,System.String)">
            <summary>Verifies that argument is an existing directory.</summary>
            <param name="directoryPath">Directory path.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="directoryPath"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Directory does not exist or <paramref name="directoryPath"/> is not a valid path.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.DirectoryExists(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsAbsoluteUri(System.Uri,System.String)">
            <summary>
            Verifies that the specified URI is absolute.
            </summary>
            <param name="uri">URI to verify.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uri"/> is relative.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.ImplementsInterface(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter implements specified interface.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="interfaceType">Interface type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> does not implement specified interface.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfExactType(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter is of specified type.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="requiredType">Expected type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfExactType``1(System.Object,System.String)">
            <summary>Verifies that parameter is of specified type.</summary>
            <typeparam name="T">Expected type.</typeparam>
            <param name="parameter">Object to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfType(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter is of specified type or type which is based on specified type.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="requiredType">Expected type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfType``1(System.Object,System.String)">
            <summary>Verifies that parameter is of specified type or type which is based on specified type.</summary>
            <typeparam name="T">Expected type.</typeparam>
            <param name="parameter">Object to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="T:Mallenom.Verify.State">
            <summary>Program, thread and object state verification methods.</summary>
        </member>
        <member name="M:Mallenom.Verify.State.IsApartmentState(System.Threading.ApartmentState,System.String)">
            <summary>Ensure that the current thread's apartment state is what's expected.</summary>
            <param name="requiredState">The required apartment state for the current thread.</param>
            <param name="message">The message string for the exception to be thrown if the state is invalid.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the calling thread's apartment state is not the same as the <paramref name="requiredState"/>.
            </exception>
            <example><code>
            void Method()
            {
            	Verify.State.IsApartmentState(ApartmentState.STA, "Must run on STA thread.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.State.IsApartmentState(System.Threading.ApartmentState)">
            <summary>Ensure that the current thread's apartment state is what's expected.</summary>
            <param name="requiredState">The required apartment state for the current thread.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the calling thread's apartment state is not the same as the <paramref name="requiredState"/>.
            </exception>
            <example><code>
            void Method()
            {
            	Verify.State.IsApartmentState(ApartmentState.STA);
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.State.IsTrue(System.Boolean)">
            <summary>
            Verifies the specified statement is <c>true</c>true. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="message">The message to include in the <see cref="T:System.InvalidOperationException"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsFalse(System.Boolean)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="message">The message to include in the <see cref="T:System.InvalidOperationException"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsNotDisposed(System.Object,System.Boolean)">
            <summary>
            Verifies the specified instance is not disposed. Throws an <see cref="T:System.ObjectDisposedException"/> if it is.
            </summary>
            <param name="instance">Object instance.</param>
            <param name="isDisposed">Instance disposed status.</param>
            <exception cref="T:System.ObjectDisposedException">
            <paramref name="isDisposed"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsNotDisposed(System.Object,System.Boolean,System.String)">
            <summary>
            Verifies the specified instance is not disposed. Throws an <see cref="T:System.ObjectDisposedException"/> if it is.
            </summary>
            <param name="instance">Object instance.</param>
            <param name="isDisposed">Instance disposed status.</param>
            <param name="message">The message to include in the <see cref="T:System.ObjectDisposedException"/>.</param>
            <exception cref="T:System.ObjectDisposedException">
            <paramref name="isDisposed"/> == <c>true</c>.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.BmpFormatWriter">
            <summary>Писатель файла в формате BMP.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatWriter.PixelsPerMeter">
            <summary>Разрешение изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatWriter.#ctor">
            <summary>Создание <see cref="T:Mallenom.Imaging.BmpFormatWriter"/>.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatWriter.GetAlignBytesCount">
            <summary>Возвращает количество байт для выравнивания каждой строки пикселей.</summary>
            <returns>Количество байт для выравнивания каждой строки пикселей.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatWriter.CreateFileHeader(System.Int32)">
            <summary>Создать заголовок файла.</summary>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
            <returns>Заголовок файла.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatWriter.CreateInfoHeader(System.Int32)">
            <summary>Создать заголовок изображения.</summary>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
            <returns>Заголовок изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatWriter.WritePalette(System.IO.Stream)">
            <summary>Записать палитру изображения, если она необходима.</summary>
            <param name="stream">Поток для записи палитры.</param>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatWriter.WriteImageData(System.IO.Stream,System.Int32)">
            <summary>Записать данные изображения.</summary>
            <param name="stream">Поток для записи.</param>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatWriter.Write(System.IO.Stream)">
            <summary>Записать изображение в поток.</summary>
            <param name="stream">Поток для записи изображения.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Запись в <paramref name="stream"/> невозможна.</exception>
        </member>
        <member name="T:Mallenom.Imaging.BaseColorConverter">
            <summary>Базовый класс для реализации конвертера формата изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.#ctor(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.BaseColorConverter"/>.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Целевой формат.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceFormat"/> == null или <paramref name="targetFormat"/> == null.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertCore(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Целевое изображение.</param>
        </member>
        <member name="P:Mallenom.Imaging.BaseColorConverter.SourceFormat">
            <summary>Исходный формат.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BaseColorConverter.TargetFormat">
            <summary>Конечный формат.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.Convert(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Данные результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно, или
            	размеры изображений, описываемых <paramref name="source"/> и <paramref name="target"/>, не совпадают.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="target">Матрица для хранения результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Матрица для хранения результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно, или
            	<paramref name="srcRect"/> выходит за пределы изображения <paramref name="source"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="target">Матрица для хранения результата.</param>
            <param name="targetX">X-координата области в матрице результата.</param>
            <param name="targetY">Y-координата области в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Матрица для хранения результата.</param>
            <param name="targetX">X-координата области в матрице результата.</param>
            <param name="targetY">Y-координата области в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения, или
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertToMatrix(Mallenom.Imaging.ImageData,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>, или
            	формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertToMatrix(Mallenom.Imaging.ImageData,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>, или
            	формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="target">Матрица с исходными данными.</param>
            <param name="source">Данные изображения-результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>, или
            	формат данных <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>, или
            	размеры изображения, описываемого <paramref name="target"/>, не совпадают с размером матрицы <paramref name="source"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Данные изображения-результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>, или
            	формат данных <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>, или
            	размеры изображения, описываемого <paramref name="target"/>, не совпадают с размером матрицы <paramref name="source"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.BaseToPackedColorConverter">
            <summary>Базовый класс для реализации to-packed конвертера формата изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.#ctor(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.BaseToPackedColorConverter"/>.</summary>
            <param name="sourceFormat">Исхоный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.ConvertCore(Mallenom.Imaging.ImageData,System.IntPtr,System.Int32)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Исхоные данные.</param>
            <param name="target">Указатель на целевое изображение.</param>
            <param name="targetStride">Смещение в байтах до следующей строки в целевом изображении.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.ConvertCore(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Целевое изображение.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.Convert(Mallenom.Imaging.ImageData,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Array,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Array,System.Int32,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetOffset">Индекс начального элемента в массиве.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.Array,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.Array,System.Int32,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetOffset">Индекс первого элемента в массиве назначения.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.BaseFromPackedColorConverter">
            <summary>Базовый класс для реализации from-packed конвертера формата изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.#ctor(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.BaseFromPackedColorConverter"/>.</summary>
            <param name="sourceFormat">Исхоный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.ConvertCore(System.IntPtr,System.Int32,Mallenom.Imaging.ImageData)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки в исходном изображении.</param>
            <param name="target">Целевое изображение.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.ConvertCore(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Целевое изображение.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.Convert(System.IntPtr,System.Int32,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Данные результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceOffset">Смещение до первого элемента в исходном массиве.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceOffset">Смещение до первого элемента в исходном массиве.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.ConvertToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseFromPackedColorConverter.ConvertToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.BasePackedToPackedColorConverter">
            <summary>Базовый класс для реализации packed-to-packed конвертера формата изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.#ctor(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.BasePackedToPackedColorConverter"/>.</summary>
            <param name="sourceFormat">Исхоный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertCore(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Указатель на исхоные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки в исходном изображении.</param>
            <param name="target">Указатель на целевое изображение.</param>
            <param name="targetStride">Смещение в байтах до следующей строки в целевом изображении.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertCore(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Целевое изображение.</param>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.Convert(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.Convert(System.Array,System.Int32,System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Массив с исходными данными.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.Convert(System.Array,System.Int32,System.Int32,System.Array,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Массив с исходными данными.</param>
            <param name="sourceOffset">Индекс первого элемента в массиве исходных данных.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetOffset">Индекс первого элемента в массиве назначения.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.Convert(System.IntPtr,System.Int32,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Данные результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceOffset">Смещение до первого элемента в исходном массиве.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceOffset">Смещение до первого элемента в исходном массиве.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.Convert(Mallenom.Imaging.ImageData,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Array,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Array,System.Int32,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetOffset">Индекс начального элемента в массиве.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.Array,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.BasePackedToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.Array,System.Int32,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetOffset">Индекс первого элемента в массиве назначения.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.UnsafeDelegatePackedToPackedColorConverter">
            <summary>Реализует <see cref="T:Mallenom.Imaging.IPackedToPackedColorConverter"/> через делегат <see cref="T:Mallenom.Imaging.UnsafePackedToPackedConversionDelegate"/>.</summary>
        </member>
        <member name="M:Mallenom.Imaging.UnsafeDelegatePackedToPackedColorConverter.#ctor(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.UnsafePackedToPackedConversionDelegate)">
            <summary>Создание <see cref="T:Mallenom.Imaging.UnsafeDelegatePackedToPackedColorConverter"/>.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
            <param name="conversionDelegate">Делегат, преобразующий данные.</param>
        </member>
        <member name="M:Mallenom.Imaging.UnsafeDelegatePackedToPackedColorConverter.ConvertCore(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Целевое изображение.</param>
        </member>
        <member name="M:Mallenom.Imaging.UnsafeDelegatePackedToPackedColorConverter.ConvertCore(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Указатель на исхоные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки в исходном изображении.</param>
            <param name="target">Указатель на целевое изображение.</param>
            <param name="targetStride">Смещение в байтах до следующей строки в целевом изображении.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.DelegatePackedToPackedColorConverter">
            <summary>Реализует <see cref="T:Mallenom.Imaging.IPackedToPackedColorConverter"/> через делегат <see cref="T:Mallenom.Imaging.PackedToPackedConversionDelegate"/>.</summary>
        </member>
        <member name="M:Mallenom.Imaging.DelegatePackedToPackedColorConverter.#ctor(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.PackedToPackedConversionDelegate)">
            <summary>Создание <see cref="T:Mallenom.Imaging.DelegatePackedToPackedColorConverter"/>.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
            <param name="conversionDelegate">Делегат, преобразующий данные.</param>
        </member>
        <member name="M:Mallenom.Imaging.DelegatePackedToPackedColorConverter.ConvertCore(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Целевое изображение.</param>
        </member>
        <member name="M:Mallenom.Imaging.DelegatePackedToPackedColorConverter.ConvertCore(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>Функция преобразования данных изображения.</summary>
            <param name="source">Указатель на исхоные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки в исходном изображении.</param>
            <param name="target">Указатель на целевое изображение.</param>
            <param name="targetStride">Смещение в байтах до следующей строки в целевом изображении.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.IColorConverter">
            <summary>Конвертор цветовых форматов.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IColorConverter.SourceFormat">
            <summary>Исходный формат.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IColorConverter.TargetFormat">
            <summary>Конечный формат.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.Convert(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Данные результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно, или
            	размеры изображений, описываемых <paramref name="source"/> и <paramref name="target"/>, не совпадают.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.ConvertMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="target">Матрица для хранения результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.ConvertMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Матрица для хранения результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно, или
            	<paramref name="srcRect"/> выходит за пределы изображения <paramref name="source"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.ConvertMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="target">Матрица для хранения результата.</param>
            <param name="targetX">X-координата области в матрице результата.</param>
            <param name="targetY">Y-координата области в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.ConvertMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Матрица для хранения результата.</param>
            <param name="targetX">X-координата области в матрице результата.</param>
            <param name="targetY">Y-координата области в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="M:IColorConverter.SourceFormat"/> и <see cref="M:IColorConverter.TargetFormat"/> соответственно.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения, или
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.ConvertToMatrix(Mallenom.Imaging.ImageData,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>, или
            	формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.ConvertToMatrix(Mallenom.Imaging.ImageData,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>, или
            	формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="target">Матрица с исходными данными.</param>
            <param name="source">Данные изображения-результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>, или
            	формат данных <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>, или
            	размеры изображения, описываемого <paramref name="target"/>, не совпадают с размером матрицы <paramref name="source"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Данные изображения-результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>, или
            	формат данных <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>, или
            	размеры изображения, описываемого <paramref name="target"/>, не совпадают с размером матрицы <paramref name="source"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.IToPackedColorConverter">
            <summary>Конвертор в packed-форматы.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IToPackedColorConverter.Convert(Mallenom.Imaging.ImageData,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Array,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Array,System.Int32,System.Int32)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetOffset">Индекс начального элемента в массиве.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.IntPtr,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.Array,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IToPackedColorConverter.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,System.Array,System.Int32,System.Int32)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetOffset">Индекс первого элемента в массиве назначения.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="M:IColorConverter.SourceFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.IFromPackedColorConverter">
            <summary>Конвертор из packed-форматов.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IFromPackedColorConverter.Convert(System.IntPtr,System.Int32,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Данные результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IFromPackedColorConverter.ConvertToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IFromPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceOffset">Смещение до первого элемента в исходном массиве.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IFromPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceOffset">Смещение до первого элемента в исходном массиве.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IFromPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IFromPackedColorConverter.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IFromPackedColorConverter.ConvertToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="M:IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.IPackedToPackedColorConverter">
            <summary>Преобразователь из packed- в packed-формат.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IPackedToPackedColorConverter.Convert(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.IPackedToPackedColorConverter.Convert(System.Array,System.Int32,System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Массив с исходными данными.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IPackedToPackedColorConverter.Convert(System.Array,System.Int32,System.Int32,System.Array,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Массив с исходными данными.</param>
            <param name="sourceOffset">Индекс первого элемента в массиве исходных данных.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Массив для хранения результата.</param>
            <param name="targetOffset">Индекс первого элемента в массиве назначения.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null, или
            	<paramref name="target"/> == null.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.UnsafePackedToPackedConversionDelegate">
            <summary>Делегат-конвертор из одного packed-формата в другой packed-формат.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.PackedToPackedConversionDelegate">
            <summary>Делегат-конвертор из одного packed-формата в другой packed-формат.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.UnsafePlanarToPackedConversionDelegate">
            <summary>Делегат-конвертор из planar-формата в packed-формат.</summary>
            <param name="sourceY">Указатель на исходные данные (плоскость Y).</param>
            <param name="sourceU">Указатель на исходные данные (плоскость U).</param>
            <param name="sourceV">Указатель на исходные данные (плоскость V).</param>
            <param name="sourceYstride">Смещение в байтах до следующей строки пикселей в исходных данных (плоскость Y).</param>
            <param name="sourceUstride">Смещение в байтах до следующей строки пикселей в исходных данных (плоскость U).</param>
            <param name="sourceVstride">Смещение в байтах до следующей строки пикселей в исходных данных (плоскость V).</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.PlanarToPackedConversionDelegate">
            <summary>Делегат-конвертор из planar-формата в packed-формат.</summary>
            <param name="sourceY">Указатель на исходные данные (плоскость Y).</param>
            <param name="sourceU">Указатель на исходные данные (плоскость U).</param>
            <param name="sourceV">Указатель на исходные данные (плоскость V).</param>
            <param name="sourceYstride">Смещение в байтах до следующей строки пикселей в исходных данных (плоскость Y).</param>
            <param name="sourceUstride">Смещение в байтах до следующей строки пикселей в исходных данных (плоскость U).</param>
            <param name="sourceVstride">Смещение в байтах до следующей строки пикселей в исходных данных (плоскость V).</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.UnsafePlanarToPlanarConversionDelegate">
            <summary>Делегат-конвертор из planar-формата в другой planar-формат.</summary>
            <param name="sourceY">Указатель на исходные данные (плоскость Y).</param>
            <param name="sourceU">Указатель на исходные данные (плоскость U).</param>
            <param name="sourceV">Указатель на исходные данные (плоскость V).</param>
            <param name="sourceYstride">Смещение в байтах до следующей строки пикселей в исходных данных (плоскость Y).</param>
            <param name="sourceUVstride">Смещение в байтах до следующей строки пикселей в исходных данных (плоскости U и V).</param>
            <param name="targetY">Указатель на область памяти для хранения результата (плоскость Y).</param>
            <param name="targetU">Указатель на область памяти для хранения результата (плоскость U).</param>
            <param name="targetV">Указатель на область памяти для хранения результата (плоскость V).</param>
            <param name="targetYStride">Смещение в байтах до следующей строки пикселей в результате (плоскость Y).</param>
            <param name="targetUVStride">Смещение в байтах до следующей строки пикселей в результате (плоскости U и V).</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.UnsafePackedToPlanarConversionDelegate">
            <summary>Делегат-конвертор из packed-формата в planar-формат.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="targetY">Указатель на область памяти для хранения результата (плоскость Y).</param>
            <param name="targetU">Указатель на область памяти для хранения результата (плоскость U).</param>
            <param name="targetV">Указатель на область памяти для хранения результата (плоскость V).</param>
            <param name="targetYStride">Смещение в байтах до следующей строки пикселей в результате (плоскость Y).</param>
            <param name="targetUVStride">Смещение в байтах до следующей строки пикселей в результате (плоскости U и V).</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.UnsafeCompressDelegate">
            <summary>Делегат-компрессор.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Данные сжатого изображения.</param>
            <param name="cparams">Параметры сжатия.</param>
        </member>
        <member name="T:Mallenom.Imaging.CompressDelegate">
            <summary>Делегат-компрессор.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Данные сжатого изображения.</param>
            <param name="cparams">Параметры сжатия.</param>
        </member>
        <member name="T:Mallenom.Imaging.ICompressor">
            <summary>Интерфейс компрессора изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.Convert(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Данные результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/> и <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/> соответственно, или
            	размеры изображений, описываемых <paramref name="source"/> и <paramref name="target"/>, не совпадают.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.ConvertMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="target">Матрица для хранения результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/> и <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/> соответственно.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.ConvertMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Матрица для хранения результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/> и <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/> соответственно, или
            	<paramref name="srcRect"/> выходит за пределы изображения <paramref name="source"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.ConvertMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="target">Матрица для хранения результата.</param>
            <param name="targetX">X-координата области в матрице результата.</param>
            <param name="targetY">Y-координата области в матрице результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/> и <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/> соответственно.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.ConvertMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать матрицу.</summary>
            <param name="source">Исходная матрица.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Матрица для хранения результата.</param>
            <param name="targetX">X-координата области в матрице результата.</param>
            <param name="targetY">Y-координата области в матрице результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Форматы данных матриц <paramref name="source"/> и <paramref name="target"/> не равны 
            	<see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/> и <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/> соответственно.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения, или
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.ConvertToMatrix(Mallenom.Imaging.ImageData,Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/>, или
            	формат данных матрицы <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.ConvertToMatrix(Mallenom.Imaging.ImageData,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Исходные данные.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="source"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/>, или
            	формат данных матрицы <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.ImageData,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="target">Матрица с исходными данными.</param>
            <param name="source">Данные изображения-результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/>, или
            	формат данных <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>, или
            	размеры изображения, описываемого <paramref name="target"/>, не совпадают с размером матрицы <paramref name="source"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ICompressor.ConvertFromMatrix(Mallenom.Imaging.IImageMatrix,System.Drawing.Rectangle,Mallenom.Imaging.ImageData,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные части матрицы в <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.</summary>
            <param name="source">Матрица с исходными данными.</param>
            <param name="srcRect">Преобразуемая область.</param>
            <param name="target">Данные изображения-результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> == null или <paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="source"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.SourceFormat"/>, или
            	формат данных <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>, или
            	размеры изображения, описываемого <paramref name="target"/>, не совпадают с размером матрицы <paramref name="source"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="srcRect"/> выходит за пределы изображения.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.IPackedCompressor">
            <summary>Компрессор для изображений, использующих packed-формат.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IPackedCompressor.Convert(System.IntPtr,System.Int32,Mallenom.Imaging.ImageData,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Данные результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IPackedCompressor.ConvertToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IPackedCompressor.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceOffset">Смещение до первого элемента в исходном массиве.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IPackedCompressor.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceOffset">Смещение до первого элемента в исходном массиве.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IPackedCompressor.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IPackedCompressor.ConvertToMatrix(System.Array,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Массив исходных данных.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.IPackedCompressor.ConvertToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.IImageMatrix,System.Int32,System.Int32,Mallenom.Imaging.CompressionParameters)">
            <summary>Преобразовать данные в матрицу.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="target">Матрица для заполнения.</param>
            <param name="targetX">X-координата в матрице результата.</param>
            <param name="targetY">Y-координата в матрице результата.</param>
            <param name="cparams">Параметры компрессии.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="target"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Формат данных матрицы <paramref name="target"/> не равен <see cref="P:Mallenom.Imaging.IColorConverter.TargetFormat"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="targetX"/>/<paramref name="targetY"/> выходят за пределы изображения <paramref name="target"/>.
            </exception>
        </member>
        <member name="T:Mallenom.Imaging.PixelColorUtils">
            <summary>Преобразование цвета пикселя.</summary>
        </member>
        <member name="M:Mallenom.Imaging.PixelColorUtils.RGB24toY8(System.Byte,System.Byte,System.Byte)">
            <summary>Преобразует пиксель RGB24 в Y8.</summary>
            <param name="r">Красный.</param>
            <param name="g">Зеленый.</param>
            <param name="b">Синий.</param>
            <returns>Яркость пикселя.</returns>
        </member>
        <member name="M:Mallenom.Imaging.PixelColorUtils.RGB24toY8(System.Byte*)">
            <summary>Преобразует пиксель RGB24 в Y8.</summary>
            <param name="bgr">Указатель на цветной пиксель в формате BGR.</param>
            <returns>Яркость пикселя.</returns>
        </member>
        <member name="M:Mallenom.Imaging.PixelColorUtils.ClampToByteRange(System.Int32)">
            <summary>Ограничивает значение <c>int</c> минимальным и максимальным значениями <c>byte</c>.</summary>
            <param name="value">Значение <c>int</c>.</param>
            <returns>Значение, ограниченное рамками <c>byte</c>.</returns>
        </member>
        <member name="T:Mallenom.Imaging.GdiImageMatrixRenderer">
            <summary>Отрисовывает <see cref="T:Mallenom.Imaging.IImageMatrix"/> средствами GDI.</summary>
        </member>
        <member name="T:Mallenom.Imaging.Image">
            <summary>
            Контрол для отображения объекта типа <see cref="T:Mallenom.Imaging.IImageMatrix"/>.
            </summary>
            <seealso cref="T:Mallenom.Imaging.IImageMatrix"/>
            <seealso cref="P:Mallenom.Imaging.Image.Matrix"/>
            <seealso cref="T:Mallenom.Imaging.ColorMatrix"/>
            <seealso cref="T:Mallenom.Imaging.CompressedMatrix"/>
        </member>
        <member name="E:Mallenom.Imaging.Image.FooterColorChanged">
            <summary>Значение свойства FooterColor изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnFooterColorChanged(System.EventArgs)">
            <summary>Вызывется при изменении значения свойства <see cref="M:FooterColor"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.FooterFontChanged">
            <summary>Значение свойства FooterFont изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnFooterFontChanged(System.EventArgs)">
            <summary>Вызывется при изменении значения свойства <see cref="M:FooterFont"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.FooterTextAlignChanged">
            <summary>Значение свойства FooterTextAlign изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnFooterTextAlignChanged(System.EventArgs)">
            <summary>Вызывется при изменении значения свойства <see cref="M:FooterTextAlign"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.FooterTextChanged">
            <summary>Значение свойства FooterText изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnFooterTextChanged(System.EventArgs)">
            <summary>Вызывется при изменении значения свойства <see cref="M:FooterText"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.MatrixChanging">
            <summary>К image подключается другая матрица.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnMatrixChanging(Mallenom.Imaging.MatrixEventArgs)">
            <summary>Вызывается перед изменением отображаемой матрицы.</summary>
            <param name="args">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.MatrixChanged">
            <summary>К image подключена другая матрица.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnMatrixChanged(Mallenom.Imaging.MatrixEventArgs)">
            <summary>Вызывается при изменении отображаемой матрицы.</summary>
            <param name="args">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.MatrixRectChanged">
            <summary>Значение свойства <see cref="M:MatrixRect"/> изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnMatrixRectChanged(System.EventArgs)">
            <summary>Вызывается при измнении отображаемой области матрицы.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.SizeModeChanged">
            <summary>Значение свойства SizeMode изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnSizeModeChanged(System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="M:SizeMode"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.SmoothChanged">
            <summary>Значение свойства <see cref="M:Smooth"/> изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnSmoothChanged(System.EventArgs)">
            <summary>Вызывется при изменении значения свойства <see cref="M:Smooth"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="E:Mallenom.Imaging.Image.TextAlignChanged">
            <summary>Значение свойства <see cref="M:TextAlign"/> изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnTextAlignChanged(System.EventArgs)">
            <summary>Вызывается при изменении значения свойства <see cref="M:TextAlign"/>.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="F:Mallenom.Imaging.Image.Log">
            <summary>Лог.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.CanUseD3D">
            <summary>Проверка, может ли использоваться D3D renderer.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Image._fastDraw">
            <summary>Если true, то при выводе изображений использовать не GDI+, а обычный GDI.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Image._matrixRect">
            <summary>Область изображения, которая выводится на экран.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.GetRenderer(Mallenom.Imaging.ImageRenderer)">
            <summary>Создать подходящий рендерер.</summary>
            <param name="renderer">Тип рендерера.</param>
            <returns>Созданный рендерер.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Image.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.DefaultBackColor">
            <summary>Цвет фона по умолчанию.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.DoubleBuffer">
            <summary>Использовать двойную буферизацию.</summary>
            <remark>Включение буферизации устраняет мерцание изображения, но снижает производительность.</remark>
        </member>
        <member name="P:Mallenom.Imaging.Image.DefaultMatrixType">
            <summary>Тип матрицы по умолчанию (при выполнении операций <see cref="M:Mallenom.Imaging.Image.Load(System.String)"/>, <see cref="M:Mallenom.Imaging.Image.Clear"/>).</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.Renderer">
            <summary>Рендерер изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.MatrixRect">
            <summary>Область изображения, которая выводится на экран.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.FastDraw">
            <summary>Использовать вывод через NativeGDI, а не GDI+.</summary>
            <remark>Включение FastDraw увеличивает скорость прорисовки, но снижает качество..</remark>
        </member>
        <member name="P:Mallenom.Imaging.Image.Text">
            <summary>Текст заголовка.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.ForeColor">
            <summary>Цвет символов заголовка.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.BackColor">
            <summary>Цвет фона.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.SizeMode">
            <summary>Установить и считать режим отображения матрицы.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.Matrix">
            <summary>Установить и считать объект <c>Matrix</c>.</summary>
            <remarks>Вызывается Refresh().</remarks>
        </member>
        <member name="P:Mallenom.Imaging.Image.TextAlign">
            <summary>Выравнивание заголовка.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.FooterTextAlign">
            <summary>Выравнивание футера.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.FooterText">
            <summary>Текст футера.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.FooterFont">
            <summary>Шрифт футера.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.FooterColor">
            <summary>Цвет футера.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.TextRedraw">
            <summary>Перерисовывать ли изображение после изменения текста заголова или футера.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.Smooth">
            <summary>Сглаживание изображения при масштабировании.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.ManualUpdateRendererCache">
            <summary>Управление обновлением кэша рендерера вручную.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.TabStop">
            <summary>Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.ViewRect">
            <summary>Область контрола в которую непосредственно выводиться изображение.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.CoordConverter">
            <summary>Конвертор для преобразования координатор экрана и изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.TextLabels">
            <summary>Список текстовых меток.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.Clear">
            <summary>Очистить изображение.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.Load(System.String)">
            <summary>Загружает изображение из файла.</summary>
            <param name="filename">Имя файла.</param>
        </member>
        <member name="M:Mallenom.Imaging.Image.Save(System.String)">
            <summary>Сохранение изображения в файл.</summary>
            <param name="filename">Имя файла.</param>
        </member>
        <member name="M:Mallenom.Imaging.Image.InvalidateCache">
            <summary>Перерисовать изображение с обновлением кэша из матрицы.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.SetMatrix(Mallenom.Imaging.IImageMatrix)">
            <summary>Установить содержимое матрицы без обновления компонента.</summary>
            <param name="matrix">Матрица.</param>
        </member>
        <member name="M:Mallenom.Imaging.Image._matrix_OnSizeChanged(System.Object,System.EventArgs)">
            <summary>Изменение размеров хранимого изображения.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnChangeTextLabelCollection">
            <summary></summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.DefaultFooterFont">
            <summary>Возвращает шрифт футера по умолчанию.</summary>
            <value>Шрифт футера по умолчанию.</value>
        </member>
        <member name="P:Mallenom.Imaging.Image.DefaultSize">
            <summary>Размер по умолчанию.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Image.DefaultImeMode">
            <summary></summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnCreateControl">
            <summary>Вызывается при создании контрола.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Вызывается при отрисовке контрола.</summary>
            <param name="args">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <remarks>Не должно вызываться.</remarks>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnHandleCreated(System.EventArgs)">
            <summary>Вызывается при создании хэндла контрола.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Imaging.Image.OnResize(System.EventArgs)">
            <summary>Вызывается при изменении размеров контрола.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Imaging.Image.CenterAreaLocation(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Возвращает координаты зоны указанного размера, если ее расположить
            в центре указанного прямоугольника.
            </summary>
            <param name="rectangle">Прямоугольник, в центре которого будет размещена область.</param>
            <param name="areaSize">Размеры размещаемой области.</param>
            <returns>Координаты верхнего левого угла области.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ImageMatrixNativeWindow">
            <summary>Native Win32-окно, отображающее матрицу изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrixNativeWindow.FromHandle(System.IntPtr)">
            <summary>Возвращает <see cref="T:Mallenom.Imaging.ImageMatrixNativeWindow"/> для указанного окна.</summary>
            <param name="handle">Хэндл окна, в котором будет отображаться матрица изображения.</param>
            <returns>Обертка окна для отображения в нем матрицы изображения.</returns>
        </member>
        <member name="F:Mallenom.Imaging.ImageMatrixNativeWindow._renderer">
            <summary>Отрисовщик <see cref="T:Mallenom.Imaging.IImageMatrix"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageMatrixNativeWindow._viewRect">
            <summary>Область отображения матрицы изображения.</summary>
        </member>
        <member name="E:Mallenom.Imaging.ImageMatrixNativeWindow.Destroyed">
            <summary>Окно уничтожено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrixNativeWindow.OnDestroyed(System.EventArgs)">
            <summary>Вызывается при уничтожении окна.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrixNativeWindow.#ctor">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageMatrixNativeWindow"/>.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageMatrixNativeWindow.Smooth">
            <summary>Возвращает и устанавливает флаг сглаживания изображения.</summary>
            <value><c>true</c> - изображение сглаживается, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Imaging.ImageMatrixNativeWindow.ImageMatrix">
            <summary>Возвращает и устанавливает отображаемую матрицу.</summary>
            <value>Отображаемая матрица.</value>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrixNativeWindow.InvalidateCache">
            <summary>Обновить кэш изображения.</summary>
            <remarks>
            Необходимо вызывать после изменения содержимого матрицы.
            Также вызывает перерисовку окна.
            </remarks>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrixNativeWindow.Invalidate">
            <summary>Перерисовать окно.</summary>
            <remarks>Не обновляет кэш изображения.</remarks>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrixNativeWindow.OnHandleChange">
            <summary>Вызывается при изменении хэндла окна.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrixNativeWindow.OnPaint(System.IntPtr)">
            <summary>Вызывается при отрисовке окна.</summary>
            <param name="hDC">Контекст графического устройства.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrixNativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>Оконнац процедура.</summary>
            <param name="m">Сообщение Windows.</param>
        </member>
        <member name="T:Mallenom.Imaging.ImageRendererCacheUpdateMode">
            <summary>Режим обновляения кэша отрисовщика изображений.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageRendererCacheUpdateMode.Immediate">
            <summary>Немедленное обновление кэша.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageRendererCacheUpdateMode.Lazy">
            <summary>Обновление кэша при запросе отрисовки.</summary>
        </member>
        <member name="T:Mallenom.Imaging.ImagingUtility">
            <summary>Вспомогательные методы.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImagingUtility.GetAlignBytesCount(System.Int32,System.Int16)">
            <summary>Возвращает количество байт в строке пикселей, используемых для выравнивания.</summary>
            <param name="width">Ширина изображения.</param>
            <param name="bitCount">Бит на пиксель.</param>
            <returns>Количество байт в строке пикселей, используемых для выравнивания.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImagingUtility.CompareArrays``1(``0[],``0[])">
            <summary>Сравнить содержимое двух массивов.</summary>
            <param name="arr1">Массив 1.</param>
            <param name="arr2">Массив 2.</param>
            <returns>true, если содержимое массивов идентично.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ColorMatrixBmpWriter">
            <summary>Писатель файла в формате BMP из <see cref="T:Mallenom.Imaging.ColorMatrix"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorMatrixBmpWriter._matrix">
            <summary>Записываемая матрица.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpWriter.#ctor(Mallenom.Imaging.ColorMatrix)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ColorMatrixBmpWriter"/>.</summary>
            <param name="matrix">Записываемая матрица.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpWriter.GetAlignBytesCount">
            <summary>Возвращает количество байт для выравнивания каждой строки пикселей.</summary>
            <returns>Количество байт для выравнивания каждой строки пикселей.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpWriter.CreateFileHeader(System.Int32)">
            <summary>Создать заголовок файла.</summary>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
            <returns>Заголовок файла.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpWriter.CreateInfoHeader(System.Int32)">
            <summary>Создать заголовок изображения.</summary>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
            <returns>Заголовок изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpWriter.WriteImageData(System.IO.Stream,System.Int32)">
            <summary>Записать данные изображения.</summary>
            <param name="stream">Поток для записи.</param>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
        </member>
        <member name="T:Mallenom.Imaging.Design.ImageDesigner">
            <summary>Дизайнер для <see cref="T:Mallenom.Imaging.Image"/>.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Design.ImageDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary></summary>
            <param name="properties"></param>
        </member>
        <member name="M:Mallenom.Imaging.Design.ImageDesigner.PreFilterEvents(System.Collections.IDictionary)">
            <summary></summary>
            <param name="events"></param>
        </member>
        <member name="T:Mallenom.Imaging.BmpFormatReader`1">
            <summary>Загрузчик изображения из BMP.</summary>
            <typeparam name="TColor">Тип пикселя.</typeparam>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.R_MASK_555">
            <summary>Маска для красного цвета в формате 16bpp 5-5-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.G_MASK_555">
            <summary>Маска для зеленого цвета в формате 16bpp 5-5-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.B_MASK_555">
            <summary>Маска для синего цвета в формате 16bpp 5-5-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.R_OFFSET_555">
            <summary>Смещение в битах до красного цвета в формате 16bpp 5-5-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.G_OFFSET_555">
            <summary>Смещение в битах до зеленого цвета в формате 16bpp 5-5-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.B_OFFSET_555">
            <summary>Смещение в битах до синего цвета в формате 16bpp 5-5-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.R_MASK_565">
            <summary>Маска для красного цвета в формате 16bpp 5-6-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.G_MASK_565">
            <summary>Маска для зеленого цвета в формате 16bpp 5-6-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.B_MASK_565">
            <summary>Маска для синего цвета в формате 16bpp 5-6-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.R_OFFSET_565">
            <summary>Смещение в битах до красного цвета в формате 16bpp 5-6-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.G_OFFSET_565">
            <summary>Смещение в битах до зеленого цвета в формате 16bpp 5-6-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1.B_OFFSET_565">
            <summary>Смещение в битах до синего цвета в формате 16bpp 5-6-5.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1._width">
            <summary>Ширина изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1._height">
            <summary>Высота изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1._isUpsideDown">
            <summary>Флаг перевернутого изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BmpFormatReader`1._alignBytes">
            <summary>Количество байт, используемых для выравнивания.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.#ctor">
            <summary>Создание <see cref="T:Mallenom.Imaging.BmpFormatReader`1"/>.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BmpFormatReader`1.Width">
            <summary>Возвращает ширину изображения.</summary>
            <value>Ширина изображения.</value>
        </member>
        <member name="P:Mallenom.Imaging.BmpFormatReader`1.Height">
            <summary>Возвращает высоту изображения.</summary>
            <value>Высота изображения.</value>
        </member>
        <member name="P:Mallenom.Imaging.BmpFormatReader`1.IsUpsideDown">
            <summary>Возвращает флаг перевернутого изображения.</summary>
            <value><c>true</c>, если исходное изображение перевернуто, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Imaging.BmpFormatReader`1.AlignBytes">
            <summary>Возвращает количество байт, ичпользованных для выравнивания.</summary>
            <value>Количество байт, использованных для выравнивания.</value>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.ReadFileHeader(System.IO.BinaryReader)">
            <summary>Прочитать заголовок файла.</summary>
            <param name="br">Читатель потока.</param>
            <returns>Прочитанный заголовок файла.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.ReadInfoHeader(System.IO.BinaryReader)">
            <summary>Прочитать и проверить заголовок изображения.</summary>
            <param name="br">Читатель потока.</param>
            <returns>Прочитанный заголовок файла.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.GetPaletteRecordsCount(System.Int16,System.UInt32)">
            <summary>Возвращает количество записей в палитре.</summary>
            <param name="bitCount">Бит не пиксель.</param>
            <param name="usedColors">Значение biClrUsed из BMP-заголовка.</param>
            <returns>Количество записей в палитре.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток для загрузки.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/> не может быть прочитан.</exception>
            <exception cref="T:System.IO.InvalidDataException">Данные не соответствует спецификации формата BMP.</exception>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.SkipBytes(System.IO.Stream,System.Int32)">
            <summary>Пропустить указанное количество байт в потоке.</summary>
            <param name="stream">Поток.</param>
            <param name="bytes">Количество пропускаемых байт.</param>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.IsCompressionMethodSupported(Native.DibCompression)">
            <summary>Возвращает, поддерживается ли использованный метод компрессии.</summary>
            <param name="compression">Тип компрессии изображения.</param>
            <returns><c>true</c>, если метод поддерживается, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.LoadEmptyImage">
            <summary>Загрузить пустое изображение.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.LoadPalette(System.IO.BinaryReader,System.Int32)">
            <summary>Загружает палитру изображения.</summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/></param>
            <param name="recordsCount">Количество записей в палитре.</param>
            <returns>Палитра изображения или <c>null</c>, если палитра не требуется.</returns>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.LoadCompressed(System.IO.Stream,Native.DibCompression)">
            <summary>Загрузить сжатое изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="compression">Способ сжатия.</param>
            <exception cref="T:System.IO.InvalidDataException">Данные не соответствует спецификации формата BMP.</exception>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load1bppIndexed(System.IO.Stream,`0[])">
            <summary>Загрузить индексированное 1bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load4bppIndexed(System.IO.Stream,`0[])">
            <summary>Загрузить индексированное 4bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load8bppIndexed(System.IO.Stream,`0[])">
            <summary>Загрузить индексированное 8bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load16bpp(System.IO.Stream,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Загрузить цветное 16bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="rMask">Маска красного цвета.</param>
            <param name="gMask">Маска зеленого цвета.</param>
            <param name="bMask">Маска синего цвета.</param>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load16bpp555(System.IO.Stream)">
            <summary>Загрузить цветное 16bpp-изображение с распределением битов на компоненты 5-5-5.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load16bpp565(System.IO.Stream)">
            <summary>Загрузить цветное 16bpp-изображение с распределением битов на компоненты 5-6-5.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load24bpp(System.IO.Stream)">
            <summary>Загрузить цветное 24bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BmpFormatReader`1.Load32bpp(System.IO.Stream)">
            <summary>Загрузить цветное 32bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается загрузчиком.</exception>
        </member>
        <member name="T:Mallenom.Imaging.ColorMatrixBmpLoader">
            <summary>Загрузчик матрицы <see cref="T:Mallenom.Imaging.ColorMatrix"/> из BMP.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorMatrixBmpLoader._matrix">
            <summary>Загружаемая матрица.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.#ctor(Mallenom.Imaging.ColorMatrix)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ColorMatrixBmpLoader"/>.</summary>
            <param name="matrix">Загружаемая матрица.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.AllocateMemory">
            <summary>Выделить память под изображение.</summary>
            <returns>Массив пикселей.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.LoadPalette(System.IO.BinaryReader,System.Int32)">
            <summary>Загружает палитру изображения.</summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/></param>
            <param name="recordsCount">Количество записей в палитре.</param>
            <returns>Палитра изображения или <c>null</c>, если палитра не требуется.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.LoadEmptyImage">
            <summary>Загрузить пустое изображение.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.Load1bppIndexed(System.IO.Stream,Mallenom.Imaging.Color24[])">
            <summary>Загрузить индексированное 1bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.Load4bppIndexed(System.IO.Stream,Mallenom.Imaging.Color24[])">
            <summary>Загрузить индексированное 4bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.Load8bppIndexed(System.IO.Stream,Mallenom.Imaging.Color24[])">
            <summary>Загрузить индексированное 8bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.Load16bpp555(System.IO.Stream)">
            <summary>Загрузить цветное 16bpp-изображение с распределением битов на компоненты 5-5-5.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.Load16bpp565(System.IO.Stream)">
            <summary>Загрузить цветное 16bpp-изображение с распределением битов на компоненты 5-6-5.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.Load24bpp(System.IO.Stream)">
            <summary>Загрузить цветное 24bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrixBmpLoader.Load32bpp(System.IO.Stream)">
            <summary>Загрузить цветное 32bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.MatrixBmpWriter">
            <summary>Писатель файла в формате BMP из <see cref="T:Mallenom.Imaging.Matrix"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixBmpWriter._matrix">
            <summary>Записываемая матрица.</summary>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpWriter.#ctor(Mallenom.Imaging.Matrix)">
            <summary>Создание <see cref="T:Mallenom.Imaging.MatrixBmpWriter"/>.</summary>
            <param name="matrix">Записываемая матрица.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpWriter.GetAlignBytesCount">
            <summary>Возвращает количество байт для выравнивания каждой строки пикселей.</summary>
            <returns>Количество байт для выравнивания каждой строки пикселей.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpWriter.CreateFileHeader(System.Int32)">
            <summary>Создать заголовок файла.</summary>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
            <returns>Заголовок файла.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpWriter.CreateInfoHeader(System.Int32)">
            <summary>Создать заголовок изображения.</summary>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
            <returns>Заголовок изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpWriter.WritePalette(System.IO.Stream)">
            <summary>Записать палитру изображения, если она необходима.</summary>
            <param name="stream">Поток для записи палитры.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpWriter.WriteImageData(System.IO.Stream,System.Int32)">
            <summary>Записать данные изображения.</summary>
            <param name="stream">Поток для записи.</param>
            <param name="alignBytes">Количество байт для выравнивания каждой строки пикселей.</param>
        </member>
        <member name="T:Mallenom.Imaging.MatrixY16">
            <summary>Контейнер для хранения двумерного массива полутоновых с глубиной 16 бит пикселей.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixY16.MinValue">
            <summary>Минимальное значение, которое может быть помещено в <see cref="T:Mallenom.Imaging.MatrixY16"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixY16.MaxValue">
            <summary>Максимальное значение, которое может быть помещено в <see cref="T:Mallenom.Imaging.MatrixY16"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixY16._palette">
            <summary>Палитра.</summary>
        </member>
        <member name="P:Mallenom.Imaging.MatrixY16.ImageDataFormat">
            <summary>Формат данных, используемый данной матрицей для хранения изображения.</summary>
            <value><see cref="M:ImageDataFormat.Y16"/>.</value>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.LoadFrom(System.String)">
            <summary>Загрузить изображение из файла.</summary>
            <param name="fileName">Имя файла.</param>
            <returns>Матрица с изображением из файла.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.LoadFrom(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток.</param>
            <returns>Матрица с изображением из потока.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.LoadFrom(System.Drawing.Bitmap)">
            <summary>Загрузить изображение из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <returns>Загруженная матрица.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.#ctor">
            <summary>Создание матрицы размером 0x0.</summary>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.#ctor(System.Int32,System.Int32)">
            <summary>Создание матрицы указанного размера.</summary>
            <param name="width">Ширина матрицы.</param>
            <param name="height">Высота матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.#ctor(Mallenom.Imaging.ImageData)">
            <summary>Создание <see cref="T:Mallenom.Imaging.Matrix"/>.</summary>
            <param name="imageData">Данные изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.#ctor(System.Int32,System.Int32,System.UInt16[])">
            <summary>Создание матрицы указанного размера и заполнение ее указанными данными.</summary>
            <param name="width">Ширина матрицы.</param>
            <param name="height">Высота матрицы.</param>
            <param name="data">Данные для заполнения матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="bitmap"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.#ctor(System.Drawing.Bitmap)">
            <summary></summary>
            <param name="bitmap"></param>
        </member>
        <member name="P:Mallenom.Imaging.MatrixY16.DataFormat">
            <summary>Формат данных, используемый данной матрицей для хранения изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.MatrixY16.Stride">
            <summary>Смещение до следующей строки пикселей в байтах.</summary>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.Load(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Загрузить изображение из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <param name="rect">Регион битмапа.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.Load(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток для загрузки.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="imageFormat">Формат изображения.</param>
            <exception cref="T:System.InvalidOperationException">Матрица пуста.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.FillBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Заполнить битмап данными матрицы.</summary>
            <param name="bitmap">Заполняемый битмап.</param>
            <param name="srcRect">Копируемый участок.</param>
            <returns>true, если битмап был заполнен.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.CreatePalette">
            <summary>Создает и возвращает палитру.</summary>
            <returns>Палитра.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.Clone(System.Drawing.Rectangle)">
            <summary>Создание нового объекта, который является копией указанной области текущего.</summary>
            <param name="rect">Область копирования.</param>
            <returns>Новый объект, являющийся копией текущего.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Генерируется, если границы области выходят за пределы исходной матрицы.</exception>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.CreateObjectCore">
            <summary>Создание матрицы правильного типа и размера для последующего клонирования в него текущего.</summary>
            <returns>Созданный объект.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixY16.Clone">
            <summary>Создание нового объекта, который является копией текущего.</summary>
            <returns>Новый объект, являющийся копией текущего.</returns>
            <remarks>Создание "глубокой" копии.</remarks>
        </member>
        <member name="T:Mallenom.Imaging.ArrayImageData">
            <summary>Данные изображения в байтовом массиве.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ArrayImageData.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
            <param name="data">Массив данных изображения.</param>
            <param name="offset">Смещение в массиве до начала данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="stride">Смещение в байтах до следующей строки изображения.</param>
            <param name="format">Формат данных.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width"/> или <paramref name="height"/> меньше 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="width"/> и <paramref name="height"/> оба должны быть равны 0 или не равны 0.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ArrayImageData.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
            <param name="data">Массив данных изображения.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="stride">Смещение в байтах до следующей строки изображения.</param>
            <param name="format">Формат данных.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width"/> или <paramref name="height"/> меньше 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="width"/> и <paramref name="height"/> оба должны быть равны 0 или не равны 0.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ArrayImageData.#ctor(System.Byte[],System.Int32,System.Drawing.Size,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
            <param name="data">Массив данных изображения.</param>
            <param name="offset">Смещение в массиве до начала данных.</param>
            <param name="size">Размер изображения.</param>
            <param name="stride">Смещение в байтах до следующей строки изображения.</param>
            <param name="format">Формат данных.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> меньше 0.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ArrayImageData.#ctor(System.Byte[],System.Drawing.Size,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
            <param name="data">Массив данных изображения.</param>
            <param name="size">Размер изображения.</param>
            <param name="stride">Смещение в байтах до следующей строки изображения.</param>
            <param name="format">Формат данных.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> меньше 0.</exception>
        </member>
        <member name="P:Mallenom.Imaging.ArrayImageData.Data">
            <summary>Массив данных изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ArrayImageData.Offset">
            <summary>Смещение в массиве данных.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ArrayImageData.UpdateArrayRef(System.Byte[],System.Int32)">
            <summary>Обновить указатель на данные.</summary>
            <param name="data">Массив данных.</param>
            <param name="offset">Смещение в массиве.</param>
        </member>
        <member name="M:Mallenom.Imaging.ArrayImageData.Allocate(System.Int32)">
            <summary>Выделить память под изображение.</summary>
            <param name="size">Объем необходимой памяти в байтах.</param>
        </member>
        <member name="M:Mallenom.Imaging.ArrayImageData.Dispose(System.Boolean)">
            <summary>Release resources used by this <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
            <param name="disposing">true to release managed resources.</param>
        </member>
        <member name="T:Mallenom.Imaging.CompressedImageData">
            <summary>Данные сжатого изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.CompressedImageData.#ctor(System.Int32,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedImageData"/>.</summary>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="format">Формат изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedImageData.#ctor(System.Byte[],System.Int32,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedImageData"/>.</summary>
            <param name="data">Массив данных сжатого изображения.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="format">Формат изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedImageData.#ctor(System.Byte[],System.Drawing.Size,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedImageData"/>.</summary>
            <param name="data">Массив данных сжатого изображения.</param>
            <param name="size">Размеры изображения.</param>
            <param name="format">Формат изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedImageData.Alloc(System.Int32)">
            <summary>Выделить память под изображение.</summary>
            <param name="size">Объем необходимой памяти в байтах.</param>
        </member>
        <member name="T:Mallenom.Imaging.CompressedImageServices">
            <summary>Сервисы форматов сжатых изображений.</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedImageServices._services">
            <summary>Словарь сервисоа форматов.</summary>
        </member>
        <member name="M:Mallenom.Imaging.CompressedImageServices.#cctor">
            <summary>Инициализация типа <see cref="T:Mallenom.Imaging.CompressedImageServices"/>.</summary>
        </member>
        <member name="M:Mallenom.Imaging.CompressedImageServices.RegisterService(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ICompressedFormatService)">
            <summary>Зарегистрировать сервис сжатого изображения.</summary>
            <param name="dataFormat">Формат сжатого изображения.</param>
            <param name="service">Сервис формата изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedImageServices.GetService(Mallenom.Imaging.ImageDataFormat)">
            <summary>Возвращает сервис для указанного формата.</summary>
            <param name="dataFormat">Формат сжатого изображения.</param>
            <returns>Сервис формата изображения или <c>null</c>, если формат не зарегистрирован.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedImageServices.FindFormatByFileExtension(System.String,Mallenom.Imaging.ICompressedFormatService@)">
            <summary>Подбирает формат сжатия по расширению.</summary>
            <param name="fileExtension">Расширение файла.</param>
            <param name="service">Сервис поддержки сжатого формата.</param>
            <returns>Формат сжатия, или <c>null</c>.</returns>
        </member>
        <member name="T:Mallenom.Imaging.CompressedMatrix">
            <summary>Матрица, хранящая сжатое изображение.</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedMatrix._width">
            <summary>Ширина изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedMatrix._height">
            <summary>Высота изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedMatrix._isEmpty">
            <summary>Флаг пустой матрицы.</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedMatrix._data">
            <summary>Массив сжатого изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedMatrix._defaultImageFormat">
            <summary>Формат для сохранения изображения методами Save() по умолчанию.</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedMatrix._imageFormat">
            <summary>Формат для сохранения изображения методами Save().</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedMatrix._dataFormat">
            <summary>Формат данных изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.CompressedMatrix._sizeChanged">
            <summary>Обработчик события изменения размеров изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание пустой <see cref="T:Mallenom.Imaging.CompressedMatrix"/>.</summary>
            <param name="dataFormat">Формат данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(System.String)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/>.</summary>
            <param name="fileName">Имя файла.</param>
            <remarks>Формат данных определяется расширением файла.</remarks>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(System.String,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/>.</summary>
            <param name="fileName">Имя файла.</param>
            <param name="dataFormat">Формат данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(System.IO.Stream,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/>.</summary>
            <param name="stream">Поток с данными изображения.</param>
            <param name="dataFormat">Формат данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(System.Byte[],System.Int32,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/>.</summary>
            <param name="data">Данные изображения.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="dataFormat">Формат данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(System.Byte[],Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/>.</summary>
            <param name="data">Данные изображения.</param>
            <param name="dataFormat">Формат данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/> методом компрессии матрицы <paramref name="matrix"/>.</summary>
            <param name="matrix">Матрица с исходными данными.</param>
            <param name="dataFormat">Формат данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.CompressionParameters)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/> методом компрессии матрицы <paramref name="matrix"/>.</summary>
            <param name="matrix">Матрица с исходными данными.</param>
            <param name="dataFormat">Формат данных.</param>
            <param name="cparams">Параметры компрессии.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/> методом компрессии данных <paramref name="data"/>.</summary>
            <param name="data">Исходные данные.</param>
            <param name="dataFormat">Формат данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.#ctor(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.CompressionParameters)">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressedMatrix"/> методом компрессии данных <paramref name="data"/>.</summary>
            <param name="data">Исходные данные.</param>
            <param name="dataFormat">Формат данных.</param>
            <param name="cparams">Параметры компрессии.</param>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.ImageFormat">
            <summary>Возвращает и устанавливает формат сохраняемого изображения.</summary>
            <value>Формат сохраняемого изображения.</value>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.DataFormat">
            <summary>Возвращает формат данных матрицы.</summary>
            <value>Формат данных матрицы.</value>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.LockData">
            <summary>Получение доступа к данным матрицы.</summary>
            <returns>Данные изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.LockData(System.Drawing.Rectangle)">
            <summary>Получение доступа к данным части матрицы (не поддерживается для региона, не совпадающего с размерами матрицы).</summary>
            <param name="rect">Регион матрицы.</param>
            <returns>Данные изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.UnlockData(Mallenom.Imaging.ImageData)">
            <summary>Завершение работы с данными матрицы.</summary>
            <param name="data">Данные, полученные вызовом <see cref="M:Mallenom.Imaging.CompressedMatrix.LockData"/>.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.LoadCore(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Загрузить изображение из части <see cref="T:System.Drawing.Bitmap"/>.</summary>
            <param name="bitmap">Изображение.</param>
            <param name="rect">Загружаемая область.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Load(System.Drawing.Bitmap)">
            <summary>Загрузить изображение из <see cref="T:System.Drawing.Bitmap"/>.</summary>
            <param name="bitmap">Изображение.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Load(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Загрузить изображение из части <see cref="T:System.Drawing.Bitmap"/>.</summary>
            <param name="bitmap">Изображение.</param>
            <param name="rect">Загружаемая область.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.LoadCore(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток с изображением.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Load(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток с изображением.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Load(System.String)">
            <summary>Загрузить изображение из файла.</summary>
            <param name="fileName">Имя файла с изображением.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.SaveCore(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить изображение в поток.</summary>
            <param name="stream">Поток для хранения изображения.</param>
            <param name="imageFormat">Игнорируется.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Save(System.IO.Stream)">
            <summary>Сохранить изображение в поток.</summary>
            <param name="stream">Поток для хранения изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить изображение в поток.</summary>
            <param name="stream">Поток для хранения изображения.</param>
            <param name="imageFormat">Формат изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Save(System.String)">
            <summary>Сохранить изображение в файл.</summary>
            <param name="fileName">Имя файла для хранения изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Save(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить изображение в файл.</summary>
            <param name="fileName">Имя файла для хранения изображения.</param>
            <param name="imageFormat">Формат изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.CreateBitmap">
            <summary>Созать <see cref="T:System.Drawing.Bitmap"/> из данных матрицы.</summary>
            <returns>Созданный <see cref="T:System.Drawing.Bitmap"/> или <c>null</c>, если матрица пуста.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.CreateBitmap(System.Drawing.Rectangle)">
            <summary>Созать <see cref="T:System.Drawing.Bitmap"/> из части данных матрицы.</summary>
            <param name="rect">Копируемая область (не поддерживается, если не сопадает с размерами матрицы).</param>
            <returns>Созданный <see cref="T:System.Drawing.Bitmap"/> или <c>null</c>, если матрица пуста.</returns>
            <remarks><see cref="T:Mallenom.Imaging.CompressedMatrix"/> поддерживает только создание <see cref="T:System.Drawing.Bitmap"/> по всему изображению.</remarks>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.FillBitmapCore(System.Drawing.Bitmap)">
            <summary>Заполнить <see cref="T:System.Drawing.Bitmap"/> данными матрицы.</summary>
            <param name="bitmap">Заполняемый <see cref="T:System.Drawing.Bitmap"/>.</param>
            <returns><c>true</c>, если <paramref name="bitmap"/> успешно обновлен.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.FillBitmap(System.Drawing.Bitmap)">
            <summary>Заполнить <see cref="T:System.Drawing.Bitmap"/> данными матрицы.</summary>
            <param name="bitmap">Заполняемый <see cref="T:System.Drawing.Bitmap"/>.</param>
            <returns><c>true</c>, если <paramref name="bitmap"/> успешно обновлен.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.FillBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Заполнить <see cref="T:System.Drawing.Bitmap"/> из части данных матрицы.</summary>
            <param name="bitmap">Заполняемый <see cref="T:System.Drawing.Bitmap"/>.</param>
            <param name="rect">Копируемая область (не поддерживается, если не сопадает с размерами матрицы).</param>
            <returns><c>true</c>, если <paramref name="bitmap"/> успешно обновлен.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.IsValidBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>Проверят, может ли указанный <see cref="T:System.Drawing.Bitmap"/> быть заполнен данными матрицы.</summary>
            <param name="bitmap">Проверяемый <see cref="T:System.Drawing.Bitmap"/>.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <returns><c>true</c>, если <see cref="T:System.Drawing.Bitmap"/> подходит, иначе - <c>false</c>.</returns>
        </member>
        <member name="E:Mallenom.Imaging.CompressedMatrix.SizeChanged">
            <summary>Событие - размер матрицы изменен.</summary>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.Width">
            <summary>Возвращает ширину изображения.</summary>
            <value>Ширина изображения.</value>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.Height">
            <summary>Возвращает высоту изображения.</summary>
            <value>Высота изображения.</value>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.Stride">
            <summary>Возвращает размер сжатого изображения в байтах.</summary>
            <value>Размер сжатого изображения в байтах.</value>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.Size">
            <summary>Возвращает размер изображения.</summary>
            <value>Размер изображения.</value>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.IsEmpty">
            <summary>Возвращает признак пустой матрицы.</summary>
            <value><c>true</c>, если матрица пуста, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.ElementType">
            <summary>Возващает тип элемента массива данных сжатого изображения.</summary>
            <value><c>typeof(byte)</c>.</value>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.Data">
            <summary>Возвращает массив данных изображения.</summary>
            <value>Массив данных изоражения.</value>
        </member>
        <member name="P:Mallenom.Imaging.CompressedMatrix.DataArray">
            <summary>Возвращает массив данных изображения.</summary>
            <value>Массив данных изоражения.</value>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Clear">
            <summary>Очистка матрицы.</summary>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Clear(System.Drawing.Rectangle)">
            <summary>Очистка региона матрицы матрицы (очистка части матрицы не поддерживается).</summary>
            <param name="rect">Регион для очистки.</param>
            <exception cref="T:System.NotSupportedException">Передан <paramref name="rect"/>, не совпадающий с размерами матрицы.</exception>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.ResizeCore(System.Int32,System.Int32)">
            <summary>Изменение размера матрицы.</summary>
            <param name="width">Новая ширина матрицы.</param>
            <param name="height">Новая высота матрицы.</param>
            <remarks>Матрица не хранит данных изображения после изменения размеров.</remarks>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Resize(System.Int32,System.Int32)">
            <summary>Изменение размера матрицы.</summary>
            <param name="width">Новая ширина матрицы.</param>
            <param name="height">Новая высота матрицы.</param>
            <remarks>Матрица не хранит данных изображения после изменения размеров.</remarks>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Resize(System.Drawing.Size)">
            <summary>Изменение размера матрицы.</summary>
            <param name="size">Новый размер матрицы.</param>
            <remarks>Матрица не хранит данных изображения после изменения размеров.</remarks>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.BinaryCompare(Mallenom.Imaging.IMatrix)">
            <summary>Сравнение с другой матрицей.</summary>
            <param name="matrix">Матрица для стравнения.</param>
            <returns><c>true</c>, если содержимое матриц идентично.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.CopyTo(Mallenom.Imaging.IMatrix)">
            <summary>Распаковать содержимое в другую матрицу.</summary>
            <param name="matrix">Матрица для хранения результатов декомпрессии.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> == <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">
            Преобразование в формат матрицы <paramref name="matrix"/> не поддерживается.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.CopyTo(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle)">
            <summary>Распаковать содержимое части изображения в другую матрицу.</summary>
            <param name="matrix">Матрица для хранения результатов декомпрессии.</param>
            <param name="srcRect">Часть изображения (не поддерживается, если не совпадает с размерами матрицы).</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.CopyTo(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>Распаковать содержимое части изображения в регион другой матрицы.</summary>
            <param name="matrix">Матрица для хранения результатов декомпрессии.</param>
            <param name="srcRect">Часть изображения (не поддерживается, если не совпадает с размерами матрицы).</param>
            <param name="destX">X-координата целевой области в матрице <paramref name="matrix"/>.</param>
            <param name="destY">Y-координата целевой области в матрице <paramref name="matrix"/>.</param>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.CloneCore">
            <summary>Скопировать текущую матрицу.</summary>
            <returns>Копию текущей матрицы.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.Clone">
            <summary>Скопировать текущую матрицу.</summary>
            <returns>Копию текущей матрицы.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CompressedMatrix.System#ICloneable#Clone">
            <summary>Скопировать текущую матрицу.</summary>
            <returns>Копию текущей матрицы.</returns>
        </member>
        <member name="T:Mallenom.Imaging.CompressionParameters">
            <summary>Параметры сжатия изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.CompressionParameters.#ctor">
            <summary>Создание <see cref="T:Mallenom.Imaging.CompressionParameters"/>.</summary>
        </member>
        <member name="P:Mallenom.Imaging.CompressionParameters.CompressionFormat">
            <summary>Возвращает формат, для которого предназначены параметры.</summary>
            <value>Формат, для которго предназначены параметры.</value>
        </member>
        <member name="T:Mallenom.Imaging.ICompressedFormatService">
            <summary>Сервис формата сжатого изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ICompressedFormatService.AssociatedImageFormat">
            <summary>Возвращает ассоциированный GDI+ формат изображения.</summary>
            <value>Ассоциированный GDI+ формат изображения или <c>null</c>, если такого формата нет.</value>
        </member>
        <member name="M:Mallenom.Imaging.ICompressedFormatService.LockData(System.Byte[],System.Int32,System.Int32)">
            <summary>Возвращает <see cref="T:Mallenom.Imaging.ImageData"/> для массива данных сжатого изображения.</summary>
            <param name="data">Массив данных сжатого изображения.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <returns><see cref="T:Mallenom.Imaging.ImageData"/> для массива данных сжатого изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ICompressedFormatService.UnlockData(Mallenom.Imaging.ImageData)">
            <summary>Освободить ресурсы объекта <see cref="T:Mallenom.Imaging.ImageData"/>, созданного вызовом <see cref="M:Mallenom.Imaging.ICompressedFormatService.LockData(System.Byte[],System.Int32,System.Int32)"/>.</summary>
            <param name="imageData">Объект <see cref="T:Mallenom.Imaging.ImageData"/>, созданный вызовом <see cref="M:Mallenom.Imaging.ICompressedFormatService.LockData(System.Byte[],System.Int32,System.Int32)"/>.</param>
            <returns>Массив данных сжатого изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ICompressedFormatService.ParseHeader(System.Byte[],System.Int32@,System.Int32@)">
            <summary>Определяет валидность заголовка и размер изображения.</summary>
            <param name="data">Массив данных изображения.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота иображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ICompressedFormatService.SupportsFileExtension(System.String)">
            <summary>Возвращает признак поддержки расширения файла.</summary>
            <param name="fileExtension">Расширение файла.</param>
            <returns><c>true</c>, если расширение файла ассоциировано с форматом, иначе - <c>false</c>.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ImageData">
            <summary>Данные изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageData.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
            <param name="scan0">Указание на первую строку данных.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="stride">Смещение в байтах до следующей строки изображения.</param>
            <param name="format">Формат данных.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width"/> или <paramref name="height"/> меньше 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="width"/> и <paramref name="height"/> оба должны быть равны 0 или не равны 0.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageData.#ctor(System.IntPtr,System.Drawing.Size,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
            <param name="scan0">Указание на первую строку данных.</param>
            <param name="size">Размер изображения.</param>
            <param name="stride">Смещение в байтах до следующей строки изображения.</param>
            <param name="format">Формат данных.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> меньше 0.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageData.Finalize">
            <summary>Деструктор.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageData.Scan0">
            <summary>Указатель на первую строку данных.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageData.Stride">
            <summary>Смещение в байтах до следующей строки.</summary>
            <remarks>Для сжатых изображений - размер буфера.</remarks>
        </member>
        <member name="M:Mallenom.Imaging.ImageData.UpsideDown">
            <summary>Переворачивает изображение вверх ногами.</summary>
            <exception cref="T:System.NotSupportedException">Не поддерживается форматом.</exception>
        </member>
        <member name="P:Mallenom.Imaging.ImageData.Width">
            <summary>Ширина изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageData.Height">
            <summary>Высота изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageData.Format">
            <summary>Формат данных.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageData.CopyTo(System.Byte[])">
            <summary>Скопировать данные в массив.</summary>
            <param name="array">Массив для хранения данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageData.CopyTo(System.Byte[],System.Int32)">
            <summary>Скопировать данные в массив.</summary>
            <param name="array">Массив для хранения данных.</param>
            <param name="startOffset">Смещение в массиве до начала данных.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageData.Dispose(System.Boolean)">
            <summary>Release resources used by this <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
            <param name="disposing">true to release managed resources.</param>
        </member>
        <member name="P:Mallenom.Imaging.ImageData.IsDisposed">
            <summary>Gets a value indicating whether this instance is disposed.</summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Mallenom.Imaging.ImageData.Dispose">
            <summary>Releases all resources used by this <see cref="T:Mallenom.Imaging.ImageData"/>.</summary>
        </member>
        <member name="T:Mallenom.Imaging.ColorSpaceConverter">
            <summary>Преобразователи цветовых пространств.</summary>
        </member>
        <member name="T:Mallenom.Imaging.ColorSpaceConverter.ConverterKey">
            <summary>Ключ конвертера.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceConverter.ConverterKey._sourceFormat">
            <summary>Исходный формат.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceConverter.ConverterKey._targetFormat">
            <summary>Целевой формат.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.#cctor">
            <summary>Инициализация <see cref="T:Mallenom.Imaging.ColorSpaceConverter"/>.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RegisterConverterCore(Mallenom.Imaging.IColorConverter)">
            <summary>Зарегистрировать конвертер формата изображения.</summary>
            <param name="converter">Конвертер.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.UnregisterConverterCore(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Отменить регистрацию конвертера изображения.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RegisterConverter(Mallenom.Imaging.IColorConverter)">
            <summary>Зарегистрировать конвертер формата изображения.</summary>
            <param name="converter">Конвертер.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> == null.</exception>
            <exception cref="T:System.ArgumentException">Конвертер для этих форматов уже зарегистрирован.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RegisterConverter(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.UnsafePackedToPackedConversionDelegate)">
            <summary>Зарегистрировать конвертер формата изображения.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
            <param name="conversionDelegate">Делегат для реобразования формата.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceFormat"/> == null или <paramref name="targetFormat"/> == null или <paramref name="conversionDelegate"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">Конвертер для этих форматов уже зарегистрирован.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RegisterConverter(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.PackedToPackedConversionDelegate)">
            <summary>Зарегистрировать конвертер формата изображения.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
            <param name="conversionDelegate">Делегат для реобразования формата.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceFormat"/> == null или <paramref name="targetFormat"/> == null или <paramref name="conversionDelegate"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">Конвертер для этих форматов уже зарегистрирован.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.UnregisterConverter(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Отменить регистрацию конвертера изображения.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Конечный формат.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceFormat"/> == null или <paramref name="targetFormat"/> == null.
            </exception>
            <exception cref="T:System.ArgumentException">Конвертер для этих форматов не зарегистрирован.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8IndexedToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.Matrix,System.Drawing.Color[])">
            <summary>Преобразовать данные в формате Y8 с палитрой в полутоновую матрицу.</summary>
            <param name="scan0">Указатель на данные.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="stride">Смещение до следующей строки изображения.</param>
            <param name="matrix">Заполняемая матрица.</param>
            <param name="palette">Палитра.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8IndexedToMatrix(System.Byte*,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.Matrix,System.Drawing.Color[])">
            <summary>Преобразовать данные в формате Y8 с палитрой в полутоновую матрицу.</summary>
            <param name="scan0">Указатель на данные.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="stride">Смещение до следующей строки изображения.</param>
            <param name="matrix">Заполняемая матрица.</param>
            <param name="palette">Палитра.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8IndexedToMatrix(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.ColorMatrix,System.Drawing.Color[])">
            <summary>Преобразовать данные в формате Y8 с палитрой в цветную матрицу.</summary>
            <param name="scan0">Указатель на данные.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="stride">Смещение до следующей строки изображения.</param>
            <param name="matrix">Заполняемая матрица.</param>
            <param name="palette">Палитра.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8IndexedToMatrix(System.Byte*,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.ColorMatrix,System.Drawing.Color[])">
            <summary>Преобразовать данные в формате Y8 с палитрой в цветную матрицу.</summary>
            <param name="scan0">Указатель на данные.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="stride">Смещение до следующей строки изображения.</param>
            <param name="matrix">Заполняемая матрица.</param>
            <param name="palette">Палитра.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.BIN_to_BIN(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Binary в Binary.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.BIN_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Binary в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y8 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB555_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB555 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB565_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB565 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y16_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y16 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB24_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB24 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB32_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB32 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.IYU2_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из IYU2 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.YUY2_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из YUY2 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.UYVY_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из UYVY в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y411_to_Y8(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y411 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.BIN_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Binary в Y16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y8 в Y16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y16_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y16 в Y16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB555_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB555 в Y16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB565_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB565 в Y8.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB24_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB24 в Y16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB32_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB32 в Y16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.YUY2_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из YUY2 в Y16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.UYVY_to_Y16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из UYVY в Y16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.BIN_to_RGB555(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Binary в RGB555.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.BIN_to_RGB565(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Binary в RGB565.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8_to_RGB555(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y8 в RGB555.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8_to_RGB565(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y8 в RGB565.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB555_to_RGB565(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB555 в RGB565.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB565_to_RGB555(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB565 в RGB555.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB24_to_RGB555(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB24 в RGB555.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB24_to_RGB565(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB24 в RGB555.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB16_to_RGB16(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB16 в RGB16.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.BIN_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Binary в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y8 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y16_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y16 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB555_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB555 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB565_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB565 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB24_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB24 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB32_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB32 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.IYU2_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из IYU2 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.YUY2_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из YUY2 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.UYVY_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из UYVY в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y411_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y411 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.BIN_to_RGB32(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Binary в RGB32.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y8_to_RGB32(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y8 в RGB32.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Y16_to_RGB32(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из Y16 в RGB32.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB24_to_RGB32(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB24 в RGB32.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.RGB32_to_RGB32(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из RGB32 в RGB32.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.NV12_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из NV12 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.NV21_to_RGB24(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>Конвертор из NV21 в RGB24.</summary>
            <param name="source">Указатель на исходные данные.</param>
            <param name="sourceStride">Смещение в байтах до следующей строки пикселей в исходных данных.</param>
            <param name="target">Указатель на область памяти для хранения результата.</param>
            <param name="targetStride">Смещение в байтах до следующей строки пикселей в результате.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.GetConverterCore(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Получить преобразователь форматов.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Целевой формат.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.GetConverter``1(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Получить преобразователь форматов с нужным интерфейсом.</summary>
            <typeparam name="T">Тип интерфейса.</typeparam>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Целевой формат.</param>
            <returns>Преобразователь форматов.</returns>
            <exception cref="T:System.NotSupportedException">
            Конверсия не поддерживается или требуемый интерфейс не поддерживается конвертером.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.GetConverter(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Получить преобразователь форматов.</summary>
            <param name="sourceFormat">Исходный формат.</param>
            <param name="targetFormat">Целевой формат.</param>
            <returns>Преобразователь форматов.</returns>
            <exception cref="T:System.NotSupportedException">Конверсия не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Convert(Mallenom.Imaging.ImageData,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные изображения.</summary>
            <param name="source">Описание исходного изображения.</param>
            <param name="target">Описание целевого изображения.</param>
            <exception cref="T:System.NotSupportedException">Конверсия не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Convert(Mallenom.Imaging.ImageData,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать данные изображения.</summary>
            <param name="source">Описание исходного изображения.</param>
            <param name="target">Матрица целевого изображения.</param>
            <exception cref="T:System.NotSupportedException">Конверсия не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Convert(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.ImageData)">
            <summary>Преобразовать данные изображения.</summary>
            <param name="source">Матрица исходного изображения.</param>
            <param name="target">Описание целевого изображения.</param>
            <exception cref="T:System.NotSupportedException">Конверсия не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.Convert(Mallenom.Imaging.IImageMatrix,Mallenom.Imaging.IImageMatrix)">
            <summary>Преобразовать матрицу изображения.</summary>
            <param name="source">Матрица исходного изображения.</param>
            <param name="target">Матрица целевого изображения.</param>
            <exception cref="T:System.NotSupportedException">Конверсия не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.CanConvert(Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Проверка, поддерживается ли конвертация из формата <paramref name="source"/> в формат <paramref name="target"/>.</summary>
            <param name="source">Исходный формат.</param>
            <param name="target">Целевой формат.</param>
            <returns>true, если существует конвертер из формата <paramref name="source"/> в формат <paramref name="target"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.CanConvertTo(Mallenom.Imaging.ImageDataFormat)">
            <summary>Получить список форматов, в которые можно сконвертировать формат <paramref name="source"/>.</summary>
            <param name="source">Исходный формат.</param>
            <returns>Список форматов, в которые можно сконвертировать формат <paramref name="source"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorSpaceConverter.CanConvertFrom(Mallenom.Imaging.ImageDataFormat)">
            <summary>Получить список форматов, из которых можно получить формат <paramref name="target"/>.</summary>
            <param name="target">Целевой формат.</param>
            <returns>Список форматов, из которых можно получить формат <paramref name="target"/>.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ColorSpaceFOURCC">
            <summary>FOURCC-коды цветовых форматов.</summary>
            <remarks>source: http://www.fourcc.org/ </remarks>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_RGB">
            <summary>
            This is the basic RBG bitmap format which comes in all the common bits per pixel flavours.
            1, 4 and 8 bpp versions of the format are palettised and
            16, 24 and 32 bpp contain direct colour information.
            In all cases, the bitmap comprises a rectangular array of packed pixels.
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.RGB">
            <summary>Alias for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_RGB"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_RLE8">
            <summary>Run length encoded 8bpp RGB image.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.RLE8">
            <summary>Alias for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_RLE8"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_RLE4">
            <summary>Run length encoded 4bpp RGB image.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.RLE">
            <summary>Alias for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_RLE4"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_BITFIELDS">
            <summary>
            Raw RGB with arbitrary sample packing within a pixel.
            Packing and precision of R, G and B components is determined by bit masks for each.
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.raw">
            <summary>raw, uncompressed RGB bitmap.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.RGBA">
            <summary>Raw RGB with alpha. Sample precision and packing is arbitrary and determined using bit masks for each component, as for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_BITFIELDS"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.RGBT">
            <summary>Raw RGB with a transparency field. Layout is as for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.BI_RGB"/> at 16 and 32 bits per pixel but the msb in each pixel indicates whether the pixel is transparent or not.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.AYUV">
            <summary>
            This is a 4:4:4 YUV format with 8 bit samples for each component along with an 8 bit alpha blend value per pixel.
            Component ordering is A Y U V (as the name suggests).
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.CLJR">
            <summary>
            Cirrus Logic's format packs 4 pixel samples into a single u_int32 by sacrificing precision on each sample. Y samples are truncated to 5 bits each, U and V have 6 bits per sample.
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.cyuv">
            <summary>
            Essentially a copy of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> except that the sense of the height is reversed - the image is upside down with respect to the <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> version.
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.GREY">
            <summary>
            Apparently a duplicate of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.Y800"/> (and also, presumably, <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.Y8"/>).
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IRAW">
            <summary>Intel uncompressed YUV.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IUYV">
            <summary>
            Interlaced version of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> (line order 0, 2, 4,....,1, 3, 5....) registered by Silviu Brinzei of LEAD Technologies.
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IY41">
            <summary>
            Interlaced version of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.Y41P"/> (line order 0, 2, 4,....,1, 3, 5....) registered by Silviu Brinzei of LEAD Technologies.
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IYU1">
            <summary>
            The IYU1 format is a 12 bit format used in mode 2 of the IEEE 1394 Digital Camera 1.04 spec ("1394-based Digital Camera Specification, Version 1.04, August 9, 1996", page 14.).
            The format, a duplicate of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.Y411"/>, is YUV (4:1:1).
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IYU2">
            <summary>
            24 bit format used in mode 0 of the IEEE 1394 Digital Camera 1.04 spec
            The format is YUV (4:4:4).
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.HDYC">
            <summary>
            YUV 4:2:2 (Y sample at every pixel, U and V sampled at every second pixel horizontally on each line).
            A macropixel contains 2 pixels in 1 u_int32. This is a suplicate of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> except that the color components use the BT709 color space (as used in HD video).
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.UYNV">
            <summary>A direct copy of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> registered by NVidia to work around problems in some old codecs which did not like hardware which offered more than 2 UYVY surfaces.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVP">
            <summary>YCbCr 4:2:2 extended precision 10-bits per component in U0Y0V0Y1 order. Registered by Rich Ehlers of Evans &amp; Sutherland.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY">
            <summary>YUV 4:2:2 (Y sample at every pixel, U and V sampled at every second pixel horizontally on each line). A macropixel contains 2 pixels in 1 u_int32.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.V210">
            <summary>10-bit 4:2:2 YCrCb equivalent to the Quicktime format of the same name.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.V422">
            <summary>Upside-down version of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.V655">
            <summary>16 bit YUV 4:2:2 format registered by Vitec Multimedia.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.VYUY">
            <summary>ATI Packed YUV Data.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y422">
            <summary>Direct copy of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> as used by ADS Technologies Pyro WebCam firewire camera.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YUY2">
            <summary>YUV 4:2:2 as for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> but with different component ordering within the u_int32 macropixel.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YUYV">
            <summary>Duplicate of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.YUY2"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YUNV">
            <summary>A direct copy of <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.YUY2"/> registered by NVidia to work around problems in some old codecs which did not like hardware which offered more than 2 YUY2 surfaces.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YVYU">
            <summary>YUV 4:2:2 as for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> but with different component ordering within the u_int32 macropixel.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y41P">
            <summary>YUV 4:1:1 (Y sample at every pixel, U and V sampled at every fourth pixel horizontally on each line). A macropixel contains 8 pixels in 3 u_int32s.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y411">
            <summary>YUV 4:1:1 with a packed, 6 byte/4 pixel macroblock structure.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y211">
            <summary>Packed YUV format with Y sampled at every second pixel across each line and U and V sampled at every fourth pixel.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y41T">
            <summary>Format as for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.Y41P"/> but the lsb of each Y component is used to signal pixel transparency.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y42T">
            <summary>Format as for <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.UYVY"/> but the lsb of each Y component is used to signal pixel transparency.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YUVP">
            <summary>YCbCr 4:2:2 extended precision 10-bits per component in Y0U0Y1V0 order. Registered by Rich Ehlers of Evans &amp; Sutherland.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YVU9">
            <summary>8 bit Y plane followed by 8 bit 4x4 subsampled V and U planes. Registered by Intel.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YUV9">
            <summary>Registered by Intel, this is the format used internally by Indeo video codec.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IF09">
            <summary>As <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.YVU9"/> but an additional 4x4 subsampled plane is appended containing delta information relative to the last frame. (Bpp is reported as 9).</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YV16">
            <summary>8 bit Y plane followed by 8 bit 2x1 subsampled V and U planes.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.YV12">
            <summary>8 bit Y plane followed by 8 bit 2x2 subsampled V and U planes.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.I420">
            <summary>8 bit Y plane followed by 8 bit 2x2 subsampled U and V planes.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IYUV">
            <summary>Duplicate FOURCC, identical to <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.I420"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.NV12">
            <summary>8-bit Y plane followed by an interleaved U/V plane with 2x2 subsampling.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.NV21">
            <summary>As <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.NV12"/>. with U and V reversed in the interleaved plane.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IMC1">
            <summary>As <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.YV12"/> except the U and V planes each have the same stride as the Y plane.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IMC2">
            <summary>Similar to <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.IMC1"/> except that the U and V lines are interleaved at half stride boundaries.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IMC3">
            <summary>As <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.IMC1"/> except that U and V are swapped.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.IMC4">
            <summary>As <see cref="F:Mallenom.Imaging.ColorSpaceFOURCC.IMC2"/> except that U and V are swapped.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.CLPL">
            <summary>Format similar to YV12 but including a level of indirection.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y41B">
            <summary>Weitek format listed as "YUV 4:1:1 planar".</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y42B">
            <summary>Weitek format listed as "YUV 4:2:2 planar".</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y800">
            <summary>Simple, single Y plane for monochrome images.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y8">
            <summary>Simple, single Y plane for monochrome images.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.Y16">
            <summary>16-bit uncompressed greyscale image.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.CXY1">
            <summary>Planar YUV 4:1:1 format registered by Conexant.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorSpaceFOURCC.CXY2">
            <summary>Planar YUV 4:1:1 format registered by Conexant.</summary>
        </member>
        <member name="T:Mallenom.Imaging.ColorYUV">
            <summary>YUV цвет.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorYUV.U">
            <summary>U.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorYUV.Y">
            <summary>Яркость.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorYUV.V">
            <summary>V.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ColorYUV.DataFormat">
            <summary>Формат данных.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ColorYUV.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>Конструктор.</summary>
            <param name="y">Яркость.</param>
            <param name="u">U.</param>
            <param name="v">V.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorYUV.#ctor(System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="color">Цвет.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorYUV.op_Inequality(Mallenom.Imaging.ColorYUV,Mallenom.Imaging.ColorYUV)">
            <summary>Tests whether two specified <see cref="T:Mallenom.Imaging.ColorYUV"/> structures are different.</summary>
            <param name="left">The <see cref="T:Mallenom.Imaging.ColorYUV"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Mallenom.Imaging.ColorYUV"/> that is to the right of the inequality operator.</param>
            <returns>true if the two <see cref="T:Mallenom.Imaging.ColorYUV"/> structures are different; otherwise, false.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorYUV.op_Equality(Mallenom.Imaging.ColorYUV,Mallenom.Imaging.ColorYUV)">
            <summary>Tests whether two specified <see cref="T:Mallenom.Imaging.ColorYUV"/> structures are equivalent.</summary>
            <param name="left">The <see cref="T:Mallenom.Imaging.ColorYUV"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:Mallenom.Imaging.ColorYUV"/> that is to the right of the equality operator.</param>
            <returns>true if the two <see cref="T:Mallenom.Imaging.ColorYUV"/> structures are equal; otherwise, false.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorYUV.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.ColorYUV"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.ColorYUV"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorYUV.Equals(System.Object)">
            <summary>Сравнить с другим значением.</summary>
            <param name="obj">Значение 2.</param>
            <returns>true, если <paramref name="obj"/> == this.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorYUV.GetHashCode">
            <summary>Returns a hash code for this <see cref="T:Mallenom.Imaging.ColorYUV"/> structure.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Mallenom.Imaging.ColorYUV"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorYUV.Equals(Mallenom.Imaging.ColorYUV)">
            <summary>Сравнить с другим значением.</summary>
            <param name="other">Значение 2.</param>
            <returns>true, если <paramref name="other"/> == this.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ImageDataFormat">
            <summary>Формат данных изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.Binary">
            <summary>
            Binary. Двоичное изображение, по 1 биту на пиксель.
            Макропиксель: [ yyyyyyyy ][ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.Y8">
            <summary>
            Y8. Полутоновой формат, также известный как Y800 и GRAY.
            Макропиксель: [ Y0 ][ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.Y16">
            <summary>
            Y16. 16-битный полутоновой формат.
            Макропиксель: [ Y0 ][ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.RGB555">
            <summary>
            16-битный RGB. По 5 бит на компонент.
            Макропиксель: [ 0rrrrrgggggbbbbb ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.RGB565">
            <summary>
            16-битный RGB. По 5 бит на компоненты R и B, 6 бит на G.
            Макропиксель: [ rrrrrggggggbbbbb ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.RGB24">
            <summary>
            24-битный RGB. По 1 байту на компонент.
            Макропиксель: [ B | G | R ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.RGB32">
            <summary>
            32-битный RGB. По 1 байту на компонент, 1 байт либо не используется, либо используется для альфа-канала.
            Макропиксель: [ B | G | R | X ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.Y411">
            <summary>
            YUV-формат. Яркость (Y) хранится для каждого пиксела, U и V компоненты для каждого четвертого пиксела.
            Макропиксель содержит 4 пиксела изображения.
            Макропиксель: [ U0 | Y0 | Y1 | V0 | Y2 | Y3 ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.YUY2">
            <summary>
            YUV-формат. Яркость (Y) хранится для каждого пиксела, U и V компоненты для каждого второго пиксела.
            Макропиксель содержит 2 пиксела изображения.
            Макропиксель: [ Y0 | U0 | Y1 | V0 ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.UYVY">
            <summary>
            YUV-формат. Яркость (Y) хранится для каждого пиксела, U и V компоненты для каждого второго пиксела.
            Отличается от <see cref="F:Mallenom.Imaging.ImageDataFormat.IYU2"/> порядком байт.
            Макропиксель содержит 2 пиксела изображения.
            Макропиксель: [ U0 | Y0 | V0 | Y1 ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.IYU2">
            <summary>
            24-битный YUV. По 1 байту на компонент.
            Макропиксель: [ U0 | Y0 | V0 ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.NV12">
            <summary>
            Planar-формат. U и V хранятся для каждых 4х соседних по вертикали и горизонтали пикселей.
            Плоскости U и V совмещены и хранятся вместе сразу после плоскости Y, и имеют с ней общий stride.
            Byte Layout:
            [ Y0 ] [ Y1 ] [ ...
            [ YN ] [ YM ] [ ...
            [ ...
            [ U0 V0 ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.NV21">
            <summary>
            Planar-формат. U и V хранятся для каждых 4х соседних по вертикали и горизонтали пикселей.
            Плоскости U и V совмещены и хранятся вместе сразу после плоскости Y, и имеют с ней общий stride.
            Отличается от <see cref="F:Mallenom.Imaging.ImageDataFormat.NV12"/> порядком байт.
            Byte Layout:
            [ Y0 ] [ Y1 ] [ ...
            [ YN ] [ YM ] [ ...
            [ ...
            [ V0 U0 ] [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.IMC1">
            <summary>
            Planar-формат. U и V хранятся для каждых 4х соседних по вертикали и горизонтали пикселей.
            Плоскости U и V сразу после плоскости Y, и имеют с ней общий stride.
            Byte Layout:
            [ Y0 ] [ Y1 ] [ ...
            [ YN ] [ YM ] [ ...
            [ ...
            [ V0 ] [ ...
            [ ...
            [ U0 ] [ ...
            [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.IMC2">
            <summary>
            Planar-формат. U и V хранятся для каждых 4х соседних по вертикали и горизонтали пикселей.
            Плоскости U и V сразу после плоскости Y, и имеют по отношению к ней stride/2.
            Byte Layout:
            [ Y0 ] [ Y1 ] [ ...
            [ YN ] [ YM ] [ ...
            [ ...
            [ V0 ] [ ... [ U0 ] [ ...
            [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.IMC3">
            <summary>
            Planar-формат. U и V хранятся для каждых 4х соседних по вертикали и горизонтали пикселей.
            Плоскости U и V сразу после плоскости Y, и имеют с ней общий stride.
            Byte Layout:
            [ Y0 ] [ Y1 ] [ ...
            [ YN ] [ YM ] [ ...
            [ ...
            [ U0 ] [ ...
            [ ...
            [ V0 ] [ ...
            [ ...
            </summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormat.IMC4">
            <summary>
            Planar-формат. U и V хранятся для каждых 4х соседних по вертикали и горизонтали пикселей.
            Плоскости U и V сразу после плоскости Y, и имеют по отношению к ней stride/2.
            Byte Layout:
            [ Y0 ] [ Y1 ] [ ...
            [ YN ] [ YM ] [ ...
            [ ...
            [ U0 ] [ ... [ V0 ] [ ...
            [ ...
            </summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.CreatePackedFormat(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>Создать описание pecked-формата.</summary>
            <param name="name">Название.</param>
            <param name="bpp">Бит на пиксель.</param>
            <param name="color">Формат цветной.</param>
            <param name="alpha">Содержит альфа-канал.</param>
            <returns>Формат изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.CreatePlanarFormat(System.String,System.Int32,System.Boolean)">
            <summary>Создать описание planar-формата.</summary>
            <param name="name">Название.</param>
            <param name="bpp">Бит на пиксель.</param>
            <param name="alpha">Содержит альфа-канал.</param>
            <returns>Формат изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.CreateIndexedFormat(System.String,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создать описание индексированного формата.</summary>
            <param name="name">Название.</param>
            <param name="bpp">Бит на пиксель.</param>
            <param name="paletteFormat">Формат палитры.</param>
            <returns>Формат изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.CreateCompressedFormat(System.String,Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ICompressedFormatService)">
            <summary>Создать описание сжатого формата.</summary>
            <param name="name">Название.</param>
            <param name="underlyingFormat">Исходный формат.</param>
            <param name="service">Сервис, обслуживающий формат.</param>
            <returns>Формат изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.CreateCompressedFormat(System.String,System.Boolean,System.Boolean,Mallenom.Imaging.ICompressedFormatService)">
            <summary>Создать описание сжатого формата.</summary>
            <param name="name">Название.</param>
            <param name="color">Формат цветной.</param>
            <param name="alpha">Содержит альфа-канал.</param>
            <param name="service">Сервис, обслуживающий формат.</param>
            <returns>Формат изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.GetFormatByName(System.String)">
            <summary>Получить формат по его имени.</summary>
            <param name="name">Имя формата.</param>
            <returns>Формат с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.#ctor(System.String,Mallenom.Imaging.ImageDataFormatType,System.Int32,System.Boolean,System.Boolean)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageDataFormat"/>.</summary>
            <param name="name">Название формата.</param>
            <param name="formatType">Тип формата.</param>
            <param name="bpp">Бит на пиксель.</param>
            <param name="color">Формат цветной.</param>
            <param name="alpha">Предполагает наличие альфа-канала.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.#ctor(System.String,Mallenom.Imaging.ImageDataFormatType,System.Int32,System.Boolean,System.Boolean,Mallenom.Imaging.ImageDataFormat,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.ImageDataFormat"/>.</summary>
            <param name="name">Название формата.</param>
            <param name="formatType">Тип формата.</param>
            <param name="bpp">Бит на пиксель.</param>
            <param name="color">Формат цветной.</param>
            <param name="alpha">Предполагает наличие альфа-канала.</param>
            <param name="paletteFormat">Формат палитры.</param>
            <param name="underlyingFormat">Исходный формат.</param>
        </member>
        <member name="P:Mallenom.Imaging.ImageDataFormat.Name">
            <summary>Имя формата.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageDataFormat.FormatType">
            <summary>Тип формата.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageDataFormat.Bpp">
            <summary>Бит на пиксель.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageDataFormat.PaletteFormat">
            <summary>
            Если <see cref="M:FormatType"/> == <see cref="M:ImageDataFormatType.Indexed"/>,
            возвращает формат палитры.
            </summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageDataFormat.UnderlyingFormat">
            <summary>
            Если <see cref="M:FormatType"/> == <see cref="M:ImageDataFormatType.Compressed"/>,
            возвращает формат изображения в сжатом потоке.
            </summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageDataFormat.HasAlphaChannel">
            <summary>Формат предполагает наличие альфа-канала.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ImageDataFormat.HasColor">
            <summary>Формат цветной.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormat.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageDataFormat"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageDataFormat"/>.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ImageDataFormatType">
            <summary>Способ представления данных изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormatType.Packed">
            <summary>Packed-формат. Информация об 1 пикселе хранится в последовательности байт.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormatType.Planar">
            <summary>Planar-формат. Информация о пикселе распределена.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormatType.Indexed">
            <summary>Indexed-формат. Информация о цвете пиксела хранится в палитре.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageDataFormatType.Compressed">
            <summary>Сжатый формат. Изображение представлено сжатым потоком произвольной формы.</summary>
        </member>
        <member name="T:Mallenom.Imaging.ImageDataFormatGDIPlusExtensions">
            <summary>Конвертор представлений форматов данных.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormatGDIPlusExtensions.ToImageDataFormat(System.Drawing.Imaging.PixelFormat)">
            <summary><see cref="T:System.Drawing.Imaging.PixelFormat"/> -> <see cref="T:Mallenom.Imaging.ImageDataFormat"/>.</summary>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat"/>.</param>
            <returns><see cref="T:Mallenom.Imaging.ImageDataFormat"/>, соответствующий <paramref name="pixelFormat"/>.</returns>
            <exception cref="T:System.NotSupportedException"><paramref name="pixelFormat"/> не имеет представления в виде <see cref="T:Mallenom.Imaging.ImageDataFormat"/>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormatGDIPlusExtensions.ToGDIPixelFormat(Mallenom.Imaging.ImageDataFormat)">
            <summary><see cref="T:Mallenom.Imaging.ImageDataFormat"/> -> <see cref="T:System.Drawing.Imaging.PixelFormat"/>.</summary>
            <param name="format">Конвертируемый формат.</param>
            <returns><see cref="T:System.Drawing.Imaging.PixelFormat"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> == <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:Mallenom.Imaging.ImageDataFormat"/> не имеет представления в виде <see cref="T:System.Drawing.Imaging.PixelFormat"/>.</exception>
        </member>
        <member name="T:Mallenom.Imaging.ImageDataFormatWPFExtensions">
            <summary>Конвертор представлений форматов данных.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormatWPFExtensions.ToImageDataFormat(System.Windows.Media.PixelFormat)">
            <summary><see cref="T:System.Windows.Media.PixelFormat"/> -> <see cref="T:Mallenom.Imaging.ImageDataFormat"/>.</summary>
            <param name="pixelFormat"><see cref="T:System.Windows.Media.PixelFormat"/>.</param>
            <returns><see cref="T:Mallenom.Imaging.ImageDataFormat"/>, соответствующий <paramref name="pixelFormat"/>.</returns>
            <exception cref="T:System.NotSupportedException"><paramref name="pixelFormat"/> не имеет представления в виде <see cref="T:Mallenom.Imaging.ImageDataFormat"/>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageDataFormatWPFExtensions.ToWPFPixelFormat(Mallenom.Imaging.ImageDataFormat)">
            <summary><see cref="T:Mallenom.Imaging.ImageDataFormat"/> -> <see cref="T:System.Windows.Media.PixelFormat"/>.</summary>
            <param name="format">Конвертируемый формат.</param>
            <returns><see cref="T:System.Windows.Media.PixelFormat"/>, соответствующий <see cref="T:Mallenom.Imaging.ImageDataFormat"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> == <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">Данный <see cref="T:ImageDataFormat"/> не имеет представления в виде <see cref="T:System.Windows.Media.PixelFormat"/>.</exception>
        </member>
        <member name="T:Mallenom.Imaging.MatrixBmpLoader">
            <summary>Загрузчик матрицы <see cref="T:Mallenom.Imaging.Matrix"/> из BMP.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixBmpLoader._matrix">
            <summary>Загружаемая матрица.</summary>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.#ctor(Mallenom.Imaging.Matrix)">
            <summary>Создание <see cref="T:Mallenom.Imaging.MatrixBmpLoader"/>.</summary>
            <param name="matrix">Загружаемая матрица.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.AllocateMemory">
            <summary>Выделить память под изображение.</summary>
            <returns>Массив пикселей.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.LoadPalette(System.IO.BinaryReader,System.Int32)">
            <summary>Загружает палитру изображения.</summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/></param>
            <param name="recordsCount">Количество записей в палитре.</param>
            <returns>Палитра изображения или <c>null</c>, если палитра не требуется.</returns>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.LoadEmptyImage">
            <summary>Загрузить пустое изображение.</summary>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.Load1bppIndexed(System.IO.Stream,System.Byte[])">
            <summary>Загрузить индексированное 1bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.Load4bppIndexed(System.IO.Stream,System.Byte[])">
            <summary>Загрузить индексированное 4bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.Load8bppIndexed(System.IO.Stream,System.Byte[])">
            <summary>Загрузить индексированное 8bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
            <param name="palette">Палитра.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.Load16bpp555(System.IO.Stream)">
            <summary>Загрузить цветное 16bpp-изображение с распределением битов на компоненты 5-5-5.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.Load16bpp565(System.IO.Stream)">
            <summary>Загрузить цветное 16bpp-изображение с распределением битов на компоненты 5-6-5.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.Load24bpp(System.IO.Stream)">
            <summary>Загрузить цветное 24bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.MatrixBmpLoader.Load32bpp(System.IO.Stream)">
            <summary>Загрузить цветное 32bpp-изображение.</summary>
            <param name="stream">Поток, установленный на начало данных изображения.</param>
        </member>
        <member name="T:Mallenom.Imaging.IndexedImageData">
            <summary>Данные изображения с палитрой.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IndexedImageData.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.IndexedImageData"/>.</summary>
            <param name="scan0"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="format"></param>
        </member>
        <member name="T:Mallenom.Imaging.ISupportAllocate">
            <summary>Интерфейс контейнера данных изображения, поддерживающего выделение памяти.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ISupportAllocate.Allocate(System.Int32)">
            <summary>Выделить память под изображение.</summary>
            <param name="size">Объем необходимой памяти в байтах.</param>
        </member>
        <member name="T:Mallenom.Imaging.MatrixData">
            <summary>Данные матрицы изображения.</summary>
        </member>
        <member name="T:Mallenom.Imaging.PlanarImageData">
            <summary>Данные planar-YUV изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.PlanarImageData.#ctor(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Mallenom.Imaging.ImageDataFormat)">
            <summary>Создание <see cref="T:Mallenom.Imaging.PlanarImageData"/>.</summary>
            <param name="scan0"></param>
            <param name="uData"></param>
            <param name="vData"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="uStride"></param>
            <param name="vStride"></param>
            <param name="format"></param>
        </member>
        <member name="P:Mallenom.Imaging.PlanarImageData.UData">
            <summary>Плоскость U.</summary>
        </member>
        <member name="P:Mallenom.Imaging.PlanarImageData.VData">
            <summary>Плоскость V.</summary>
        </member>
        <member name="P:Mallenom.Imaging.PlanarImageData.UStride">
            <summary>Смещение в байтах до следующей строки в плоскости U.</summary>
        </member>
        <member name="P:Mallenom.Imaging.PlanarImageData.VStride">
            <summary>Смещение в байтах до следующей строки в плоскости V.</summary>
        </member>
        <member name="M:Mallenom.Imaging.GdiVideoImageRenderer`1.DrawFPS(System.Drawing.Graphics)">
            <summary>Отрисовка надписи FPS.</summary>
            <param name="g">Объект Graphics.</param>
        </member>
        <member name="M:Mallenom.Imaging.GdiFrameImageRenderer`1.DrawFrames(System.Drawing.Graphics)">
            <summary>Нарисовать рамки.</summary>
            <param name="g"></param>
        </member>
        <member name="T:Mallenom.Imaging.TextLabelCollection">
            <summary>Коллекция текстовых меток. Может быть создана только классом <see cref="T:Mallenom.Imaging.Image"/>.</summary>
            <threadsafe>Потокобезопасна.</threadsafe>
        </member>
        <member name="E:Mallenom.Imaging.TextLabelCollection.TextLabelChanged">
            <summary>Изменились параметры одной из рамок.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabelCollection.Item(System.Int32)">
            <summary>Получит рамку по индексу.</summary>
            <param name="index">Индекс.</param>
            <returns>Рамка.</returns>
        </member>
        <member name="M:Mallenom.Imaging.TextLabelCollection.ClearItems">
            <summary>Очистить коллекцию рамок.</summary>
        </member>
        <member name="M:Mallenom.Imaging.TextLabelCollection.InsertItem(System.Int32,Mallenom.Imaging.TextLabel)">
            <summary>Вставить рамку в коллекцию.</summary>
            <param name="index">Индекс рамки.</param>
            <param name="item">Рамка.</param>
        </member>
        <member name="M:Mallenom.Imaging.TextLabelCollection.RemoveItem(System.Int32)">
            <summary>Удалить рамку из коллекции.</summary>
            <param name="index">Индекс рамки.</param>
        </member>
        <member name="M:Mallenom.Imaging.TextLabelCollection.SetItem(System.Int32,Mallenom.Imaging.TextLabel)">
            <summary>Заменить рамку в коллекции.</summary>
            <param name="index">Индекс рамки.</param>
            <param name="item">Рамка.</param>
        </member>
        <member name="M:Mallenom.Imaging.GdiPlusVideoImageRenderer`1.DrawFPS(System.Drawing.Graphics)">
            <summary>Отрисовка надписи FPS.</summary>
            <param name="g">Объект Graphics.</param>
        </member>
        <member name="M:Mallenom.Imaging.GdiPlusFrameImageRenderer`1.DrawFrames(System.Drawing.Graphics)">
            <summary>Нарисовать рамки.</summary>
            <param name="g"></param>
        </member>
        <member name="T:Mallenom.Imaging.IImageRenderer">
            <summary>Рендерер избражения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IImageRenderer.Image">
            <summary><see cref="T:Mallenom.Imaging.Image"/>, связанный с данным отрисовщиком.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IImageRenderer.ResetCache">
            <summary>Сброс кэша.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IImageRenderer.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>Обработка события <see cref="M:Mallenom.Imaging.Image.OnPaintBackground"/>.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Imaging.IImageRenderer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Обработка события <see cref="M:Mallenom.Imaging.Image.OnPaint"/>.</summary>
            <param name="e"></param>
        </member>
        <member name="T:Mallenom.Imaging.BaseMatrix`1">
            <summary>Базовый класс матрицы.</summary>
            <typeparam name="T">Тип элемента матрицы.</typeparam>
        </member>
        <member name="F:Mallenom.Imaging.BaseMatrix`1.SizeOfT">
            <summary>Размер <typeparamref name="T"/> в байтах.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BaseMatrix`1._arr">
            <summary>Данные матрицы.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BaseMatrix`1._width">
            <summary>Ширина матрицы.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BaseMatrix`1._height">
            <summary>Высота матрицы.</summary>
        </member>
        <member name="F:Mallenom.Imaging.BaseMatrix`1._sizeChanged">
            <summary>Обработчик события изменения размера матрицы.</summary>
        </member>
        <member name="E:Mallenom.Imaging.BaseMatrix`1.SizeChanged">
            <summary>Генерируется после изменения размера матрицы.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.#ctor(System.Drawing.Size)">
            <summary>Конструктор.</summary>
            <param name="size">Размер матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.#ctor(System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
            <exception cref="T:System.ArgumentException">Переданы отрицательные размеры.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>Конструктор.</summary>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
            <param name="data">Содержимое матрицы.</param>
            <exception cref="T:System.ArgumentException">Переданы отрицательные размеры.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CreateData(System.Int32,System.Int32,`0[])">
            <summary>Перегружаемая функция для создания массива <see cref="P:Mallenom.Imaging.BaseMatrix`1.Data"/>.</summary>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="data">Массив данных. Если необходимо создать новый, то null.</param>
            <returns>Созданный массив.</returns>
            <remarks>
            <para>Метод проверяет параметр <paramref name="data"/> и если он null, то выделяет память для данных,
            иначе возвращает уже созданные данные.</para>
            <para>Метод должен контролировать валидность всех передаваемых в него параметров
            и в случаее некорректности генерировать исключение.</para>
            </remarks>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CloneArea(`0[],System.Drawing.Rectangle)">
            <summary>Скопировать область изображения в массив.</summary>
            <param name="target">Целевой массив.</param>
            <param name="rect">Копируемая область.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CopyTo(Mallenom.Imaging.IMatrix)">
            <summary>Скопировать содержимое в другую матрицу.</summary>
            <param name="matrix">Заполняемая матрица.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CopyToWithConversion(Mallenom.Imaging.IMatrix)">
            <summary>Скопировать содержимое в матрицу другого типа с конверсией данных.</summary>
            <param name="matrix">Заполняемая матрица.</param>
            <exception cref="T:System.NotSupportedException">Тип целевой матрицы не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CopyTo(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle)">
            <summary>Скопировать содержимое области в другую матрицу.</summary>
            <param name="matrix">Заполняемая матрица.</param>
            <param name="srcRect">Копируемая область.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Прямоугольник <paramref name="srcRect"/> выходит за пределы изображения.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CopyToWithConversion(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle)">
            <summary>Скопировать содержимое в матрицу другого типа с конверсией данных.</summary>
            <param name="matrix">Заполняемая матрица.</param>
            <param name="srcRect">Копируемая область.</param>
            <exception cref="T:System.NotSupportedException">Тип целевой матрицы не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CopyTo(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>Копирование содержимого области матрицы в указанную область другой матрицы.</summary>
            <param name="matrix">Матрица, в которую происходит копирование. Ее размер не изменяется.</param>
            <param name="srcRect">Область которую необходимо скопировать из исходной матрицы.</param>
            <param name="destX">Координата X левого верхнего угла области, в которую необходимо произвести копирование.</param>
            <param name="destY">Координата Y левого верхнего угла области, в которую необходимо произвести копирование.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="srcRect"/>, <paramref name="destX"/> или <paramref name="destY"/> выходят за пределы изображения.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CopyToWithConversion(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>Копирование содержимого области матрицы в указанную область матрицы другого типа с конверсией данных.</summary>
            <param name="matrix">Матрица, в которую происходит копирование. Ее размер не изменяется.</param>
            <param name="srcRect">Область которую необходимо скопировать из исходной матрицы.</param>
            <param name="destX">Координата X левого верхнего угла области, в которую необходимо произвести копирование.</param>
            <param name="destY">Координата Y левого верхнего угла области, в которую необходимо произвести копирование.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="srcRect"/>, <paramref name="destX"/> или <paramref name="destY"/> выходят за пределы изображения.</exception>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.Item(System.Int32,System.Int32)">
            <summary>Пиксель изображения.</summary>
            <param name="x">Координата x.</param>
            <param name="y">Координата y.</param>
            <returns>Пиксель изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.GetPixel(System.Int32,System.Int32)">
            <summary>Получить цвет пикселя.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
            <returns>Значение цвета пикселя.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.SetPixel(System.Int32,System.Int32,`0)">
            <summary>Установить значение пикселя.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
            <param name="color">Цвет пикселя.</param>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.Data">
            <summary>Массив пикселей изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.Height">
            <summary>Высота.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.Stride">
            <summary>Смещение до следующей строки пикселей в байтах.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.Size">
            <summary>Размер.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.IsEmpty">
            <summary>Возвращает true, если матрица пуста, то есть ширина или высота равны 0.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.ElementType">
            <summary>Тип элемента матрицы.</summary>
        </member>
        <member name="P:Mallenom.Imaging.BaseMatrix`1.DataArray">
            <summary>Массив элементов матрицы.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.Resize(System.Int32,System.Int32)">
            <summary>Изменить размеры изображения.</summary>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.Resize(System.Drawing.Size)">
            <summary>Изменить размеры изображения.</summary>
            <param name="size">Размер.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.BinaryCompare(Mallenom.Imaging.IMatrix)">
            <summary>Сравнить содержимое с другой матрицей.</summary>
            <param name="matrix">Матрица для сравнения.</param>
            <returns>true, если содержимое матриц идентично.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.Clear">
            <summary>Очистить матрицу.</summary>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.Clear(System.Drawing.Rectangle)">
            <summary>Очистить часть матрицы.</summary>
            <param name="rect">Очищаемая область.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rect"/> выходит за пределы изображения.</exception>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.Fill(`0)">
            <summary>Заполнить матрицу цветом.</summary>
            <param name="color">Цвет.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.Fill(`0,System.Drawing.Rectangle)">
            <summary>Заполнить область матрицы цветом.</summary>
            <param name="color">Цвет.</param>
            <param name="rect">Заполняемая область.</param>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.CreateObjectCore">
            <summary>Создание матрицы правильного типа и размера для последующего клонирования в него текущего.</summary>
            <returns>Созданный объект.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.InternalClone">
            <summary>Создание нового объекта, который является копией текущего.</summary>
            <returns>Новый объект, являющийся копией текущего.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.BaseMatrix&lt;T&gt;"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.BaseMatrix&lt;T&gt;"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.Clone">
            <summary>Создание нового объекта, который является копией текущего.</summary>
            <returns>Новый объект, являющийся копией текущего.</returns>
        </member>
        <member name="M:Mallenom.Imaging.BaseMatrix`1.System#ICloneable#Clone">
            <summary>Создание нового объекта, который является копией текущего.</summary>
            <returns>Новый объект, являющийся копией текущего.</returns>
        </member>
        <member name="T:Mallenom.Imaging.Color24">
            <summary>24х-битный цвет.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.B">
            <summary>Синий.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.G">
            <summary>Зеленый.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.R">
            <summary>Красный.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Color24.Y">
            <summary>Яркость.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.DataFormat">
            <summary>Формат данных.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.Black">
            <summary>Черный.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.White">
            <summary>Белый.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.Red">
            <summary>Красный.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.Green">
            <summary>Зеленый.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Color24.Blue">
            <summary>Синий.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Color24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>Конструктор.</summary>
            <param name="r">Красный.</param>
            <param name="g">Зеленый.</param>
            <param name="b">Синий.</param>
        </member>
        <member name="M:Mallenom.Imaging.Color24.#ctor(System.Byte)">
            <summary>Конструктор.</summary>
            <param name="color">Монохромный цвет.</param>
        </member>
        <member name="M:Mallenom.Imaging.Color24.#ctor(System.UInt32)">
            <summary>Конструктор.</summary>
            <param name="color">Цвет.</param>
        </member>
        <member name="M:Mallenom.Imaging.Color24.#ctor(System.Int32)">
            <summary>Конструктор.</summary>
            <param name="color">Цвет.</param>
        </member>
        <member name="M:Mallenom.Imaging.Color24.#ctor(System.Drawing.Color)">
            <summary>Конструктор.</summary>
            <param name="color">Цвет.</param>
        </member>
        <member name="M:Mallenom.Imaging.Color24.op_Explicit(System.Drawing.Color)~Mallenom.Imaging.Color24">
            <summary>Сконвертировать <see cref="T:System.Drawing.Color"/> в <see cref="T:Mallenom.Imaging.Color24"/>.</summary>
            <param name="value">Конвертируемое значение.</param>
            <returns><see cref="T:Mallenom.Imaging.Color24"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.op_Explicit(Mallenom.Imaging.Color24)~System.Drawing.Color">
            <summary>Сконвертировать <see cref="T:Mallenom.Imaging.Color24"/> в <see cref="T:System.Drawing.Color"/>.</summary>
            <param name="value">Конвертируемое значение.</param>
            <returns><see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.op_Inequality(Mallenom.Imaging.Color24,Mallenom.Imaging.Color24)">
            <summary>Tests whether two specified <see cref="T:Mallenom.Imaging.Color24"/> structures are different.</summary>
            <param name="left">The <see cref="T:Mallenom.Imaging.Color24"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Mallenom.Imaging.Color24"/> that is to the right of the inequality operator.</param>
            <returns>true if the two <see cref="T:Mallenom.Imaging.Color24"/> structures are different; otherwise, false.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.op_Equality(Mallenom.Imaging.Color24,Mallenom.Imaging.Color24)">
            <summary>Tests whether two specified <see cref="T:Mallenom.Imaging.Color24"/> structures are equivalent.</summary>
            <param name="left">The <see cref="T:Mallenom.Imaging.Color24"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:Mallenom.Imaging.Color24"/> that is to the right of the equality operator.</param>
            <returns>true if the two <see cref="T:Mallenom.Imaging.Color24"/> structures are equal; otherwise, false.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.ToByteArray">
            <summary>Преобразовать в байтовый массив с порядком элеметов R, G, B.</summary>
            <returns>byte[] { R, G, B }</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.ToReversedByteArray">
            <summary>Преобразовать в байтовый массив с порядком элеметов B, G, R.</summary>
            <returns>byte[] { B, G, R }</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.ToColor">
            <summary>Конвертировать в <see cref="T:System.Drawing.Color"/>.</summary>
            <returns><see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.Color24"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.Color24"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.Equals(System.Object)">
            <summary>Сравнить с другим значением.</summary>
            <param name="obj">Значение 2.</param>
            <returns>true, если <paramref name="obj"/> == this.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.GetHashCode">
            <summary>Returns a hash code for this <see cref="T:Mallenom.Imaging.Color24"/> structure.</summary>
            <returns>An integer value that specifies the hash code for this <see cref="T:Mallenom.Imaging.Color24"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Color24.Equals(Mallenom.Imaging.Color24)">
            <summary>Сравнить с другим значением.</summary>
            <param name="other">Значение 2.</param>
            <returns>true, если <paramref name="other"/> == this.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ColorMatrix">
            <summary>Матрица цветного изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ColorMatrix.ImageDataFormat">
            <summary>Формат данных, используемый данной матрицей для хранения изображения.</summary>
            <value><see cref="M:ImageDataFormat.RGB24"/>.</value>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.LoadFrom(System.String)">
            <summary>Загрузить изображение из файла.</summary>
            <param name="fileName">Имя файла.</param>
             <returns>Матрица с изображением из файла.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.LoadFrom(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток.</param>
             <returns>Матрица.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.LoadFrom(System.Drawing.Bitmap)">
            <summary>Загрузить изображение из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <returns>Загруженная матрица.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.#ctor(System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
            <exception cref="T:System.ArgumentException">Переданы отрицательные размеры.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.#ctor(System.Drawing.Size)">
            <summary>Конструктор.</summary>
            <param name="size">Размер.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.#ctor(Mallenom.Imaging.ImageData)">
            <summary>Конструктор.</summary>
            <param name="imageData">Данные изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.#ctor(Mallenom.Imaging.Matrix)">
            <summary>Конструктор.</summary>
            <param name="matrix">Полутоновая матрица.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.#ctor(Mallenom.Imaging.Color24[],System.Int32,System.Int32)">
            <summary>Создание матрицы указанного размера и заполнение ее указанными данными.</summary>
            <param name="width">Ширина матрицы.</param>
            <param name="height">Высота матрицы.</param>
            <param name="data">Данные для заполнения матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.#ctor(Mallenom.Imaging.Matrix,Mallenom.Imaging.Matrix,Mallenom.Imaging.Matrix)">
            <summary>Конструктор.</summary>
            <param name="r">Красный.</param>
            <param name="g">Зеленый.</param>
            <param name="b">Синий.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="r"/> == null, <paramref name="g"/> == null или <paramref name="b"/> == null.</exception>
            <exception cref="T:System.ArgumentException">Переданы матрицы разных размеров.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetColors(Mallenom.Imaging.Matrix,Mallenom.Imaging.Matrix,Mallenom.Imaging.Matrix)">
            <summary>Разбить на 3 полутоновые матрицы.</summary>
            <param name="r">Красный.</param>
            <param name="g">Зеленый.</param>
            <param name="b">Синий.</param>
            <exception cref="T:System.ArgumentNullException">
            Передан <paramref name="r"/> == <c>null</c>,
            <paramref name="g"/> == <c>null</c> или
            <paramref name="b"/> == <c>null</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetColors(Mallenom.Imaging.Matrix@,Mallenom.Imaging.Matrix@,Mallenom.Imaging.Matrix@)">
            <summary>Разбить на 3 полутоновые матрицы.</summary>
            <param name="r">Красный.</param>
            <param name="g">Зеленый.</param>
            <param name="b">Синий.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetRed(Mallenom.Imaging.Matrix)">
            <summary>Получить матрицу красного компонента.</summary>
            <param name="m">Матрица.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="m"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetGreen(Mallenom.Imaging.Matrix)">
            <summary>Получить матрицу зеленого компонента.</summary>
            <param name="m">Матрица.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="m"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetBlue(Mallenom.Imaging.Matrix)">
            <summary>Получить матрицу синего компонента.</summary>
            <param name="m">Матрица.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="m"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetRed">
            <summary>Получить матрицу красного компонента.</summary>
            <returns>Матрица красного компонента.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetGreen">
            <summary>Получить матрицу зеленого компонента.</summary>
            <returns>Матрица зеленого компонента.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetBlue">
            <summary>Получить матрицу синего компонента.</summary>
            <returns>Матрица синего компонента.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.GetHalftoneMatrix">
            <summary>Получить полутоновую матрицу.</summary>
            <returns>Полутоновая матрица.</returns>
        </member>
        <member name="P:Mallenom.Imaging.ColorMatrix.DataFormat">
            <summary>Формат данных, используемый данной матрицей для хранения изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ColorMatrix.Stride">
            <summary>Смещение до следующей строки пикселей в байтах.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.Load(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Загрузить изображение из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <param name="rect">Регион битмапа.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.Load(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток для загрузки.</param>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="imageFormat">Формат изображения.</param>
            <exception cref="T:System.InvalidOperationException">Матрица пуста.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.Clone(System.Drawing.Rectangle)">
            <summary>Создание нового объекта, который является копией указанной области текущего.</summary>
            <param name="rect">Область копирования.</param>
            <returns>Новый объект, являющийся копией текущего.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.CreateObjectCore">
            <summary>Создание матрицы правильного типа и размера для последующего клонирования в него текущего.</summary>
            <returns>Созданный объект.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ColorMatrix.Clone">
            <summary>Создание нового объекта, который является копией текущего.</summary>
            <returns>Новый объект, являющийся копией текущего.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ImageRenderer">
            <summary>Тип рендерера изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageRenderer.GDI">
            <summary>GDI.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageRenderer.GDIPlus">
            <summary>GDI+.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageRenderer.D3D">
            <summary>Direct3D.</summary>
        </member>
        <member name="T:Mallenom.Imaging.MatrixType">
            <summary>Тип матрицы.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixType.Matrix">
            <summary>Полутоновая матрица.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixType.ColorMatrix">
            <summary>Цветная матрица.</summary>
        </member>
        <member name="T:Mallenom.Imaging.ImageSizeMode">
            <summary>Режим отображения изображения.</summary>	
        </member>
        <member name="F:Mallenom.Imaging.ImageSizeMode.AutoSize">
            <summary>Размер контрола равен размеру изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageSizeMode.Normal">
            <summary>Расположить изображение в левом верхнем углу контрола.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageSizeMode.Center">
            <summary>Расположить изображение в центре контрола.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageSizeMode.Stretch">
            <summary>Растянуть изображения по размеру контрола без сохранения пропорций.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageSizeMode.Zoom">
            <summary>Растянуть изображения по меньшей стороне контрола с сохранение пропорции изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageSizeMode.ZoomFill">
            <summary>Растянуть изображение с сохранением пропорций, заполняя весь контрол.</summary>
            <remarks>Часть изображения может оказаться за пределами контрола.</remarks>
        </member>
        <member name="T:Mallenom.Imaging.TrackerHit">
            <summary>Часть рамки, на которую указывает указатель "мыши".</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.None">
            <summary>Никакая.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.Top">
            <summary>Верхняя.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.Bottom">
            <summary>Нижняя.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.Right">
            <summary>Правая.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.Left">
            <summary>Левая.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.Middle">
            <summary>Средняя.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.TopLeft">
            <summary>Верхний левый угол.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.TopRight">
            <summary>Верхний правый угол.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.BottomLeft">
            <summary>Нижний левый угол.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerHit.BottomRight">
            <summary>Нижний правый угол.</summary>
        </member>
        <member name="T:Mallenom.Imaging.FrameOutline">
            <summary>Способ обрисовки рамки.</summary>
        </member>
        <member name="F:Mallenom.Imaging.FrameOutline.Normal">
            <summary>Рамка как принято в Windows GDI. Левая и верхняя часть внутри области, првая и нижняя за пределами.</summary>
        </member>
        <member name="F:Mallenom.Imaging.FrameOutline.In">
            <summary>Рамка внутри области.</summary>
        </member>
        <member name="F:Mallenom.Imaging.FrameOutline.Out">
            <summary>Рамка снаружи области.</summary>
        </member>
        <member name="T:Mallenom.Imaging.ScrollStyle">
            <summary> Способ скроллинга для <see cref="T:Mallenom.Imaging.ScrollImage"/>. </summary>
        </member>
        <member name="F:Mallenom.Imaging.ScrollStyle.MouseWheel">
            <summary> Только колесиком мыши. </summary>
        </member>
        <member name="F:Mallenom.Imaging.ScrollStyle.MouseButtons">
            <summary> Только кнопками мыши. </summary>
        </member>
        <member name="F:Mallenom.Imaging.ScrollStyle.MouseWheelAndButtons">
            <summary> Кнопками и колесиком мыши. </summary>
        </member>
        <member name="F:Mallenom.Imaging.ScrollStyle.NoScroll">
            <summary> Скроллинг отсутствует. </summary>
        </member>
        <member name="T:Mallenom.Imaging.MatrixEventArgs">
            <summary>Аргументы события, связанного с матрицей.</summary>
        </member>
        <member name="M:Mallenom.Imaging.MatrixEventArgs.#ctor(Mallenom.Imaging.IMatrix)">
            <summary>Конструктор.</summary>
            <param name="matrix">Матрица.</param>
        </member>
        <member name="P:Mallenom.Imaging.MatrixEventArgs.Matrix">
            <summary>Матрица.</summary>
        </member>
        <member name="T:Mallenom.Imaging.TextLabelEventArgs">
            <summary>Аргументы события, связанного с текстовой меткой.</summary>
        </member>
        <member name="M:Mallenom.Imaging.TextLabelEventArgs.#ctor(System.Int32)">
            <summary>Конструктор.</summary>
            <param name="index">Индекс текстовой метки.</param>
        </member>
        <member name="P:Mallenom.Imaging.TextLabelEventArgs.Index">
            <summary>Индекс текстовой метки.</summary>
        </member>
        <member name="T:Mallenom.Imaging.FrameEventArgs">
            <summary>Аргументы события, связанного с рамкой.</summary>
        </member>
        <member name="M:Mallenom.Imaging.FrameEventArgs.#ctor(System.Int32)">
            <summary>Конструктор.</summary>
            <param name="frameIndex">Индекс рамки.</param>
        </member>
        <member name="P:Mallenom.Imaging.FrameEventArgs.FrameIndex">
            <summary>Индекс рамки.</summary>
        </member>
        <member name="T:Mallenom.Imaging.CoordConverter">
            <summary>Конвертер координат.</summary>
        </member>
        <member name="M:Mallenom.Imaging.CoordConverter.#ctor">
            <summary>Создание конвертера.</summary>
        </member>
        <member name="M:Mallenom.Imaging.CoordConverter.#ctor(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>Создание конвертера.</summary>
            <param name="screenRect">Прямоугольник экрана.</param>
            <param name="matrixWidth">Ширина матрицы.</param>
            <param name="matrixHeight">Высота матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.CoordConverter.Update(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>Обновить конвертер.</summary>
            <param name="screenRect">Прямоугольник экрана.</param>
            <param name="matrixWidth">Ширина матрицы.</param>
            <param name="matrixHeight">Высота матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.CoordConverter.ConvertScreenToMatrix(System.Drawing.Point)">
            <summary>Преобразование экранных координат в координаты матрицы.</summary>
            <param name="p">Координаты экрана.</param>
            <returns>Координаты матрицы.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CoordConverter.ConvertScreenToMatrix(System.Drawing.Point,System.Drawing.Point)">
            <summary>Расстояние в пикселах матрицы от точки p1 до p2 в пикселах экрана.</summary>
            <param name="p1">Точка p1.</param>
            <param name="p2">Точка p2.</param>
            <returns>Расстояние.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CoordConverter.ConvertScreenToMatrix(System.Drawing.Rectangle)">
            <summary>Преобразование координат прямоугольника из экранных в матричные.</summary>
            <param name="rect">Прямоугольник в экранных координатах.</param>
            <returns>Прямоугольник в координатах матрицы.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CoordConverter.ConvertMatrixToScreen(Mallenom.Imaging.MatrixPoint,Mallenom.Imaging.TrackerHit)">
            <summary>Преобразование матричных координат в экранные.</summary>
            <param name="p">Координаты точки.</param>
            <param name="hit">Координаты какой стороны пиксела вернуть.</param>
            <returns>Экранные координаты.</returns>
        </member>
        <member name="M:Mallenom.Imaging.CoordConverter.ConvertMatrixToScreen(System.Drawing.Rectangle,Mallenom.Imaging.FrameOutline)">
            <summary></summary>
            <param name="rect">FrameRect.</param>
            <param name="outline"></param>
            <returns></returns>
        </member>
        <member name="T:Mallenom.Imaging.Frame">
            <summary>Рамка на изображении.</summary>
        </member>
        <member name="E:Mallenom.Imaging.Frame.LocationChanged">
            <summary>Генерируется при изменении позиции рамки.</summary>
        </member>
        <member name="E:Mallenom.Imaging.Frame.SizeChanged">
            <summary>Генерируется при изменении размера рамки.</summary>
        </member>
        <member name="E:Mallenom.Imaging.Frame.VisibleChanged">
            <summary>Генерируется при изменении свойства <see cref="P:Mallenom.Imaging.Frame.Visible"/>.</summary>
        </member>
        <member name="E:Mallenom.Imaging.Frame.Paint">
            <summary>Событие - отрисовка рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Visible">
            <summary>Возвращает значение, показывающее, отображать ли рамку на изображении.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.UserPaint">
            <summary>Пользователь сам отвечает за прорисовку рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Text">
            <summary>Подпись рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Location">
            <summary>Позиция рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Size">
            <summary>Размер рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.MinSize">
            <summary>
            Минимальный размер рамки.
            Координаты области указываются в единицах, установленных свойством <see cref="P:Mallenom.Imaging.FrameImage.FramePixel"/>.
            Если равно <see cref="F:System.Drawing.Size.Empty"/>, то минимальный размер (0, 0).
            </summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Rect">
            <summary>Координаты рамки. ReadOnly.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.LineWidth">
            <summary>Толщина линии.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Color">
            <summary>Цвет рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Outline">
            <summary>Способ обрисовки рамки.</summary>
            <value>ПО умолчанию <see cref="F:Mallenom.Imaging.FrameOutline.In"/>.</value>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Specified">
            <summary>Комбинация битов, которая указывает, какие элементы рамки можно перемещать.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.DashStyle">
            <summary>Стиль линии рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Brush">
            <summary>Кисть для закраски внутренненней зоны рамки.</summary>
            <value>Если null, то внутренняя часть рамки не закрашивается.</value>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Locked">
            <summary>Блокировка выделения и перемещения рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.ShowCoords">
            <summary>Показывать координаты рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.RangeRect">
            <summary>
            Прямоугольная область в пределах которой может перемещаться рамка.
            Координаты области указываются в единицах, установленных свойством <see cref="P:Mallenom.Imaging.FrameImage.FramePixel"/>.
            Если равно <see cref="F:System.Drawing.Rectangle.Empty"/>, то область - это все изображение.
            </summary>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Ratio">
            <summary>Возвращает и устанавливает значение, определяющее отношения ширины рамки к высоте.</summary>
            <value>Если отношение не требуется устанавливать, то 0.0.</value>
        </member>
        <member name="P:Mallenom.Imaging.Frame.Tag">
            <summary>Данные определяемые пользователем и ассоциированые с данным объектом.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Frame.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Drawing.Brush,System.Windows.Forms.BoundsSpecified,System.Windows.Forms.BoundsSpecified)">
            <summary>Создание рамки.</summary>
            <param name="rect">Позиция рамки.</param>
            <param name="color">Цвет рамки.</param>
            <param name="lineWidth">Ширина границы рамки.</param>
            <param name="dashStyle">Стиль границы рамки.</param>
            <param name="brush">Кисть для отрисовки фона рамки.</param>
            <param name="showCoords">Показывать координаты рамки.</param>
            <param name="specified">Комбинация битов, которая указывает, какие элементы рамки можно перемещать.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Windows.Forms.BoundsSpecified,System.Windows.Forms.BoundsSpecified)">
            <summary>Создание рамки.</summary>
            <param name="rect">Позиция рамки.</param>
            <param name="color">Цвет рамки.</param>
            <param name="lineWidth">Ширина границы рамки.</param>
            <param name="dashStyle">Стиль границы рамки.</param>
            <param name="showCoords">Показывать координаты рамки.</param>
            <param name="specified">Комбинация битов, которая указывает, какие элементы рамки можно перемещать.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.#ctor(System.Drawing.Rectangle)">
            <summary>Создание рамки.</summary>
            <param name="rect">Позиция рамки.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Создание рамки.</summary>
             <param name="x">X.</param>
             <param name="y">Y.</param>
             <param name="width">Ширина.</param>
             <param name="height">Высота.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>Создание рамки.</summary>
             <param name="x">X.</param>
             <param name="y">Y.</param>
             <param name="width">Ширина.</param>
             <param name="height">Высота.</param>
             <param name="showCoords">Показывать координаты рамки.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>Создание рамки.</summary>
             <param name="x">X.</param>
             <param name="y">Y.</param>
             <param name="width">Ширина.</param>
             <param name="height">Высота.</param>
             <param name="color">Цвет рамки.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Brush,System.Windows.Forms.BoundsSpecified)">
            <summary>Создание рамки.</summary>
             <param name="x">X.</param>
             <param name="y">Y.</param>
             <param name="width">Ширина.</param>
             <param name="height">Высота.</param>
             <param name="color">Цвет рамки.</param>
             <param name="brush">Кисть для отрисовки фона рамки.</param>
             <param name="showCoords">Показывать координаты рамки.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Windows.Forms.BoundsSpecified)">
            <summary>Создание рамки.</summary>
             <param name="x">X.</param>
             <param name="y">Y.</param>
             <param name="width">Ширина.</param>
             <param name="height">Высота.</param>
             <param name="color">Цвет рамки.</param>
             <param name="showCoords">Показывать координаты рамки.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>Установить положение и размер рамки.</summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
            <param name="specified">Комбинация битов, которая указывает, какие элементы рамки можно перемещать.</param>
            <exception cref="T:System.ArgumentException">
            Размер рамки меньше допустимого значения 
            или рамка выходит за границы допустимой области.
            </exception>
        </member>
        <member name="M:Mallenom.Imaging.Frame.SetBoundsUnconstrained(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>Устанавливает размер и положение рамки, не применяя ограничений.</summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
            <param name="specified">Комбинация битов, которая указывает, какие стороны рамки изменены.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Вызывается при отрисовке рамки.</summary>
            <param name="args">Аргументы события отрисовки.</param>
        </member>
        <member name="M:Mallenom.Imaging.Frame.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.Frame"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.Frame"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Frame.Clone">
            <summary>Creates a copy of the <see cref="T:Mallenom.Imaging.Frame"/>.</summary>
            <returns>A copy of the <see cref="T:Mallenom.Imaging.Frame"/>.</returns>
        </member>
        <member name="T:Mallenom.Imaging.FrameCollection">
            <summary>Коллекция рамок. Может быть создана только классом <see cref="T:Mallenom.Imaging.FrameImage"/>.</summary>
            <threadsafe>Потокобезопасна.</threadsafe>
        </member>
        <member name="E:Mallenom.Imaging.FrameCollection.FrameChanged">
            <summary>Изменились параметры одной из рамок.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameCollection.Item(System.Int32)">
            <summary>Получит рамку по индексу.</summary>
            <param name="index">Индекс.</param>
            <returns>Рамка.</returns>
        </member>
        <member name="M:Mallenom.Imaging.FrameCollection.Add(Mallenom.Imaging.Frame,System.Boolean)">
            <summary>Добавить рамку.</summary>
            <param name="item">Рамка.</param>
            <param name="locked">Блокировать перемещение и измнеение размеров рамки.</param>
        </member>
        <member name="M:Mallenom.Imaging.FrameCollection.ClearItems">
            <summary>Очистить коллекцию рамок.</summary>
        </member>
        <member name="M:Mallenom.Imaging.FrameCollection.InsertItem(System.Int32,Mallenom.Imaging.Frame)">
            <summary>Вставить рамку в коллекцию.</summary>
            <param name="index">Индекс рамки.</param>
            <param name="item">Рамка.</param>
        </member>
        <member name="M:Mallenom.Imaging.FrameCollection.RemoveItem(System.Int32)">
            <summary>Удалить рамку из коллекции.</summary>
            <param name="index">Индекс рамки.</param>
        </member>
        <member name="M:Mallenom.Imaging.FrameCollection.SetItem(System.Int32,Mallenom.Imaging.Frame)">
            <summary>Заменить рамку в коллекции.</summary>
            <param name="index">Индекс рамки.</param>
            <param name="item">Рамка.</param>
        </member>
        <member name="F:Mallenom.Imaging.Interval.Left">
            <summary>Левая граница интервала.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Interval.Right">
            <summary>Правая граница интервала.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Interval.Center">
            <summary>Середина интервала.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Scale.Convert(System.Int32,System.Int32,System.Int32)">
            <summary></summary>
            <param name="value"></param>
            <param name="fromRange"></param>
            <param name="toRange"></param>
            <returns></returns>
        </member>
        <member name="T:Mallenom.Imaging.IImageMatrix">
            <summary>Интерфейс матрицы изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IImageMatrix.ImageFormat">
            <summary>
            Формат изображения, записываемого и считывемого функциями <see cref="M:Mallenom.Imaging.IImageMatrix.Save(System.IO.Stream)"/>,
            <see cref="M:Mallenom.Imaging.IImageMatrix.Save(System.String)"/>, <see cref="M:Mallenom.Imaging.IImageMatrix.Load(System.IO.Stream)"/> и <see cref="M:Mallenom.Imaging.IImageMatrix.Load(System.String)"/> (get, set).
            </summary>
            <remarks>По умолчанию <see cref="M:System.Drawing.Imaging.ImageFormat.Bmp"/>.</remarks>
        </member>
        <member name="P:Mallenom.Imaging.IImageMatrix.DataFormat">
            <summary>Формат данных, используемый данной матрицей для хранения изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.LockData">
            <summary>Получить доступ к данным изображения.</summary>
            <returns>Структура <see cref="T:Mallenom.Imaging.ImageData"/>, описывающая изображение.</returns>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.LockData(System.Drawing.Rectangle)">
            <summary>Получить доступ к данным области изображения.</summary>
            <param name="rect">Прямоугольная область, к которой производится доступ.</param>
            <returns>Структура <see cref="T:Mallenom.Imaging.ImageData"/>, описывающая изображение.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rect"/> выходит за пределы изображения.</exception>
            <exception cref="T:NotSupportedException">Матрица не поддерживает доступ к части изображения.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.UnlockData(Mallenom.Imaging.ImageData)">
            <summary>Завершить обращение к данным изображения.</summary>
            <param name="data">Структура, полученная вызовом <see cref="M:Mallenom.Imaging.IImageMatrix.LockData"/> или <see cref="M:Mallenom.Imaging.IImageMatrix.LockData(System.Drawing.Rectangle)"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> == null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="data"/> не был получен вызовом <see cref="M:Mallenom.Imaging.IImageMatrix.LockData"/> или <see cref="M:Mallenom.Imaging.IImageMatrix.LockData(System.Drawing.Rectangle)"/>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.Load(System.Drawing.Bitmap)">
            <summary>Загрузить данные из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.Load(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Загрузить данные из прямоугольной области битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <param name="rect">Область битмапа.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rect"/> выходит за пределы изображения <paramref name="bitmap"/>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.Load(System.IO.Stream)">
            <summary>Загрузить данные из потока.</summary>
            <param name="stream">Поток.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.Load(System.String)">
            <summary>Загрузить данные из файла.</summary>
            <param name="fileName">Имя файла.</param>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.Save(System.IO.Stream)">
            <summary>Сохранить данные в поток.</summary>
            <param name="stream">Поток.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="imageFormat">Формат изображения.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.Save(System.String)">
            <summary>Сохранить данные в файл.</summary>
            <param name="fileName">Имя файла.</param>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.Save(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить данные в файл.</summary>
            <param name="fileName">Имя файла.</param>
            <param name="imageFormat">Формат изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.CreateBitmap">
            <summary>Создать битмап по данным матрицы.</summary>
            <returns>Созданный битмап.</returns>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.CreateBitmap(System.Drawing.Rectangle)">
            <summary>Создать битмап по данным области матрицы.</summary>
            <param name="rect">Область матрицы.</param>
            <returns>Созданный битмап.</returns>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.FillBitmap(System.Drawing.Bitmap)">
            <summary>Заполнить битмап данными из матрицы.</summary>
            <param name="bitmap">Битмап.</param>
            <returns>true - битмап заполнен, false - неверный формат битмапа, необходимо создать новый с помощью <see cref="M:Mallenom.Imaging.IImageMatrix.CreateBitmap"/>.</returns>
        </member>
        <member name="M:Mallenom.Imaging.IImageMatrix.FillBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Заполнить битмап данными области матрицы.</summary>
            <param name="bitmap">Битмап.</param>
            <param name="rect">Область матрицы.</param>
            <returns>true - битмап заполнен, false - неверный формат битмапа, необходимо создать новый с помощью <see cref="M:Mallenom.Imaging.IImageMatrix.CreateBitmap(System.Drawing.Rectangle)"/>.</returns>
        </member>
        <member name="T:Mallenom.Imaging.ImageMatrix`1">
            <summary>Базовый класс матрицы изображения.</summary>
            <typeparam name="T">Тип элемента матрицы.</typeparam>
        </member>
        <member name="F:Mallenom.Imaging.ImageMatrix`1.DefaultImageFormat">
            <summary>Формат изображения по умолчанию.</summary>
        </member>
        <member name="F:Mallenom.Imaging.ImageMatrix`1._imageFormat">
            <summary>
            Формат изображения, записываемого и считывемого функциями
            <see cref="M:Mallenom.Imaging.ImageMatrix`1.Save(System.String)"/>, <see cref="M:Mallenom.Imaging.ImageMatrix`1.Save(System.IO.Stream)"/> 
            и <see cref="M:Mallenom.Imaging.ImageMatrix`1.Load(System.String)"/>, <see cref="M:Mallenom.Imaging.ImageMatrix`1.Save(System.IO.Stream)"/> (get, set).
            </summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.#ctor(Mallenom.Imaging.ImageData)">
            <summary>Конструктор.</summary>
            <param name="imageData">Данные изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.#ctor(System.Drawing.Size)">
            <summary>Конструктор.</summary>
            <param name="size">Размер матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.#ctor(System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
            <exception cref="T:System.ArgumentException">Переданы отрицательные размеры.</exception>
        </member>
        <member name="P:Mallenom.Imaging.ImageMatrix`1.ImageFormat">
            <summary>
            Формат изображения, записываемого и считывемого функциями <see cref="M:Mallenom.Imaging.ImageMatrix`1.Save(System.IO.Stream)"/>,
            <see cref="M:Mallenom.Imaging.ImageMatrix`1.Save(System.String)"/>, <see cref="M:Mallenom.Imaging.ImageMatrix`1.Load(System.IO.Stream)"/> и <see cref="M:Mallenom.Imaging.ImageMatrix`1.Load(System.String)"/> (get, set).
            </summary>
            <remarks>По умолчанию <see cref="M:System.Drawing.Imaging.ImageFormat.Bmp"/>.</remarks>
        </member>
        <member name="P:Mallenom.Imaging.ImageMatrix`1.DataFormat">
            <summary>Формат данных, используемый данной матрицей для хранения изображения.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.GetBitmapFormat">
            <summary>Возвращает формат битмапа.</summary>
            <returns>Формат битмапа.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.CreateBitmapCore(System.Int32,System.Int32)">
            <summary>Создать подходящий битмап для матрицы.</summary>
            <param name="width">Ширина битмапа.</param>
            <param name="height">Высота битмапа.</param>
            <returns>Созданный битмап.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.CreateBitmap">
            <summary>Создать битмап из матрицы.</summary>
            <returns>Созданный битмап.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.CreateBitmap(System.Drawing.Rectangle)">
            <summary>Создать битмап из матрицы.</summary>
            <param name="rect">Область, копируемая в битмап.</param>
            <returns>Созданный битмап.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.FillBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Заполнить битмап данными матрицы.</summary>
            <param name="bitmap">Заполняемый битмап.</param>
            <param name="rect">Область с данными.</param>
            <returns>true, если битмап был заполнен.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.FillBitmap(System.Drawing.Bitmap)">
            <summary>Заполнить битмап данными матрицы.</summary>
            <param name="bitmap">Заполняемый битмап.</param>
            <returns>true, если битмап был заполнен.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.LockData">
            <summary>Получить доступ к данным изображения.</summary>
            <returns>Структура <see cref="T:Mallenom.Imaging.ImageData"/>, описывающая изображение.</returns>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.LockData(System.Drawing.Rectangle)">
            <summary>Получить доступ к данным области изображения.</summary>
            <param name="rect">Прямоугольная область, к которой производится доступ.</param>
            <returns>Структура <see cref="T:Mallenom.Imaging.ImageData"/>, описывающая изображение.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rect"/> выходит за пределы изображения.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.UnlockData(Mallenom.Imaging.ImageData)">
            <summary>Завершить обращение к данным изображения.</summary>
            <param name="data">Структура, полученная вызовом <see cref="M:Mallenom.Imaging.ImageMatrix`1.LockData"/> или <see cref="M:Mallenom.Imaging.ImageMatrix`1.LockData(System.Drawing.Rectangle)"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> == null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="data"/> не был получен вызовом <see cref="M:Mallenom.Imaging.ImageMatrix`1.LockData"/> или <see cref="M:Mallenom.Imaging.ImageMatrix`1.LockData(System.Drawing.Rectangle)"/>.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.Load(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Загрузить изображение из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <param name="rect">Регион битмапа.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.Load(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток для загрузки.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.Load(System.Drawing.Bitmap)">
            <summary>Загрузить изображение из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.Load(System.String)">
            <summary>Загрузить изображение из файла.</summary>
            <param name="fileName">Имя файла.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.Save(System.IO.Stream)">
            <summary>Сохранить данные в поток.</summary>
            <param name="stream">Поток.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">Матрица пуста.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="imageFormat">Формат изображения.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">Матрица пуста.</exception>
            <exception cref="T:System.NotSupportedException">Формат не поддерживается.</exception>.
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.Save(System.String)">
            <summary>Сохранить данные в файл.</summary>
            <param name="fileName">Имя файла.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.Save(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить данные в файл.</summary>
            <param name="fileName">Имя файла.</param>
            <param name="imageFormat">Формат изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.CopyToWithConversion(Mallenom.Imaging.IMatrix)">
            <summary>Скопировать содержимое в матрицу другого типа с конверсией данных.</summary>
            <param name="matrix">Заполняемая матрица.</param>
            <exception cref="T:System.NotSupportedException">Тип целевой матрицы не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.CopyToWithConversion(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle)">
            <summary>Скопировать содержимое в матрицу другого типа с конверсией данных.</summary>
            <param name="matrix">Заполняемая матрица.</param>
            <param name="srcRect">Копируемая область.</param>
            <exception cref="T:System.NotSupportedException">Тип целевой матрицы не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.ImageMatrix`1.CopyToWithConversion(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>Копирование содержимого области матрицы в указанную область другой матрицы.</summary>
            <param name="matrix">Матрица, в которую происходит копирование. Ее размер не изменяется.</param>
            <param name="srcRect">Область которую необходимо скопировать из исходной матрицы.</param>
            <param name="destX">Координата X левого верхнего угла области, в которую необходимо произвести копирование.</param>
            <param name="destY">Координата Y левого верхнего угла области, в которую необходимо произвести копирование.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="srcRect"/>, <paramref name="destX"/> или <paramref name="destY"/> выходят за пределы изображения.</exception>
            <exception cref="T:System.NotSupportedException">Тип целевой матрицы не поддерживается.</exception>
        </member>
        <member name="T:Mallenom.Imaging.IMatrix">
            <summary>Интерфейс матрицы.</summary>
        </member>
        <member name="E:Mallenom.Imaging.IMatrix.SizeChanged">
            <summary>Событие - размер матрицы изменен.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix.Width">
            <summary>Ширина.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix.Height">
            <summary>Высота.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix.Stride">
            <summary>Смещение до следующей строки пикселей в байтах.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix.Size">
            <summary>Размер.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix.IsEmpty">
            <summary>Матрица пуста.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix.ElementType">
            <summary>Тип элемента матрицы.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix.DataArray">
            <summary>Массив элементов матрицы.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix.Clear">
            <summary>Очистить матрицу.</summary>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix.Clear(System.Drawing.Rectangle)">
            <summary>Очистить часть матрицы.</summary>
            <param name="rect">Очищаемая область.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rect"/> выходит за пределы изображения.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix.Resize(System.Int32,System.Int32)">
            <summary>Изменить размер матрицы.</summary>
            <param name="width">Ширина.</param>
            <param name="height">Высота.</param>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix.Resize(System.Drawing.Size)">
            <summary>Изменить размер матрицы.</summary>
            <param name="size">Размер матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix.BinaryCompare(Mallenom.Imaging.IMatrix)">
            <summary>Сравнить содержимое с другой матрицей.</summary>
            <param name="matrix">Матрица для сравнения.</param>
            <returns>true, если содержимое матриц идентично.</returns>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix.CopyTo(Mallenom.Imaging.IMatrix)">
            <summary>Скопировать содержимое в другую матрицу.</summary>
            <param name="matrix">Заполняемая матрица.</param>
            <remarks>Размеры матрицы будут привыедены к размерам копируемой.</remarks>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
            <exception cref="T:System.NotSupportedException">Тип целевой матрицы не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix.CopyTo(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle)">
            <summary>Скопировать содержимое области в другую матрицу.</summary>
            <param name="matrix">Заполняемая матрица.</param>
            <param name="srcRect">Копируемая область.</param>
            <remarks>Размеры матрицы будут привыедены к размерам копируемой.</remarks>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
            <exception cref="T:System.NotSupportedException">Тип целевой матрицы не поддерживается.</exception>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix.CopyTo(Mallenom.Imaging.IMatrix,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>Копирование содержимого области матрицы в указанную область другой матрицы.</summary>
            <param name="matrix">Матрица, в которую происходит копирование. Ее размер не изменяется.</param>
            <param name="srcRect">Область которую необходимо скопировать из исходной матрицы.</param>
            <param name="destX">Координата X левого верхнего угла области, в которую необходимо произвести копирование.</param>
            <param name="destY">Координата Y левого верхнего угла области, в которую необходимо произвести копирование.</param>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="matrix"/> == null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="srcRect"/>, <paramref name="destX"/> или <paramref name="destY"/> выходят за пределы изображения.</exception>
            <exception cref="T:System.NotSupportedException">Тип целевой матрицы не поддерживается.</exception>
        </member>
        <member name="T:Mallenom.Imaging.IMatrix`1">
            <summary>Интерфейс матрицы.</summary>
            <typeparam name="T">Тип элемента.</typeparam>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix`1.Data">
            <summary>Массив пикселей изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.IMatrix`1.Item(System.Int32,System.Int32)">
            <summary>Пиксель изображения.</summary>
            <param name="x">Координата x.</param>
            <param name="y">Координата y.</param>
            <returns>Пиксель изображения.</returns>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix`1.GetPixel(System.Int32,System.Int32)">
            <summary>Получить цвет пикселя.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
            <returns>Значение цвета пикселя.</returns>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix`1.SetPixel(System.Int32,System.Int32,`0)">
            <summary>Установить значение пикселя.</summary>
            <param name="x">Координата X.</param>
            <param name="y">Координата Y.</param>
            <param name="color">Цвет пикселя.</param>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix`1.Fill(`0)">
            <summary>Заполнить матрицу цветом.</summary>
            <param name="color">Цвет.</param>
        </member>
        <member name="M:Mallenom.Imaging.IMatrix`1.Fill(`0,System.Drawing.Rectangle)">
            <summary>Заполнить область матрицы цветом.</summary>
            <param name="color">Цвет.</param>
            <param name="rect">Заполняемая область.</param>
        </member>
        <member name="T:Mallenom.Imaging.FramePixel">
            <summary>Дискретность позиционирования рамок.</summary>
        </member>
        <member name="F:Mallenom.Imaging.FramePixel.Screen">
            <summary>С точностью до пиксела экрана.</summary>
        </member>
        <member name="F:Mallenom.Imaging.FramePixel.Matrix">
            <summary>С точностью до разрешения матрицы.</summary>
        </member>
        <member name="T:Mallenom.Imaging.TrackerDrawMode">
            <summary>Способ отображения трекера - рамки перемещения или изменения размеров.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerDrawMode.Normal">
            <summary>Обычный.</summary>
        </member>
        <member name="F:Mallenom.Imaging.TrackerDrawMode.Fast">
            <summary>Быстрый.</summary>
        </member>
        <member name="T:Mallenom.Imaging.FrameImage">
            <summary>Контрол для отображения видео с рамками.</summary>
        </member>
        <member name="E:Mallenom.Imaging.FrameImage.SelectingFrameIndexChanged">
            <summary>Вызывается перед выбором рамки. Возвращает номер рамки, с котрой убирается выделение.</summary>
        </member>
        <member name="E:Mallenom.Imaging.FrameImage.SelectedFrameIndexChanged">
            <summary>Вызывается после выбора рамки. Возвращает номер выбранной рамки.</summary>
        </member>
        <member name="E:Mallenom.Imaging.FrameImage.SelectedFramePositionChanged">
            <summary>Генерируется после изменения положения или размера рамки.</summary>
        </member>
        <member name="F:Mallenom.Imaging.FrameImage._frameValidation">
            <summary> Проверка фреймов на то, выходят ли они за рамки матрицы. </summary>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.FramesVisible">
            <summary>Показывать рамки на изображении (set, get).</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.FramePixel">
            <summary>Метод позиционирования рамки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.SelectionColor">
            <summary>Цвет рамки выделения (set, get).</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.SelectionPenWidth">
            <summary>Ширина карандаша рамки выделения (set, get).</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.MarkerSize">
            <summary>Размер маркера выделения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.FrameValidation">
            <summary>Размер маркера выделения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.TrackerDrawMode">
            <summary>Способ отображения трекера.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.SelectedFrameIndex">
            <summary>Индекс выбранной рамки (set, get). Если ни одна рамка не выбрана, то -1.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.SelectedFrame">
            <summary>Выбранная рамка. Если ни одна рамка не выбрана, то null.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.Frames">
            <summary>Список рамок.</summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.FrameUpdate">
            <summary>
             Обновлять ли изображения рамок после добавления, удаления
             или изменения позиции и размеров.
             </summary>
        </member>
        <member name="P:Mallenom.Imaging.FrameImage.CoordsFont">
            <summary>Шрифт для отображения координат рамок.</summary>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.GetRenderer(Mallenom.Imaging.ImageRenderer)">
            <summary>Создать подходящий рендерер.</summary>
            <param name="renderer">Тип рендерера.</param>
            <returns>Созданный рендерер.</returns>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.OnSelectingFrameIndexChanged(Mallenom.Imaging.FrameEventArgs)">
            <summary></summary>
            <param name="args"></param>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.OnSelectedFrameIndexChanged(Mallenom.Imaging.FrameEventArgs)">
            <summary></summary>
            <param name="args"></param>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.HitTestFrame(System.Drawing.Point)">
            <summary>Возвращает рамку, в которую попадает указанная точка.</summary>
            <param name="p">Экранные координаты точки.</param>
            <returns>null, если точка не попадает не в одну рамку.</returns>
        </member>
        <member name="M:Mallenom.Imaging.FrameImage.OnChangeFrameCollection">
            <summary></summary>
        </member>
        <member name="T:Mallenom.Imaging.Matrix">
            <summary>Контейнер для хранения двумерного массива полутоновых пикселей.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Matrix.MinValue">
            <summary>Минимальное значение, которое может быть помещено в <see cref="T:Mallenom.Imaging.Matrix"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Matrix.MaxValue">
            <summary>Максимальное значение, которое может быть помещено в <see cref="T:Mallenom.Imaging.Matrix"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Matrix._palette">
            <summary>Палитра.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Matrix.ImageDataFormat">
            <summary>Формат данных, используемый данной матрицей для хранения изображения.</summary>
            <value><see cref="M:ImageDataFormat.Y8"/>.</value>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.LoadFrom(System.String)">
            <summary>Загрузить изображение из файла.</summary>
            <param name="fileName">Имя файла.</param>
            <returns>Матрица с изображением из файла.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.LoadFrom(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток.</param>
            <returns>Матрица с изображением из потока.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.LoadFrom(System.Drawing.Bitmap)">
            <summary>Загрузить изображение из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <returns>Загруженная матрица.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.#ctor">
            <summary>Создание матрицы размером 0x0.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>Создание матрицы указанного размера.</summary>
            <param name="width">Ширина матрицы.</param>
            <param name="height">Высота матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.#ctor(Mallenom.Imaging.ImageData)">
            <summary>Создание <see cref="T:Mallenom.Imaging.Matrix"/>.</summary>
            <param name="imageData">Данные изображения.</param>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>Создание матрицы указанного размера и заполнение ее указанными данными.</summary>
            <param name="width">Ширина матрицы.</param>
            <param name="height">Высота матрицы.</param>
            <param name="data">Данные для заполнения матрицы.</param>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="bitmap"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.#ctor(System.Drawing.Bitmap)">
            <summary></summary>
            <param name="bitmap"></param>
        </member>
        <member name="P:Mallenom.Imaging.Matrix.DataFormat">
            <summary>Формат данных, используемый данной матрицей для хранения изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Matrix.Stride">
            <summary>Смещение до следующей строки пикселей в байтах.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.Load(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Загрузить изображение из битмапа.</summary>
            <param name="bitmap">Битмап.</param>
            <param name="rect">Регион битмапа.</param>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.Load(System.IO.Stream)">
            <summary>Загрузить изображение из потока.</summary>
            <param name="stream">Поток для загрузки.</param>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>Сохранить данные в поток.</summary>
            <param name="stream">Поток.</param>
            <param name="imageFormat">Формат изображения.</param>
            <exception cref="T:System.InvalidOperationException">Матрица пуста.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> == null.</exception>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.CreatePalette">
            <summary>Создает и возвращает палитру.</summary>
            <returns>Палитра.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.FillBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>Заполнить битмап данными матрицы.</summary>
            <param name="bitmap">Заполняемый битмап.</param>
            <param name="srcRect">Копируемый участок.</param>
            <returns>true, если битмап был заполнен.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.Clone(System.Drawing.Rectangle)">
            <summary>Создание нового объекта, который является копией указанной области текущего.</summary>
            <param name="rect">Область копирования.</param>
            <returns>Новый объект, являющийся копией текущего.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Генерируется, если границы области выходят за пределы исходной матрицы.</exception>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.CreateObjectCore">
            <summary>Создание матрицы правильного типа и размера для последующего клонирования в него текущего.</summary>
            <returns>Созданный объект.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Matrix.Clone">
            <summary>Создание нового объекта, который является копией текущего.</summary>
            <returns>Новый объект, являющийся копией текущего.</returns>
            <remarks>Создание "глубокой" копии.</remarks>
        </member>
        <member name="T:Mallenom.Imaging.MatrixPoint">
            <summary>Координаты точки в пикселах изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixPoint.X">
            <summary>X.</summary>
        </member>
        <member name="F:Mallenom.Imaging.MatrixPoint.Y">
            <summary>Y.</summary>
        </member>
        <member name="M:Mallenom.Imaging.MatrixPoint.#ctor(System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
        </member>
        <member name="T:Mallenom.Imaging.Tracker">
            <summary>Вспомогательный класс для перемещения рамок на <see cref="T:Mallenom.Imaging.FrameImage"/>.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Tracker._frameRect">
            <summary>Текущее положение трекера в пикселах изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Tracker._matrixRange">
            <summary>Область, в которой может перемещаться трекер в пикселах изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Tracker._minSize">
            <summary>Минимальные размеры трекера в пикселах изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Tracker._startPoint">
            <summary>Точка в пикселах экрана, в которой находился указатель мыши, когда пользователь нажал кнопку.</summary>
        </member>
        <member name="F:Mallenom.Imaging.Tracker._startRect">
            <summary>Начальная позиция трекера в пикселах экрана.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Tracker.FrameRect">
            <summary>Рамка трекера в координатах матрицы изображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Tracker.Changed">
            <summary>Позиция рамки трекера были изменена.</summary>
        </member>
        <member name="P:Mallenom.Imaging.Tracker.Tracking">
            <summary>Показывает, происходит ли процесс трекинга.</summary>
        </member>
        <member name="M:Mallenom.Imaging.Tracker.StartTrack(System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Size,System.Windows.Forms.BoundsSpecified,Mallenom.Imaging.FrameOutline,System.Double)">
            <summary>Начинаем перемещать трекер.</summary>
            <param name="frameRect">Текущее положение рамки в коодинатах изображения.</param>
            <param name="specified">Ограничения по перемещению рамки.</param>
            <param name="range">
            Область в пределах которой может перемещаться рамка.
            Если равно <see cref="F:System.Drawing.Rectangle.Empty"/>, то область - это все изображение.
            </param>
            <param name="minSize">Минимальный размер рамки трекера.</param>
            <param name="mousePoint">Точка начала перемещения (курсор мыши).</param>
            <param name="outline"></param>
            <param name="ratio">Отношение ширины к высоте.</param>
            <returns>Тип курсора.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Tracker.FixMinSize(System.Drawing.Size,System.Double)">
            <summary>Возвращает актуальный минимальный размер рамки.</summary>
            <param name="size">Минимальный размер рамки.</param>
            <param name="ratio">Ограничение на соотношение сторон.</param>
            <returns>Актуальный минимальный размер рамки.</returns>
            <remarks>
            Если для рамки установлено соотношение сторон и минимальный размер, то на
            минимальный размер может быть наложено дополнительное ограничение.
            </remarks>
        </member>
        <member name="M:Mallenom.Imaging.Tracker.GetCursor(System.Drawing.Point,Mallenom.Imaging.Frame)">
            <summary></summary>
            <param name="p">Экранные координаты точки.</param>
            <param name="frame">Рамка.</param>
            <returns>Тип курсора.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Tracker.MoveTrack(System.Drawing.Point)">
            <summary>Перемещение трекера.</summary>
            <param name="mousePoint">"Экранные координаты курсора "мыши".</param>
        </member>
        <member name="M:Mallenom.Imaging.Tracker.StopTrack">
            <summary>Вызывается после отжатия кнопки мыши.</summary>
            <returns>Новые координаты рамки.</returns>
        </member>
        <member name="M:Mallenom.Imaging.Tracker.HitTest(System.Drawing.Point,Mallenom.Imaging.Frame)">
            <summary>Проверка на попадание указанной точки в рамку.</summary>
            <param name="p">Экранные координаты точки.</param>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="M:Mallenom.Imaging.Tracker.HitTest(System.Drawing.Point,System.Drawing.Rectangle,System.Windows.Forms.BoundsSpecified)">
            <summary></summary>
            <param name="p">Экранные координаты точки.</param>
            <param name="frect">Координаты рамки в разрешении матрицы.</param>
            <param name="specified"></param>
            <returns></returns>
        </member>
        <member name="T:Mallenom.Imaging.ScrollImage">
            <summary>
            Контрол для вывода изображения с возможностями его прокрутки и масштабирования.
            </summary>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ScrollImage.MinimumZoomSize">
            <summary>Минимальный размер области, которую можно увеличить.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ScrollImage.MatrixRectPosition">
            <summary>Положение прямоуголника маштаба.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ScrollImage.Scale">
            <summary>Текущий масштаб.</summary>
        </member>
        <member name="P:Mallenom.Imaging.ScrollImage.ScrollStyle">
            <summary>Стиль скроллинга.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.SetScaleRectParam(System.Drawing.Rectangle,System.Int32)">
            <summary>Установить прямоугольник отображения.</summary>
            <param name="rect"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.ZoomOut">
            <summary>Уменьшить изображение (если оно было предварительно увеличено) на 1 шаг.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.ZoomIn">
            <summary>Увеличить изображение (если оно было предварительно увеличено) на 1 шаг.</summary>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
            <param name="args"></param>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.OnMatrixChanged(Mallenom.Imaging.MatrixEventArgs)">
            <summary>
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Mallenom.Imaging.ScrollImage.OnResize(System.EventArgs)">
            <summary>Вызывается при изменении размеров контрола.</summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="T:Mallenom.Imaging.TextLabel">
            <summary>Текстовая метка.</summary>
        </member>
        <member name="E:Mallenom.Imaging.TextLabel.Changed">
            <summary>Событие - параметры метки измнены.</summary>
        </member>
        <member name="M:Mallenom.Imaging.TextLabel.#ctor(System.String,System.Drawing.Rectangle)">
            <summary>Конструктор.</summary>
            <param name="text">Текст метки.</param>
            <param name="bounds">Положение метки.</param>
        </member>
        <member name="M:Mallenom.Imaging.TextLabel.OnChanged">
            <summary>Вызывается при изменении параметров метки.</summary>
        </member>
        <member name="M:Mallenom.Imaging.TextLabel.GetStringFormat">
            <summary>Получить описание формата для отрисовки метки.</summary>
            <returns><see cref="T:System.Drawing.StringFormat"/></returns>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.Text">
            <summary>Текст метки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.Bounds">
            <summary>Положение метки.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.Alignment">
            <summary>Горизонтальное выравнивание.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.LineAlignment">
            <summary>Вертикальное выравнивание.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.FormatFlags">
            <summary>Дополнительные флаги отображения.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.Anchor">
            <summary>Привязка к сторонам контрола <see cref="T:Mallenom.Imaging.Image"/>.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.Font">
            <summary>Шрифт.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.Color">
            <summary>Цвет.</summary>
        </member>
        <member name="P:Mallenom.Imaging.TextLabel.Visible">
            <summary>Видимость.</summary>
        </member>
        <member name="M:Mallenom.Imaging.TextLabel.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.TextLabel"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Imaging.TextLabel"/>.</returns>
        </member>
        <member name="T:Mallenom.Imaging.VideoImage">
            <summary>Контрол для отображения видео.</summary>
        </member>
        <member name="E:Mallenom.Imaging.VideoImage.FPSVisibleChanged">
            <summary>Значение свойства FPSVisible изменено.</summary>
        </member>
        <member name="E:Mallenom.Imaging.VideoImage.FPSFontChanged">
            <summary>Значение свойства FPSFont изменено.</summary>
        </member>
        <member name="E:Mallenom.Imaging.VideoImage.FPSColor1Changed">
            <summary>Значение свойства FPSColor1 изменено.</summary>
        </member>
        <member name="E:Mallenom.Imaging.VideoImage.FPSColor2Changed">
            <summary>Значение свойства FPSColor2 изменено.</summary>
        </member>
        <member name="M:Mallenom.Imaging.VideoImage.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Imaging.VideoImage.GetRenderer(Mallenom.Imaging.ImageRenderer)">
            <summary>Создать подходящий рендерер.</summary>
            <param name="renderer">Тип рендерера.</param>
            <returns>Созданный рендерер.</returns>
        </member>
        <member name="P:Mallenom.Imaging.VideoImage.FPSVisible">
            <summary>Показывать FPS.</summary>
        </member>
        <member name="P:Mallenom.Imaging.VideoImage.FPSFont">
            <summary>Шрифт надписи FPS.</summary>
        </member>
        <member name="P:Mallenom.Imaging.VideoImage.FPSColor1">
            <summary>Цвет надписи FPS.</summary>
        </member>
        <member name="P:Mallenom.Imaging.VideoImage.FPSColor2">
            <summary>Цвет надписи FPS.</summary>
        </member>
        <member name="T:Mallenom.Imaging.WindowMatrix`1">
            <summary>Окно изображения.</summary>
        </member>
        <member name="F:Mallenom.Imaging.WindowMatrix`1._matrix">
            <summary>Изображение.</summary>
        </member>
        <member name="F:Mallenom.Imaging.WindowMatrix`1._x">
            <summary>Положение окна.</summary>
        </member>
        <member name="F:Mallenom.Imaging.WindowMatrix`1._width">
            <summary>Размер окна.</summary>
        </member>
        <member name="M:Mallenom.Imaging.WindowMatrix`1.#ctor(Mallenom.Imaging.IMatrix{`0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="matrix">Базовая матрица.</param>
            <param name="x">Положение окна на базовой маитрице.</param>
            <param name="y">Положение окна на базовой маитрице.</param>
            <param name="width">Ширина окна.</param>
            <param name="height">Высота окна.</param>
        </member>
        <member name="M:Mallenom.Imaging.WindowMatrix`1.#ctor(Mallenom.Imaging.IMatrix{`0},System.Int32,System.Int32)">
            <summary>Конструктор. Начальные коррдинаты окна (0, 0).</summary>
            <param name="matrix">Базовая матрица.</param>
            <param name="width">Ширина окна.</param>
            <param name="heigth">Высота окна.</param>
        </member>
        <member name="P:Mallenom.Imaging.WindowMatrix`1.Item(System.Int32,System.Int32)">
            <summary>Доступ к пикселу изображения (get).</summary>
        </member>
        <member name="P:Mallenom.Imaging.WindowMatrix`1.X">
            <summary>Доступ к координате X окна (get, set).</summary>
        </member>
        <member name="P:Mallenom.Imaging.WindowMatrix`1.Y">
            <summary>Доступ к координате Y окна (get, set).</summary>
        </member>
        <member name="P:Mallenom.Imaging.WindowMatrix`1.Width">
            <summary>Доступ к ширине окна (get).</summary>
        </member>
        <member name="P:Mallenom.Imaging.WindowMatrix`1.Height">
            <summary>Доступ к высоте окна (get).</summary>
        </member>
        <member name="T:Native.Constants">
            <summary>Константы для native-функций.</summary>
        </member>
        <member name="F:Native.Constants.INVALID_HANDLE_VALUE">
            <summary>Invalid handle value.</summary>
        </member>
        <member name="F:Native.Constants.HWND_BOTTOM">
            <summary>
            Places the window at the bottom of the Z order.
            If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.
            </summary>
        </member>
        <member name="F:Native.Constants.HWND_NOTOPMOST">
            <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows).
            This flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:Native.Constants.HWND_TOP">
            <summary>Places the window at the top of the Z order.</summary>
        </member>
        <member name="F:Native.Constants.HWND_TOPMOST">
            <summary>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.</summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_NONE">
            <summary>
            Prevents other processes from opening a file or device if they request delete, read, or write access.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_READ">
            <summary>
            Enables subsequent open operations on a file or device to request read access.
            Otherwise, other processes cannot open the file or device if they request read access.
            If this flag is not specified, but the file or device has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_WRITE">
            <summary>
            Enables subsequent open operations on a file or device to request write access.
            Otherwise, other processes cannot open the file or device if they request write access.
            If this flag is not specified, but the file or device has been opened for write access or has a file mapping with write access, the function fails.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_DELETE">
            <summary>
            Enables subsequent open operations on a file or device to request delete access.
            Otherwise, other processes cannot open the file or device if they request delete access.
            If this flag is not specified, but the file or device has been opened for delete access, the function fails.
            </summary>
            <remarks>Delete access allows both delete and rename operations.</remarks>
        </member>
        <member name="F:Native.Constants.CREATE_ALWAYS">
            <summary>
            Creates a new file, always.
            If the specified file exists and is writable, the function overwrites the file, the function succeeds, and last-error code is set to ERROR_ALREADY_EXISTS (183).
            If the specified file does not exist and is a valid path, a new file is created, the function succeeds, and the last-error code is set to zero.
            </summary>
        </member>
        <member name="F:Native.Constants.CREATE_NEW">
            <summary>
            Creates a new file, only if it does not already exist.
            If the specified file exists, the function fails and the last-error code is set to ERROR_FILE_EXISTS (80).
            If the specified file does not exist and is a valid path to a writable location, a new file is created.
            </summary>
        </member>
        <member name="F:Native.Constants.OPEN_ALWAYS">
            <summary>
            Opens a file, always.
            If the specified file exists, the function succeeds and the last-error code is set to ERROR_ALREADY_EXISTS (183).
            If the specified file does not exist and is a valid path to a writable location, the function creates a file and the last-error code is set to zero.
            </summary>
        </member>
        <member name="F:Native.Constants.OPEN_EXISTING">
            <summary>
            Opens a file or device, only if it exists.
            If the specified file or device does not exist, the function fails and the last-error code is set to ERROR_FILE_NOT_FOUND (2).
            </summary>
        </member>
        <member name="F:Native.Constants.TRUNCATE_EXISTING">
            <summary>
            Opens a file and truncates it so that its size is zero bytes, only if it exists.
            If the specified file does not exist, the function fails and the last-error code is set to ERROR_FILE_NOT_FOUND (2).
            The calling process must open the file with the GENERIC_WRITE bit set as part of the dwDesiredAccess parameter.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_ARCHIVE">
            <summary>
            The file should be archived. Applications use this attribute to mark files for backup or removal.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_ENCRYPTED">
            <summary>
            The file or directory is encrypted. For a file, this means that all data in the file is encrypted.
            For a directory, this means that encryption is the default for newly created files and subdirectories.
            This flag has no effect if <see cref="F:Native.Constants.FILE_ATTRIBUTE_SYSTEM"/> is also specified.
            This flag is not supported on Home, Home Premium, Starter, or ARM editions of Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_HIDDEN">
            <summary>
            The file is hidden. Do not include it in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_NORMAL">
            <summary>
            The file does not have other attributes set. This attribute is valid only if used alone.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_OFFLINE">
            <summary>
            The data of a file is not immediately available.
            This attribute indicates that file data is physically moved to offline storage.
            This attribute is used by Remote Storage, the hierarchical storage management software.
            Applications should not arbitrarily change this attribute.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_READONLY">
            <summary>
            The file is read only. Applications can read the file, but cannot write to or delete it.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_SYSTEM">
            <summary>
            The file is part of or used exclusively by an operating system.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_TEMPORARY">
            <summary>
            The file is being used for temporary storage.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_BACKUP_SEMANTICS">
            <summary>
            The file is being opened or created for a backup or restore operation.
            The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges.
            You must set this flag to obtain a handle to a directory.
            A directory handle can be passed to some functions instead of a file handle.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_DELETE_ON_CLOSE">
            <summary>
            The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles.
            If there are existing open handles to a file, the call fails unless they were all opened with the <see cref="F:Native.Constants.FILE_SHARE_DELETE"/> share mode.
            Subsequent open requests for the file fail, unless the FILE_SHARE_DELETE share mode is specified.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_NO_BUFFERING">
            <summary>
            The file or device is being opened with no system caching for data reads and writes.
            This flag does not affect hard disk caching or memory mapped files.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OPEN_NO_RECALL">
            <summary>
            The file data is requested, but it should continue to be located in remote storage.
            It should not be transported back to local storage.
            This flag is for use by remote storage systems.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OPEN_REPARSE_POINT">
            <summary>
            Normal reparse point processing will not occur;
            CreateFile will attempt to open the reparse point. When a file is opened, a file handle is returned,
            whether or not the filter that controls the reparse point is operational.
            This flag cannot be used with the <see cref="F:Native.Constants.CREATE_ALWAYS"/> flag.
            If the file is not a reparse point, then this flag is ignored.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OVERLAPPED">
            <summary>
            The file or device is being opened or created for asynchronous I/O.
            When subsequent I/O operations are completed on this handle, the event specified in the OVERLAPPED structure will be set to the signaled state.
            If this flag is specified, the file can be used for simultaneous read and write operations.
            If this flag is not specified, then I/O operations are serialized, even if the calls to the read and write functions specify an OVERLAPPED structure.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_POSIX_SEMANTICS">
            <summary>
            Access will occur according to POSIX rules.
            This includes allowing multiple files with names, differing only in case, for file systems that support that naming.
            Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_RANDOM_ACCESS">
            <summary>
            Access is intended to be random. The system can use this as a hint to optimize file caching.
            This flag has no effect if the file system does not support cached I/O and <see cref="F:Native.Constants.FILE_FLAG_NO_BUFFERING"/>.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_SESSION_AWARE">
            <summary>
            The file or device is being opened with session awareness.
            If this flag is not specified, then per-session devices (such as a redirected USB device) cannot be opened by processes running in session 0.
            This flag has no effect for callers not in session 0.
            This flag is supported only on server editions of Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_SEQUENTIAL_SCAN">
            <summary>
            Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching.
            This flag should not be used if read-behind (that is, reverse scans) will be used.
            This flag has no effect if the file system does not support cached I/O and <see cref="F:Native.Constants.FILE_FLAG_NO_BUFFERING"/>.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_WRITE_THROUGH">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to disk.
            </summary>
        </member>
        <member name="F:Native.Constants.GENERIC_READ">
            <summary>Read access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_WRITE">
            <summary>Write access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_EXECUTE">
            <summary>Execute access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_ALL">
            <summary>All possible access rights.</summary>
        </member>
        <member name="F:Native.Constants.GWL_EXSTYLE">
            <summary>Extended window style.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_HINSTANCE">
            <summary>Application instance handle.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_ID">
            <summary>Identifier of the child window.</summary>
        </member>
        <member name="F:Native.Constants.GWL_STYLE">
            <summary>Window style.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_USERDATA">
            <summary>
            user data associated with the window.
            This data is intended for use by the application that created the window.
            Its value is initially zero.
            </summary>
        </member>
        <member name="F:Native.Constants.GWLP_WNDPROC">
            <summary>Address for the window procedure.</summary>
        </member>
        <member name="T:Native.Kernel32">
            <summary>Функции библиотеки kernel32.dll.</summary>
        </member>
        <member name="F:Native.Kernel32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.Kernel32.CopyMemoryEntryPoint">
            <summary>Точка входа функции CopyMemory.</summary>
        </member>
        <member name="M:Native.Kernel32.CopyMemory(System.Byte*,System.Byte*,System.UIntPtr)">
            <summary>Copies a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the copied block's destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to copy.</param>
            <param name="length">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.CopyMemory(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>Copies a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the copied block's destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to copy.</param>
            <param name="length">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.CopyMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>Copies a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the copied block's destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to copy.</param>
            <param name="length">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.CopyMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>Copies a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the copied block's destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to copy.</param>
            <param name="length">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="F:Native.Kernel32.MoveMemoryEntryPoint">
            <summary>Точка входа функции CopyMemory.</summary>
        </member>
        <member name="M:Native.Kernel32.MoveMemory(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>Moves a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the move destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="length">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.MoveMemory(System.Byte*,System.Byte*,System.UIntPtr)">
            <summary>Moves a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the move destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="length">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.MoveMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>Moves a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the move destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="length">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.MoveMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>Moves a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the move destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="length">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="F:Native.Kernel32.CloseHandleEntryPoint">
            <summary>Точка входа функции CloseHandle.</summary>
        </member>
        <member name="M:Native.Kernel32.CloseHandle(System.IntPtr)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724211.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.MulDivEntryPoint">
            <summary>Точка входа функции MulDiv.</summary>
        </member>
        <member name="M:Native.Kernel32.MulDiv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value.
            The final result is rounded to the nearest integer.
            </summary>
            <param name="nNumber">The multiplicand.</param>
            <param name="nNumerator">The multiplier.</param>
            <param name="nDenominator">The number by which the result of the multiplication operation is to be divided.</param>
            <returns>
            If the function succeeds, the return value is the result of the multiplication and division, rounded to the nearest integer.
            If the result is a positive half integer (ends in .5), it is rounded up. If the result is a negative half integer, it is rounded down.
            If either an overflow occurred or nDenominator was 0, the return value is -1.
            </returns>
        </member>
        <member name="F:Native.Kernel32.CreateFileEntryPoint">
            <summary>Точка входа функции CreateFile.</summary>
        </member>
        <member name="M:Native.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file or I/O device.
            The most commonly used I/O devices are as follows:
            	file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.
            The function returns a handle that can be used to access the file or device for various types of I/O depending
            on the file or device and the flags and attributes specified.
            </summary>
            <param name="lpFileName">
            The name of the file or device to be created or opened.
            You may use either forward slashes (/) or backslashes (\) in this name.</param>
            <param name="dwDesiredAccess">
            The requested access to the file or device, which can be summarized as read, write, both or neither zero).
            </param>
            <param name="dwShareMode">
            The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table).
            Access requests to attributes or extended attributes are not affected by this flag.
            </param>
            <param name="lpSecurityAttributes">
            A pointer to a SECURITY_ATTRIBUTES structure that contains two separate but related data members:
            an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes.
            </param>
            <param name="dwCreationDisposition">
            An action to take on a file or device that exists or does not exist.
            </param>
            <param name="dwFlagsAndAttributes">
            The file or device attributes and flags, <see cref="F:Native.Constants.FILE_ATTRIBUTE_NORMAL"/> being the most common default value for files.
            </param>
            <param name="hTemplateFile">
            A valid handle to a template file with the GENERIC_READ access right.
            The template file supplies file attributes and extended attributes for the file that is being created.
            </param>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is <see cref="F:Native.Constants.INVALID_HANDLE_VALUE"/>.
            </returns>
        </member>
        <member name="F:Native.Kernel32.DeviceIOControlEntryPoint">
            <summary>Точка входа функции DeviceIoControl.</summary>
        </member>
        <member name="M:Native.Kernel32.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
            </summary>
            <param name="hDevice">
            A handle to the device on which the operation is to be performed.
            The device is typically a volume, directory, file, or stream.
            To retrieve a device handle, use the <see cref="M:Native.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> function.</param>
            <param name="dwIoControlCode">
            The control code for the operation. This value identifies the specific operation to be performed and the type of device on which to perform it.
            </param>
            <param name="lpInBuffer">
            A pointer to the input buffer that contains the data required to perform the operation.
            The format of this data depends on the value of the <paramref name="dwIoControlCode"/> parameter.
            This parameter can be NULL if <paramref name="dwIoControlCode"/> specifies an operation that does not require input data.
            </param>
            <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
            <param name="lpOutBuffer">
            A pointer to the output buffer that is to receive the data returned by the operation.
            The format of this data depends on the value of the <paramref name="dwIoControlCode"/> parameter.
            This parameter can be NULL if <paramref name="dwIoControlCode"/> specifies an operation that does not return data.
            </param>
            <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
            <param name="lpBytesReturned">A pointer to a variable that receives the size of the data stored in the output buffer, in bytes.</param>
            <param name="lpOverlapped">
            A pointer to an OVERLAPPED structure.
            If hDevice was opened without specifying <see cref="F:Native.Constants.FILE_FLAG_OVERLAPPED"/>, <paramref name="lpOverlapped"/> is ignored.
            </param>
            <returns>
            If the operation completes successfully, the return value is nonzero.
            If the operation fails or is pending, the return value is zero.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/aa363216.aspx</seealso>
        </member>
        <member name="M:Native.Kernel32.DeviceIoControl(System.IntPtr,System.UInt32,System.Void*,System.UInt32,System.Void*,System.UInt32,System.UInt32*,System.Void*)">
            <summary>
            Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
            </summary>
            <param name="hDevice">
            A handle to the device on which the operation is to be performed.
            The device is typically a volume, directory, file, or stream.
            To retrieve a device handle, use the <see cref="M:Native.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> function.</param>
            <param name="dwIoControlCode">
            The control code for the operation. This value identifies the specific operation to be performed and the type of device on which to perform it.
            </param>
            <param name="lpInBuffer">
            A pointer to the input buffer that contains the data required to perform the operation.
            The format of this data depends on the value of the <paramref name="dwIoControlCode"/> parameter.
            This parameter can be NULL if <paramref name="dwIoControlCode"/> specifies an operation that does not require input data.
            </param>
            <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
            <param name="lpOutBuffer">
            A pointer to the output buffer that is to receive the data returned by the operation.
            The format of this data depends on the value of the <paramref name="dwIoControlCode"/> parameter.
            This parameter can be NULL if <paramref name="dwIoControlCode"/> specifies an operation that does not return data.
            </param>
            <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
            <param name="lpBytesReturned">A pointer to a variable that receives the size of the data stored in the output buffer, in bytes.</param>
            <param name="lpOverlapped">
            A pointer to an OVERLAPPED structure.
            If hDevice was opened without specifying <see cref="F:Native.Constants.FILE_FLAG_OVERLAPPED"/>, <paramref name="lpOverlapped"/> is ignored.
            </param>
            <returns>
            If the operation completes successfully, the return value is nonzero.
            If the operation fails or is pending, the return value is zero.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/aa363216.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.WaitForMultipleObjectsEntryPoint">
            <summary>Точка входа функции WaitForMultipleObjects.</summary>
        </member>
        <member name="M:Native.Kernel32.WaitForMultipleObjects(System.Int32,System.IntPtr[],System.Boolean,System.UInt32)">
            <summary>
            Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses.
            To enter an alertable wait state, use the <see cref="M:Native.Kernel32.WaitForMultipleObjectsEx(System.Int32,System.IntPtr[],System.Boolean,System.UInt32,System.Boolean)"/> function.
            </summary>
            <param name="nCount">
            The number of object handles in the array pointed to by lpHandles.
            The maximum number of object handles is <see cref="F:Native.Constants.MAXIMUM_WAIT_OBJECTS"/>.
            This parameter cannot be zero.
            </param>
            <param name="lpHandles">
            An array of object handles. The array can contain handles to objects of different types.
            It may not contain multiple copies of the same handle.
            </param>
            <param name="bWaitAll">
            If this parameter is <c>true</c>, the function returns when the state of all objects in the lpHandles array is signaled.
            If <c>false</c>, the function returns when the state of any one of the objects is set to signaled.
            In the latter case, the return value indicates the object whose state caused the function to return.
            </param>
            <param name="dwMilliseconds">
            The time-out interval, in milliseconds.
            If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses.
            If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately.
            If dwMilliseconds is <see cref="F:Native.Constants.INFINITE"/>, the function will return only when the specified objects are signaled.
            </param>
            <returns>
            If the function succeeds, the return value indicates the event that caused the function to return.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms687025.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.WaitForMultipleObjectsExEntryPoint">
            <summary>Точка входа функции WaitForMultipleObjectsEx.</summary>
        </member>
        <member name="M:Native.Kernel32.WaitForMultipleObjectsEx(System.Int32,System.IntPtr[],System.Boolean,System.UInt32,System.Boolean)">
            <summary>
            Waits until one or all of the specified objects are in the signaled state, an I/O completion routine
            or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses.
            </summary>
            <param name="nCount">
            The number of object handles in the array pointed to by lpHandles.
            The maximum number of object handles is <see cref="F:Native.Constants.MAXIMUM_WAIT_OBJECTS"/>.
            This parameter cannot be zero.
            </param>
            <param name="lpHandles">
            An array of object handles. The array can contain handles to objects of different types.
            It may not contain multiple copies of the same handle.
            </param>
            <param name="bWaitAll">
            If this parameter is <c>true</c>, the function returns when the state of all objects in the lpHandles array is signaled.
            If <c>false</c>, the function returns when the state of any one of the objects is set to signaled.
            In the latter case, the return value indicates the object whose state caused the function to return.
            </param>
            <param name="dwMilliseconds">
            The time-out interval, in milliseconds.
            If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses.
            If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately.
            If dwMilliseconds is <see cref="F:Native.Constants.INFINITE"/>, the function will return only when the specified objects are signaled.
            </param>
            <param name="bAlertable">
            If this parameter is TRUE and the thread is in the waiting state, the function returns when the
            system queues an I/O completion routine or APC, and the thread runs the routine or function.
            Otherwise, the function does not return and the completion routine or APC function is not executed.
            </param>
            <returns>
            If the function succeeds, the return value indicates the event that caused the function to return.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms687028.aspx</seealso>
        </member>
        <member name="M:Native.Kernel32.GetShortPathName(System.String,System.Char[],System.Int32)">
            <summary>Retrieves the short path form of the specified path.</summary>
            <param name="lpszLongPath">
            The path string.
            In the ANSI version of this function, the name is limited to MAX_PATH characters.
            To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path.
            </param>
            <param name="lpszShortPath">
            A pointer to a buffer to receive the null-terminated short form of the path that <paramref name="lpszLongPath"/> specifies.
            Passing NULL for this parameter and zero for cchBuffer will always return the required buffer size for a specified <paramref name="lpszLongPath"/>.
            </param>
            <param name="cchBuffer">
            The size of the buffer that <paramref name="lpszShortPath"/> points to, in chars.
            Set this parameter to zero if <paramref name="lpszShortPath"/> is set to <c>null</c>.
            </param>
            <returns>
            If the function succeeds, the return value is the length, in TCHARs, of the string that is copied to <paramref name="lpszShortPath"/>, not including the terminating null character.
            If the lpszShortPath buffer is too small to contain the path, the return value is the size of the buffer, in TCHARs, that is required to hold the path and the terminating null character.
            If the function fails for any other reason, the return value is zero. To get extended error information, call GetLastError().
            </returns>
        </member>
        <member name="M:Native.Kernel32.GetProcAddress(Native.ModuleHandle,System.String)">
            <summary>Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).</summary>
            <param name="hModule">
            A handle to the DLL module that contains the function or variable. The LoadLibrary, LoadLibraryEx, LoadPackagedLibrary, or GetModuleHandle function returns this handle.
            The <see cref="M:GetProcAddress()"/> function does not retrieve addresses from modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag.
            </param>
            <param name="procName">
            The function or variable name, or the function's ordinal value.
            </param>
            <returns>
            If the function succeeds, the return value is the address of the exported function or variable.
            If the function fails, the return value is <see cref="M:IntPtr.Zero"/>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.GetProcAddress(System.IntPtr,System.String)">
            <summary>Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).</summary>
            <param name="hModule">
            A handle to the DLL module that contains the function or variable. The LoadLibrary, LoadLibraryEx, LoadPackagedLibrary, or GetModuleHandle function returns this handle.
            The <see cref="M:GetProcAddress()"/> function does not retrieve addresses from modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag.
            </param>
            <param name="procName">
            The function or variable name, or the function's ordinal value.
            </param>
            <returns>
            If the function succeeds, the return value is the address of the exported function or variable.
            If the function fails, the return value is <see cref="M:IntPtr.Zero"/>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
            For additional load options, use the <see cref="M:LoadLibraryEx()"/> function.
            </summary>
            <param name="lpFileName">
            The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file).
            The name specified is the file name of the module and is not related to the name stored in the library module itself,
            as specified by the LIBRARY keyword in the module-definition (.def) file.
            If the string specifies a full path, the function searches only that path for the module.
            If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module.
            If the function cannot find the module, the function fails.When specifying a path, be sure to use backslashes (\), not forward slashes(/).
            For more information about paths, see Naming a File or Directory.
            If the string specifies a module name without a path and the file name extension is omitted,
            the function appends the default library extension .dll to the module name.To prevent the function from appending .dll
            to the module name, include a trailing point character (.) in the module name string.
            </param>
            <returns>If the function succeeds, the return value is a handle to the module.
            If the function fails, the return value is invalid handle.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.LoadLibraryEx(System.String,System.IntPtr,Native.LoadLibraryFlags)">
            <summary>
            Loads the specified module into the address space of the calling process.
            The specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">
            The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file).
            The name specified is the file name of the module and is not related to the name stored in the library module itself,
            as specified by the LIBRARY keyword in the module-definition (.def) file.
            If the string specifies a full path, the function searches only that path for the module.
            If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module.
            If the function cannot find the module, the function fails.When specifying a path, be sure to use backslashes (\), not forward slashes(/).
            For more information about paths, see Naming a File or Directory.
            If the string specifies a module name without a path and the file name extension is omitted,
            the function appends the default library extension .dll to the module name.To prevent the function from appending .dll
            to the module name, include a trailing point character (.) in the module name string.
            </param>
            <param name="hFile">This parameter is reserved for future use. It must be <see cref="M:IntPtr.Zero"/>.</param>
            <param name="flags">
            The action to be taken when loading the module.
            If no flags are specified, the behavior of this function is identical to that of the <see cref="M:LoadLibrary()"/> function.
            </param>
            <returns></returns>
        </member>
        <member name="M:Native.Kernel32.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.
            When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid.
            </summary>
            <param name="hModule">
            A handle to the loaded library module.
            The LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx function returns this handle.
            </param>
            <returns></returns>
        </member>
        <member name="M:Native.Kernel32.SetDllDirectory(System.String)">
            <summary>Adds a directory to the search path used to locate DLLs for the application.</summary>
            <param name="lpPathName">
            The directory to be added to the search path.
            If this parameter is an empty string (""), the call removes the current directory from the default DLL search order.
            If this parameter is <c>null</c>, the function restores the default search order.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.Kernel32.SetErrorMode(Native.SEM)">
            <summary>
            Controls whether the system will handle the specified types of serious errors or whether the process will handle them.
            </summary>
            <param name="mode">The process error mode.</param>
            <returns>The return value is the previous state of the error-mode bit flags.</returns>
        </member>
        <member name="M:Native.Kernel32.GetErrorMode">
            <summary>Retrieves the error mode for the current process.</summary>
            <returns>The process error mode.</returns>
        </member>
        <member name="T:Native.Gdi32">
            <summary>Функции библиотеки gdi32.dll.</summary>
        </member>
        <member name="F:Native.Gdi32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.Gdi32.SetStretchBltModeEntryPoint">
            <summary>Точка входа функции SetStretchBltMode.</summary>
        </member>
        <member name="M:Native.Gdi32.SetStretchBltMode(System.IntPtr,Native.StretchBltMode)">
            <summary>This function sets the bitmap stretching mode in the specified device context. </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="iStretchMode">Specifies the stretching mode.</param>
            <returns>
            If the function succeeds, the return value is the previous stretching mode.
            If the function fails, the return value is
            <see cref="M:StretchBltMode.INVALID"/> or
            <see cref="M:StretchBltMode.INVALID_PARAMETER"/>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145089.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.StretchBltEntryPoint">
            <summary>Точка входа функции StretchBlt.</summary>
        </member>
        <member name="M:Native.Gdi32.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.RasterOperation)">
            <summary>
            The StretchBlt function copies a bitmap from a source rectangle into a destination rectangle,
            stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary.
            The system stretches or compresses the bitmap according to the stretching mode currently set in the
            destination device context.
            </summary>
            <param name="hDCDest">A handle to the destination device context.</param>
            <param name="xOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="hDCSrc">A handle to the source device context.</param>
            <param name="xOriginScr">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="yOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="widthScr">The width, in logical units, of the source rectangle.</param>
            <param name="heightScr">The height, in logical units, of the source rectangle.</param>
            <param name="rop">
            The raster operation to be performed. Raster operation codes define how the system combines
            colors in output operations that involve a brush, a source bitmap, and a destination bitmap.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.Gdi32.BitBltEntryPoint">
            <summary>Точка входа функции StretchBlt.</summary>
        </member>
        <member name="M:Native.Gdi32.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,Native.RasterOperation)">
            <summary>
            The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels 
            from the specified source device context into a destination device context.
            </summary>
            <param name="hDCDest">A handle to the destination device context.</param>
            <param name="xOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the source and destination rectangles.</param>
            <param name="heightDest">The height, in logical units, of the source and the destination rectangles.</param>
            <param name="hDCSrc">A handle to the source device context.</param>
            <param name="xOriginScr">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="yOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="rop">
            A raster-operation code. These codes define how the color data for the source rectangle is to be combined with the
            color data for the destination rectangle to achieve the final color.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.Gdi32.StretchDIBitsEntryPoint">
            <summary>Точка входа функции StretchDIBits.</summary>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,Native.BITMAPINFOHEADER@,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a <see cref="T:Native.BITMAPINFOHEADER"/> structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*,Native.BITMAPINFOHEADER@,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a <see cref="T:Native.BITMAPINFOHEADER"/> structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,Native.BITMAPINFO256@,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a <see cref="T:Native.BITMAPINFOHEADER"/> structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*,Native.BITMAPINFO256@,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a <see cref="T:Native.BITMAPINFO256"/> structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.SelectObjectEntryPoint">
            <summary>Точка входа функции SelectObject.</summary>
        </member>
        <member name="M:Native.Gdi32.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The SelectObject function selects an object into the specified device context (DC).
            The new object replaces the previous object of the same type.
            </summary>
            <param name="hDC">A handle to the DC.</param>
            <param name="hObject">A handle to the object to be selected.</param>
            <returns>
            If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced.
            If the selected object is a region and the function succeeds, the return value is one of the following values:
              SIMPLEREGION, COMPLEXREGION, NULLREGION.
            If an error occurs and the selected object is not a region, the return value is NULL. Otherwise, it is HGDI_ERROR.
            </returns>
            <remarks>
            This function returns the previously selected object of the specified type.
            An application should always replace a new object with the original, default object after it has finished drawing with the new object.
            An application cannot select a single bitmap into more than one DC at a time.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd162957.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.DeleteObjectEntryPoint">
            <summary>Точка входа функции DeleteObject.</summary>
        </member>
        <member name="M:Native.Gdi32.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all
            system resources associated with the object.
            After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the specified handle is not valid or is currently selected into a DC, the return value is <c>false</c>.
            </returns>
            <remarks>
            Do not delete a drawing object (pen or brush) while it is still selected into a DC.
            When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183539.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.CreateCompatibleDCEntryPoint">
            <summary>Точка входа функции CreateCompatibleDC.</summary>
        </member>
        <member name="M:Native.Gdi32.CreateCompatibleDC(System.IntPtr)">
            <summary>
            The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.
            </summary>
            <param name="hDC">
            A handle to an existing DC. If this handle is NULL, the function creates a
            memory DC compatible with the application's current screen.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a memory DC.
            If the function fails, the return value is NULL.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183489.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.DeleteDCEntryPoint">
            <summary>Точка входа функции DeleteDC.</summary>
        </member>
        <member name="M:Native.Gdi32.DeleteDC(System.IntPtr)">
            <summary>The DeleteDC function deletes the specified device context (DC).</summary>
            <param name="hDC">A handle to the device context.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
            <remarks>
            An application must not delete a DC whose handle was obtained by calling the GetDC function.
            Instead, it must call the ReleaseDC function to free the DC.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183533.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.GetDeviceCapsEntryPoint">
            <summary>Точка входа функции GetDeviceCaps.</summary>
        </member>
        <member name="M:Native.Gdi32.GetDeviceCaps(System.IntPtr,Native.DeviceCaps)">
            <summary>The GetDeviceCaps function retrieves device-specific information for the specified device.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="nIndex">The item to be returned.</param>
            <returns>
            The return value specifies the value of the desired item.
            When nIndex is <see cref="M:DeviceCaps.BITSPIXEL"/> and the device has 15bpp or 16bpp, the return value is 16.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd144877.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.CreateCompatibleBitmapEntryPoint">
            <summary>Точка входа функции CreateCompatibleBitmap.</summary>
        </member>
        <member name="M:Native.Gdi32.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context.
            </summary>
            <param name="hDC">A handle to a device context.</param>
            <param name="width">The bitmap width, in pixels.</param>
            <param name="weigth">The bitmap height, in pixels.</param>
            <returns>
            If the function succeeds, the return value is a handle to the compatible bitmap (DDB).
            If the function fails, the return value is <c>IntPtr.Zero</c>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183488.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.GetStockObject(Native.StockObject)">
            <summary>Retrieves a handle to one of the stock pens, brushes, fonts, or palettes.</summary>
            <param name="fnObject">The type of stock object.</param>
            <returns>
            If the function succeeds, the return value is a handle to the requested logical object.
            If the function fails, the return value is <c>IntPtr.Zero</c>.
            </returns>
            <seealso>https://msdn.microsoft.com/en-us/library/windows/desktop/dd144925%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="T:Native.User32">
            <summary>Функции библиотеки user32.dll.</summary>
        </member>
        <member name="F:Native.User32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.User32.AttachThreadInputEntryPoint">
            <summary>Точка входа функции AttachThreadInput.</summary>
        </member>
        <member name="M:Native.User32.AttachThreadInput(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attaches or detaches the input processing mechanism of one thread to that of another thread.
            </summary>
            <param name="idAttach">
            The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread.
            </param>
            <param name="idAttachTo">
            The identifier of the thread to which idAttach will be attached. This thread cannot be a system thread.
            A thread cannot attach to itself. Therefore, idAttachTo cannot equal idAttach.
            </param>
            <param name="fAttach">
            If this parameter is <c>true</c>, the two threads are attached. If the parameter is <c>false</c>, the threads are detached.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="F:Native.User32.AllowSetForegroundWindowEntryPoint">
            <summary>Точка входа функции AllowSetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.AllowSetForegroundWindow(System.Int32)">
            <summary>
            Enables the specified process to set the foreground window using the SetForegroundWindow function.
            The calling process must already be able to set the foreground window.
            For more information, see Remarks later in this topic.
            </summary>
            <param name="dwProcessId">
            The identifier of the process that will be enabled to set the foreground window.
            If this parameter is ASFW_ANY, all processes will be enabled to set the foreground window.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            The function will fail if the calling process cannot set the foreground window.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="F:Native.User32.LockSetForegroundWindowEntryPoint">
            <summary>Точка входа функции LockSetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.LockSetForegroundWindow(Native.LSFW)">
            <summary>
            The foreground process can call the LockSetForegroundWindow function to disable calls
            to the <see cref="M:SetForegroundWindow"/> function.
            </summary>
            <param name="uLockCode">
            Specifies whether to enable or disable calls to <see cref="M:SetForegroundWindow"/>.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="F:Native.User32.GetDCEntryPoint">
            <summary>Точка входа функции GetDC.</summary>
        </member>
        <member name="M:Native.User32.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified
            window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw
            in the DC. The device context is an opaque data structure, whose values are used internally by GDI.
            </summary>
            <param name="hWnd">
            A handle to the window whose DC is to be retrieved.
            If this value is NULL, GetDC retrieves the DC for the entire screen.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="F:Native.User32.ReleaseDCEntryPoint">
            <summary>Точка входа функции ReleaseDC.</summary>
        </member>
        <member name="M:Native.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>
            The return value indicates whether the DC was released.
            If the DC was released, the return value is 1.
            If the DC was not released, the return value is zero.
            </returns>
        </member>
        <member name="F:Native.User32.ShowWindowEntryPoint">
            <summary>Точка входа функции ShowWindow.</summary>
        </member>
        <member name="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)">
            <summary>Sets the specified window's show state.</summary>
            <param name="handle">A handle to the window. </param>
            <param name="flags">
            Controls how the window is to be shown.
            This parameter is ignored the first time an application calls <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/>,
            if the program that launched the application provides a STARTUPINFO structure.
            Otherwise, the first time <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/> is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter.
            </param>
            <returns></returns>
        </member>
        <member name="F:Native.User32.GetSystemMetricsEntryPoint">
            <summary>Точка входа функции GetSystemMetrics.</summary>
        </member>
        <member name="M:Native.User32.GetSystemMetrics(Native.SM)">
            <summary>Retrieves the specified system metric or system configuration setting.</summary>
            <param name="nIndex">The system metric or configuration setting to be retrieved.</param>
            <returns>
            If the function succeeds, the return value is the requested system metric or configuration setting.
            If the function fails, the return value is 0.
            GetLastError does not provide extended error information. 
            </returns>
            <remarks>Note that all dimensions retrieved by <see cref="M:Native.User32.GetSystemMetrics(Native.SM)"/> are in pixels.</remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724385.aspx</seealso>
        </member>
        <member name="F:Native.User32.ScrollDCEntryPoint">
            <summary>Точка входа функции ScrollDC.</summary>
        </member>
        <member name="M:Native.User32.ScrollDC(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,Native.RECT@)">
            <summary>The ScrollDC function scrolls a rectangle of bits horizontally and vertically.</summary>
            <param name="hDC">Handle to the device context that contains the bits to be scrolled. </param>
            <param name="dx">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="dy">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up.
            </param>
            <param name="lprcScroll">
            Pointer to a RECT structure containing the coordinates of the bits to be scrolled.
            The only bits affected by the scroll operation are bits in the intersection of this rectangle and the
            rectangle specified by lprcClip.
            If lprcScroll is NULL, the entire client area is used.
            </param>
            <param name="lprcClip">
            Pointer to a RECT structure containing the coordinates of the clipping rectangle.
            The only bits that will be painted are the bits that remain inside this rectangle after the
            scroll operation has been completed.
            If lprcClip is NULL, the entire client area is used.
            </param>
            <param name="hrgnUpdate">
            Handle to the region uncovered by the scrolling process.
            ScrollDC defines this region; it is not necessarily a rectangle.
            </param>
            <param name="lprcUpdate">
            Pointer to a RECT structure that receives the coordinates of the rectangle bounding the scrolling update region.
            This is the largest rectangular area that requires repainting. When the function returns,
            the values in the structure are in client coordinates, regardless of the mapping mode for
            the specified device context.
            This allows applications to use the update region in a call to the InvalidateRgn function, if required.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.User32.ScrollWindowExEntryPoint">
            <summary>Точка входа функции ScrollWindowEx.</summary>
        </member>
        <member name="M:Native.User32.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,System.IntPtr,Native.ScrollWindowFlags)">
            <summary>
            The ScrollWindowEx function scrolls the contents of the specified window's client area.
            </summary>
            <param name="hWnd">Handle to the window where the client area is to be scrolled. </param>
            <param name="nXAmount">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="nYAmount">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up. 
            </param>
            <param name="rectScrollRegion">
            Pointer to a <see cref="T:Native.RECT"/> structure that specifies the portion of the client area to be scrolled.
            If this parameter is NULL, the entire client area is scrolled.
            </param>
            <param name="rectClip">
            Pointer to a RECT structure that contains the coordinates of the clipping rectangle.
            Only device bits within the clipping rectangle are affected.
            Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside
            of the rectangle to the outside are not painted.
            This parameter may be NULL.
            </param>
            <param name="hrgnUpdate">
            Handle to the region that is modified to hold the region invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="prcUpdate">
            Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="flags">Specifies flags that control scrolling.</param>
            <returns>
            If the function succeeds, the return value is
            	SIMPLEREGION (rectangular invalidated region),
            	COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles),
             or NULLREGION (no invalidated region).
            If the function fails, the return value is ERROR.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/bb787593.aspx</seealso>
        </member>
        <member name="M:Native.User32.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,Native.RECT@,Native.ScrollWindowFlags)">
            <summary>
            The ScrollWindowEx function scrolls the contents of the specified window's client area.
            </summary>
            <param name="hWnd">Handle to the window where the client area is to be scrolled. </param>
            <param name="nXAmount">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="nYAmount">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up. 
            </param>
            <param name="rectScrollRegion">
            Pointer to a <see cref="T:Native.RECT"/> structure that specifies the portion of the client area to be scrolled.
            If this parameter is NULL, the entire client area is scrolled.
            </param>
            <param name="rectClip">
            Pointer to a RECT structure that contains the coordinates of the clipping rectangle.
            Only device bits within the clipping rectangle are affected.
            Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside
            of the rectangle to the outside are not painted.
            This parameter may be NULL.
            </param>
            <param name="hrgnUpdate">
            Handle to the region that is modified to hold the region invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="prcUpdate">
            Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling.
            </param>
            <param name="flags">Specifies flags that control scrolling.</param>
            <returns>
            If the function succeeds, the return value is
            	SIMPLEREGION (rectangular invalidated region),
            	COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles),
             or NULLREGION (no invalidated region).
            If the function fails, the return value is ERROR. To get extended error information, call GetLastError.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/bb787593.aspx</seealso>
        </member>
        <member name="F:Native.User32.WindowFromPointEntryPoint">
            <summary>Точка входа функции WindowFromPoint.</summary>
        </member>
        <member name="M:Native.User32.WindowFromPoint(Native.POINT)">
            <summary>Retrieves a handle to the window that contains the specified point.</summary>
            <param name="point">The point to be checked.</param>
            <returns>
            The return value is a handle to the window that contains the point.
            If no window exists at the given point, the return value is NULL.
            If the point is over a static text control, the return value is a handle to the window under the static text control.
            </returns>
        </member>
        <member name="F:Native.User32.ChildWindowFromPointEntryPoint">
            <summary>Точка входа функции ChildWindowFromPoint.</summary>
        </member>
        <member name="M:Native.User32.ChildWindowFromPoint(System.IntPtr,Native.POINT)">
            <summary>
            Determines which, if any, of the child windows belonging to a parent window contains the specified point.
            The search is restricted to immediate child windows.
            Grandchildren, and deeper descendant windows are not searched.
            To skip certain child windows, use the <see cref="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)"/> function.
            </summary>
            <param name="hWndParent">A handle to the parent window.</param>
            <param name="point">A structure that defines the client coordinates, relative to <paramref name="hWndParent"/>, of the point to be checked.</param>
            <returns>
            The return value is a handle to the child window that contains the point, even if the child window is hidden or disabled.
            If the point lies outside the parent window, the return value is NULL.
            If the point is within the parent window but not within any child window, the return value is a handle to the parent window. 
            </returns>
        </member>
        <member name="F:Native.User32.ChildWindowFromPointExEntryPoint">
            <summary>Точка входа функции ChildWindowFromPointEx.</summary>
        </member>
        <member name="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)">
            <summary>
            Determines which, if any, of the child windows belonging to the specified parent window contains the specified point.
            The function can ignore invisible, disabled, and transparent child windows.
            The search is restricted to immediate child windows.
            Grandchildren and deeper descendants are not searched. 
            </summary>
            <param name="hWndParent">A handle to the parent window.</param>
            <param name="point">A structure that defines the client coordinates (relative to <paramref name="hWndParent"/>) of the point to be checked. </param>
            <param name="uFlags">The child windows to be skipped (<see cref="T:Native.CWP"/>).</param>
            <returns>
            The return value is a handle to the first child window that contains the point and meets the criteria specified by <paramref name="uFlags"/>.
            If the point is within the parent window but not within any child window that meets the criteria, the return value is a handle to the parent window.
            If the point lies outside the parent window or if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="F:Native.User32.SendMessageEntryPoint">
            <summary>Точка входа функции SendMessage.</summary>
        </member>
        <member name="M:Native.User32.SendMessage(System.IntPtr,Native.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified
            window and does not return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message.
            If this parameter is HWND_BROADCAST ((IntPtr)0xffff), the message is sent to all top-level windows in the system,
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950.aspx</seealso>
        </member>
        <member name="F:Native.User32.PostMessageEntryPoint">
            <summary>Точка входа функции PostMessage.</summary>
        </member>
        <member name="M:Native.User32.PostMessage(System.IntPtr,Native.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the
            specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure is to receive the message. The following values have special meanings.
            	((IntPtr)0xffff): The message is posted to all top-level windows in the system, including disabled or invisible unowned windows,
            					  overlapped windows, and pop-up windows. The message is not posted to child windows.
            	IntPtr.Zero: The function behaves like a call to PostThreadMessage with the dwThreadId parameter set to the identifier of the current thread.
            </param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            GetLastError returns ERROR_NOT_ENOUGH_QUOTA when the limit is hit. 
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950.aspx</seealso>
        </member>
        <member name="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window.
            The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">
            A handle to the window and, indirectly, the class to which the window belongs.
            The <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function fails if the process that owns the window specified by the hWnd
            parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.
            </param>
            <param name="nIndex">
            The zero-based offset to the value to be set.
            Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.
            To set any other value, specify one of the following values:
            <see cref="M:Constants.GWL_EXSTYLE"/>
            <see cref="M:Constants.GWLP_HINSTANCE"/>
            <see cref="M:Constants.GWLP_ID"/>
            <see cref="M:Constants.GWL_STYLE"/>
            <see cref="M:Constants.GWLP_USERDATA"/>
            <see cref="M:Constants.GWLP_WNDPROC"/>
            </param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>
            If the function succeeds, the return value is the previous value of the specified offset.
            If the function fails, the return value is zero.
            </returns>
            <remarks>
            Certain window data is cached, so changes you make using <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> will not take effect
            until you call the <see cref="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)"/> function.
            </remarks>
        </member>
        <member name="M:Native.User32.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window.
            The function also retrieves the value at a specified offset into the extra window memory. 
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">
            The zero-based offset to the value to be retrieved.
            Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.
            To retrieve any other value, specify one of the following values:
            <see cref="M:Constants.GWL_EXSTYLE"/>
            <see cref="M:Constants.GWLP_HINSTANCE"/>
            <see cref="M:Constants.GWLP_ID"/>
            <see cref="M:Constants.GWL_STYLE"/>
            <see cref="M:Constants.GWLP_USERDATA"/>
            <see cref="M:Constants.GWLP_WNDPROC"/>
            </param>
            <returns>
            If the function succeeds, the return value is the requested value.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.GetWindowRect(System.IntPtr,Native.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window.
            The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">
            A pointer to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:Native.User32.GetClientRect(System.IntPtr,Native.RECT@)">
            <summary>
            Retrieves the coordinates of a window's client area.
            The client coordinates specify the upper-left and lower-right corners of the client area.
            Because client coordinates are relative to the upper-left corner of a window's client area,
            the coordinates of the upper-left corner are (0,0). 
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">
            A pointer to a <see cref="T:Native.RECT"/> structure that receives the client coordinates.
            The left and top members are zero.
            The right and bottom members contain the width and height of the window.
            </param>
            <returns></returns>
        </member>
        <member name="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window.
            These windows are ordered according to their appearance on the screen.
            The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">
            A handle to the window to precede the positioned window in the Z order.
            This parameter must be a window handle or one of the following values:
            <see cref="M:Constants.HWND_BOTTOM"/>
            <see cref="M:Constants.HWND_NOTOPMOST"/>
            <see cref="M:Constants.HWND_TOP"/>
            <see cref="M:Constants.HWND_TOPMOST"/>
            </param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels.</param>
            <param name="uFlags">The window sizing and positioning flags.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.User32.SetForegroundWindowEntryPoint">
            <summary>Точка входа функции SetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the window.
            Keyboard input is directed to the window, and various visual cues are changed for the user.
            The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads. 
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>
            If the window was brought to the foreground, the return value is nonzero.
            If the window was not brought to the foreground, the return value is zero.
            </returns>
        </member>
        <member name="F:Native.User32.BringWindowToTopEntryPoint">
            <summary>Точка входа функции BringWindowToTop.</summary>
        </member>
        <member name="M:Native.User32.BringWindowToTop(System.IntPtr)">
            <summary>
            Brings the specified window to the top of the Z order.
            If the window is a top-level window, it is activated.
            If the window is a child window, the top-level parent window associated with the child window is activated. 
            </summary>
            <param name="hWnd">A handle to the window to bring to the top of the Z order.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.User32.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system.
            The message value can be used when sending or posting messages.
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>
            If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.
            If the function fails, the return value is zero. To get extended error information, call GetLastError().
            </returns>
            <remarks>
            The RegisterWindowMessage function is typically used to register messages for communicating between two cooperating applications.
            If two different applications register the same message string, the applications return the same message value.
            The message remains registered until the session ends.
            Only use RegisterWindowMessage when more than one application must process the same message.
            For sending private messages within a window class, an application can use any integer in the range WM_USER through 0x7FFF.
            (Messages in this range are private to a window class, not to an application. For example, predefined control classes such as
            BUTTON, EDIT, LISTBOX, and COMBOBOX may use values in this range.) 
            </remarks>
        </member>
        <member name="M:Native.User32.GetForegroundWindow">
            <summary>
            Retrieves a handle to the foreground window (the window with which the user is currently working).
            The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.
            </summary>
            <returns>
            The return value is a handle to the foreground window.
            The foreground window can be <c>IntPtr.Zero</c> in certain circumstances, such as when a window is losing activation. 
            </returns>
        </member>
        <member name="M:Native.User32.FlashWindowEx(Native.FLASHWINFO@)">
            <summary>Flashes the specified window. It does not change the active state of the window.</summary>
            <param name="pwfi">A pointer to a <see cref="T:FLASHWINFO"/> structure.</param>
            <returns>
            The return value specifies the window's state before the call to the FlashWindowEx function.
            If the window caption was drawn as active before the call, the return value is nonzero.
            Otherwise, the return value is zero.
            </returns>
            <remarks>
            Typically, you flash a window to inform the user that the window requires attention but does not currently have the keyboard focus.
            When a window flashes, it appears to change from inactive to active status. An inactive caption bar changes to an active caption bar;
            an active caption bar changes to an inactive caption bar.
            </remarks>
        </member>
        <member name="M:Native.User32.MonitorFromWindow(System.IntPtr,Native.MONITOR)">
            <summary>
            Retrieves a handle to the display monitor that has the largest area of intersection
            with the bounding rectangle of a specified window.
            </summary>
            <param name="hwnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Native.User32.GetMonitorInfo(System.IntPtr,Native.MONITORINFO@)">
            <summary>Retrieves information about a display monitor.</summary>
            <param name="hMonitor">A handle to the display monitor of interest.</param>
            <param name="lpmi">A pointer to a <see cref="T:Native.MONITORINFO"/> structure that receives information about the specified display monitor.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="M:Native.User32.LockWorkStation">
            <summary>Locks the workstation's display. Locking a workstation protects it from unauthorized use.</summary>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            Because the function executes asynchronously, a <c>true</c> return value indicates that the operation has been initiated.
            It does not indicate whether the workstation has been successfully locked.
            </returns>
        </member>
        <member name="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)">
            <summary>
            The BeginPaint function prepares the specified window for painting and fills a
            <see cref="T:Native.PAINTSTRUCT"/> structure with information about the painting.
            </summary>
            <param name="hWnd">Handle to the window to be repainted.</param>
            <param name="ps">Pointer to the <see cref="T:Native.PAINTSTRUCT"/> structure that will receive painting information.</param>
            <returns>
            If the function succeeds, the return value is the handle to a display device context for the specified window.
            If the function fails, the return value is <see cref="M:IntPtr.Zero"/>, indicating that no display device context is available.
            </returns>
        </member>
        <member name="M:Native.User32.EndPaint(System.IntPtr,Native.PAINTSTRUCT@)">
            <summary>
            The EndPaint function marks the end of painting in the specified window.
            This function is required for each call to the <see cref="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)"/> function, but only after painting is complete.
            </summary>
            <param name="hWnd">Handle to the window that has been repainted.</param>
            <param name="ps">Pointer to a <see cref="T:Native.PAINTSTRUCT"/> structure that contains the painting information retrieved by <see cref="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)"/>.</param>
            <returns>The return value is always <c>true</c>.</returns>
        </member>
        <member name="M:Native.User32.UpdateLayeredWindow(System.IntPtr,System.IntPtr,Native.POINT@,Native.SIZE@,System.IntPtr,Native.POINT@,System.Int32,Native.BLENDFUNCTION@,Native.ULW)">
            <summary>Updates the position, size, shape, content, and translucency of a layered window.</summary>
            <param name="hwnd">
            A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function.
            Windows 8: The WS_EX_LAYERED style is supported for top-level windows and child windows.
            Previous Windows versions support WS_EX_LAYERED only for top-level windows.
            </param>
            <param name="hdcDst">
            A handle to a DC for the screen. This handle is obtained by specifying NULL when calling the function.
            It is used for palette color matching when the window contents are updated.
            If hdcDst isNULL, the default palette will be used.
            If hdcSrc is NULL, hdcDst must be NULL.
            </param>
            <param name="pptDst">
            A pointer to a structure that specifies the new screen position of the layered window.
            If the current position is not changing, pptDst can be NULL.
            </param>
            <param name="psize">
            A pointer to a structure that specifies the new size of the layered window.
            If the size of the window is not changing, psize can be NULL.
            If hdcSrc is NULL, psize must be NULL.
            </param>
            <param name="hdcSrc">
            A handle to a DC for the surface that defines the layered window.
            This handle can be obtained by calling the CreateCompatibleDC function.
            If the shape and visual context of the window are not changing, hdcSrc can be NULL. 
            </param>
            <param name="pprSrc">
            A pointer to a structure that specifies the location of the layer in the device context.
            If hdcSrc is NULL, pptSrc should be NULL. 
            </param>
            <param name="crKey">
            A structure that specifies the color key to be used when composing the layered window.
            To generate a COLORREF, use the RGB macro. 
            </param>
            <param name="pblend">
            A pointer to a structure that specifies the transparency value to be used when composing the layered window. 
            </param>
            <param name="dwFlags"><see cref="T:ULW"/>.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:Native.User32.AnimateWindow(System.IntPtr,System.UInt32,Native.AW)">
            <summary>
            Enables you to produce special effects when showing or hiding windows.
            There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade.
            </summary>
            <param name="hWnd">
            A handle to the window to animate.
            The calling thread must own this window.
            </param>
            <param name="dwTime">
            The time it takes to play the animation, in milliseconds.
            Typically, an animation takes 200 milliseconds to play.
            </param>
            <param name="dwFlags">
            The type of animation. Note that, by default, these flags take effect when showing a window.
            To take effect when hiding a window, use <see cref="M:AW.HIDE"/> and a logical OR operator with the appropriate flags. 
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="M:Native.User32.RedrawWindow(System.IntPtr,Native.RECT@,System.IntPtr,Native.RDW)">
            <summary>
            Updates the specified rectangle or region in a window's client area.
            </summary>
            <param name="hWnd">
            A handle to the window to be redrawn.
            If this parameter is IntPtr.Zero, the desktop window is updated.
            </param>
            <param name="lprcUpdate">
            A pointer to a RECT structure containing the coordinates, in device units, of the update rectangle.
            This parameter is ignored if the <paramref name="hrgnUpdate"/> parameter identifies a region.
            </param>
            <param name="hrgnUpdate">
            A handle to the update region. If both the <paramref name="hrgnUpdate"/> and <paramref name="lprcUpdate"/> parameters are IntPtr.Zero,
            the entire client area is added to the update region.
            </param>
            <param name="flags">
            One or more redraw flags. This parameter can be used to invalidate or validate a window,
            control repainting, and control which windows are affected by RedrawWindow().
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,Native.RDW)">
            <summary>
            Updates the specified rectangle or region in a window's client area.
            </summary>
            <param name="hWnd">
            A handle to the window to be redrawn.
            If this parameter is IntPtr.Zero, the desktop window is updated.
            </param>
            <param name="lprcUpdate">
            A pointer to a RECT structure containing the coordinates, in device units, of the update rectangle.
            This parameter is ignored if the <paramref name="hrgnUpdate"/> parameter identifies a region.
            </param>
            <param name="hrgnUpdate">
            A handle to the update region. If both the <paramref name="hrgnUpdate"/> and <paramref name="lprcUpdate"/> parameters are IntPtr.Zero,
            the entire client area is added to the update region.
            </param>
            <param name="flags">
            One or more redraw flags. This parameter can be used to invalidate or validate a window,
            control repainting, and control which windows are affected by RedrawWindow().
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.GetParent(System.IntPtr)">
            <summary>
            Retrieves a handle to the specified window's parent or owner.
            To retrieve a handle to a specified ancestor, use the GetAncestor function.
            </summary>
            <param name="hWnd">A handle to the window whose parent window handle is to be retrieved.</param>
            <returns>
            If the window is a child window, the return value is a handle to the parent window.
            If the window is a top-level window with the WS_POPUP style, the return value is a handle to the owner window.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Native.User32.FillRect(System.IntPtr,Native.RECT@,System.IntPtr)">
            <summary>
            The FillRect function fills a rectangle by using the specified brush.
            This function includes the left and top borders, but excludes the right and bottom borders
            of the rectangle.
            </summary>
            <param name="hDC">A handle to the device context.</param>
            <param name="lprc">A pointer to a <see cref="T:Native.RECT"/> structure that contains the logical coordinates of the rectangle to be filled.</param>
            <param name="hbr">A handle to the brush used to fill the rectangle.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
            <seealso>https://msdn.microsoft.com/en-us/library/windows/desktop/dd162719%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="M:Native.User32.MapWindowPoints(System.IntPtr,System.IntPtr,Native.POINT[],System.Int32)">
            <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate
            space relative to one window to a coordinate space relative to another window.
            </summary>
            <param name="hWndFrom">
            A handle to the window from which points are converted.
            If this parameter is NULL or HWND_DESKTOP, the points are presumed
            to be in screen coordinates.
            </param>
            <param name="hWndTo">
            A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP,
            the points are converted to screen coordinates.
            </param>
            <param name="lpPoints">
            A pointer to an array of POINT structures that contain the set of points
            to be converted. The points are in device units. This parameter can also
            point to a RECT structure, in which case the cPoints parameter should be set to 2.
            </param>
            <param name="cPoints">
            The number of POINT structures in the array pointed to by the lpPoints parameter.
            </param>
            <returns>
            If the function succeeds, the low-order word of the return value is the number of
            pixels added to the horizontal coordinate of each source point in order to compute
            the horizontal coordinate of each destination point. (In addition to that,
            if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal
            coordinate is multiplied by -1.) The high-order word is the number of pixels added
            to the vertical coordinate of each source point in order to compute the vertical
            coordinate of each destination point.
            </returns>
        </member>
        <member name="M:Native.User32.MapWindowPoints(System.IntPtr,System.IntPtr,Native.POINT@,System.Int32)">
            <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate
            space relative to one window to a coordinate space relative to another window.
            </summary>
            <param name="hWndFrom">
            A handle to the window from which points are converted.
            If this parameter is NULL or HWND_DESKTOP, the points are presumed
            to be in screen coordinates.
            </param>
            <param name="hWndTo">
            A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP,
            the points are converted to screen coordinates.
            </param>
            <param name="lpPoints">
            A pointer to an array of POINT structures that contain the set of points
            to be converted. The points are in device units. This parameter can also
            point to a RECT structure, in which case the cPoints parameter should be set to 2.
            </param>
            <param name="cPoints">
            The number of POINT structures in the array pointed to by the lpPoints parameter.
            </param>
            <returns>
            If the function succeeds, the low-order word of the return value is the number of
            pixels added to the horizontal coordinate of each source point in order to compute
            the horizontal coordinate of each destination point. (In addition to that,
            if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal
            coordinate is multiplied by -1.) The high-order word is the number of pixels added
            to the vertical coordinate of each source point in order to compute the vertical
            coordinate of each destination point.
            </returns>
        </member>
        <member name="T:Native.Dwmapi">
            <summary>Функции библиотеки dwmapi.dll.</summary>
        </member>
        <member name="F:Native.Dwmapi.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.IntPtr,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Int32@,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean@,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMNCRP)">
            <summary>Sets non-client rendering policy.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="renderingPolicy">Non-client rendering policy.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMFLIP3D)">
            <summary>Sets Flip3D window behavior.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="flip3DPolicy">Flip3D window behavior.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean)">
            <summary>Sets boolean window attribute.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="value"/>
            parameter specifies the value of that attribute.
            </param>
            <param name="value">Attribute value.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.IntPtr,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.Int32@,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean@,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmExtendFrameIntoClientArea(System.IntPtr,Native.MARGINS@)">
            <summary>Extends the window frame into the client area.</summary>
            <param name="hWnd">The handle to the window in which the frame will be extended into the client area.</param>
            <param name="pMarInset">
            A reference to a <see cref="T:MARGINS"/> structure that describes the margins to use
            when extending the frame into the client area.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>
            This function must be called whenever Desktop Window Manager (DWM) composition is toggled.
            Handle the <see cref="M:WM.DWMCOMPOSITIONCHANGED"/> message for composition change notification.
            Use negative margin values to create the "sheet of glass" effect where the client area is rendered as
            a solid surface with no window border.
            </remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmEnableBlurBehindWindow(System.IntPtr,Native.DWM_BLURBEHIND@)">
            <summary>Enables the blur effect on a specified window.</summary>
            <param name="hWnd">The handle to the window on which the blur behind data is applied.</param>
            <param name="pBlurBehind">
            A reference to a <see cref="T:DWM_BLURBEHIND"/> structure that provides blur behind data.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmEnableComposition(Native.DWM_EC)">
            <summary>Enables or disables Desktop Window Manager (DWM) composition.</summary>
            <param name="uCompositionAction">
            <see cref="M:DWM_EC.ENABLECOMPOSITION"/> to enable DWM composition;
            <see cref="M:DWM_EC.DISABLECOMPOSITION"/> to disable composition. 
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>This function is deprecated as of Windows 8. DWM can no longer be programmatically disabled.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmIsCompositionEnabled(System.Boolean@)">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            Applications can listen for composition state changes by handling the <see cref="M:WM.DWMCOMPOSITIONCHANGED"/> notification.
            </summary>
            <param name="pfEnabled">
            A pointer to a value that, when this function returns successfully, receives <c>true</c> if DWM
            composition is enabled; otherwise, <c>false</c>.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Native.RasterOperation">
            <summary>Растровые операции.</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:Native.RasterOperation.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:Native.RasterOperation.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:Native.RasterOperation.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:Native.RasterOperation.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:Native.RasterOperation.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="T:Native.DibCompression">
            <summary>Тип сжатия DIB.</summary>
        </member>
        <member name="F:Native.DibCompression.RGB">
            <summary>An uncompressed format.</summary>
        </member>
        <member name="F:Native.DibCompression.RLE8">
            <summary>
            A run-length encoded (RLE) format for bitmaps with 8 bpp.
            The compression format is a 2-byte format consisting of a count byte followed by a byte containing a color index. 
            </summary>
        </member>
        <member name="F:Native.DibCompression.RLE4">
            <summary>
            An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte
            followed by two word-length color indexes. 
            </summary>
        </member>
        <member name="F:Native.DibCompression.BITFIELDS">
            <summary>
            Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the red, green,
            and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bpp bitmaps.
            </summary>
        </member>
        <member name="F:Native.DibCompression.JPEG">
            <summary>Indicates that the image is a JPEG image.</summary>
        </member>
        <member name="F:Native.DibCompression.PNG">
            <summary>Indicates that the image is a PNG image.</summary>
        </member>
        <member name="T:Native.DibUsage">
            <summary>Определяет тип изображения (с палитрой/без).</summary>
        </member>
        <member name="F:Native.DibUsage.DIB_RGB_COLORS">
            <summary>Color table in RGBs.</summary>
        </member>
        <member name="F:Native.DibUsage.DIB_PAL_COLORS">
            <summary>Color table in palette indices.</summary>
        </member>
        <member name="T:Native.StretchBltMode">
            <summary>Определяет способ растяжения/сжатия изображения.</summary>
        </member>
        <member name="F:Native.StretchBltMode.INVALID">
            <summary>Invalid value.</summary>
        </member>
        <member name="F:Native.StretchBltMode.INVALID_PARAMETER">
            <summary>One or more of the input parameters is invalid.</summary>
        </member>
        <member name="F:Native.StretchBltMode.BLACKONWHITE">
            <summary>
            Performs a Boolean AND operation using the color values for the eliminated and existing pixels.
            If the bitmap is a monochrome bitmap, this mode preserves black pixels at the expense of white pixels.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.WHITEONBLACK">
            <summary>
            Performs a Boolean OR operation using the color values for the eliminated and existing pixels.
            If the bitmap is a monochrome bitmap, this mode preserves white pixels at the expense of black pixels.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.COLORONCOLOR">
            <summary>
            Deletes the pixels. This mode deletes all eliminated lines of pixels without trying to preserve their information.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.HALFTONE">
            <summary>
            Maps pixels from the source rectangle into blocks of pixels in the destination rectangle.
            The average color over the destination block of pixels approximates the color of the source pixels.
            After setting the HALFTONE stretching mode, an application must call the SetBrushOrgEx function to set the brush origin.
            If it fails to do so, brush misalignment occurs.
            </summary>
        </member>
        <member name="T:Native.ScrollWindowFlags">
            <summary>Флаги для функции ScrollWindowEx.</summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.SCROLLCHILDREN">
            <summary>
            Scroll children within *lprcScroll.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.INVALIDATE">
            <summary>
            Invalidate after scrolling.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.ERASE">
            <summary>
            If SW_INVALIDATE, don't send <see cref="M:WM.ERASEBACKGROUND"/>.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.SMOOTHSCROLL">
            <summary>
            Use smooth scrolling.
            </summary>
        </member>
        <member name="T:Native.SW">
            <summary>Опции для <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/>.</summary>
        </member>
        <member name="F:Native.SW.FORCEMINIMIZE">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding.
            This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:Native.SW.HIDE">
            <summary>Hides the window and activates another window.</summary>
        </member>
        <member name="F:Native.SW.MAXIMIZE">
            <summary>Maximizes the specified window.</summary>
        </member>
        <member name="F:Native.SW.MINIMIZE">
            <summary>Minimizes the specified window and activates the next top-level window in the Z order.</summary>
        </member>
        <member name="F:Native.SW.RESTORE">
            <summary>
            Activates and displays the window.
            If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess
            function by the program that started the application. 
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window.
            This value is similar to <see cref="F:Native.SW.SHOWMINIMIZED"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNA">
            <summary>
            Displays the window in its current size and position.
            This value is similar to <see cref="F:Native.SW.SHOW"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position.
            This value is similar to <see cref="F:Native.SW.SHOWNORMAL"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNORMAL">
            <summary>
            Activates and displays a window.
            If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="T:Native.WM">
            <summary>Windows message.</summary>
        </member>
        <member name="T:Native.CS">
            <summary>Window class styles.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ff729176.aspx</seealso>
        </member>
        <member name="F:Native.CS.BYTEALIGNCLIENT">
            <summary>
            Aligns the window's client area on a byte boundary (in the x direction).
            This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Native.CS.BYTEALIGNWINDOW">
            <summary>
            Aligns the window on a byte boundary (in the x direction).
            This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Native.CS.CLASSDC">
            <summary>
            Allocates one device context to be shared by all windows in the class.
            Because window classes are process specific, it is possible for multiple threads of an application to create a window of the same class.
            It is also possible for the threads to attempt to use the device context simultaneously.
            When this happens, the system allows only one thread to successfully finish its drawing operation. 
            </summary>
        </member>
        <member name="F:Native.CS.DBLCLKS">
            <summary>
            Sends a double-click message to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class.
            </summary>
        </member>
        <member name="F:Native.CS.DROPSHADOW">
            <summary>
            Enables the drop shadow effect on a window. The effect is turned on and off through SPI_SETDROPSHADOW.
            Typically, this is enabled for small, short-lived windows such as menus to emphasize their Z order relationship to other windows.
            </summary>
        </member>
        <member name="F:Native.CS.GLOBALCLASS">
            <summary>
            Indicates that the window class is an application global class.
            For more information, see the "Application Global Classes" section of About Window Classes.
            </summary>
        </member>
        <member name="F:Native.CS.HREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the width of the client area.
            </summary>
        </member>
        <member name="F:Native.CS.NOCLOSE">
            <summary>
            Disables Close on the window menu.
            </summary>
        </member>
        <member name="F:Native.CS.OWNDC">
            <summary>
            Allocates a unique device context for each window in the class.
            </summary>
        </member>
        <member name="F:Native.CS.PARENTDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the child can draw on the parent.
            A window with the <see cref="F:Native.CS.PARENTDC"/> style bit receives a regular device context from the system's cache of device contexts.
            It does not give the child the parent's device context or device context settings.
            Specifying <see cref="F:Native.CS.PARENTDC"/> enhances an application's performance. 
            </summary>
        </member>
        <member name="F:Native.CS.SAVEBITS">
            <summary>
            Saves, as a bitmap, the portion of the screen image obscured by a window of this class.
            When the window is removed, the system uses the saved bitmap to restore the screen image, including other windows that were obscured.
            Therefore, the system does not send <see cref="M:WM.PAINT"/> messages to windows that were obscured if the memory used by the bitmap
            has not been discarded and if other screen actions have not invalidated the stored image. 
            </summary>
        </member>
        <member name="F:Native.CS.VREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the height of the client area.
            </summary>
        </member>
        <member name="T:Native.WS">
            <summary>Window styles.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms632600.aspx</seealso>
        </member>
        <member name="F:Native.WS.BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:Native.WS.CAPTION">
            <summary>The window has a title bar (includes the <see cref="F:Native.WS.BORDER"/> style).</summary>
        </member>
        <member name="F:Native.WS.CHILD">
            <summary>
            The window is a child window. A window with this style cannot have a menu bar.
            This style cannot be used with the <see cref="F:Native.WS.POPUP"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.CHILDWINDOW">
            <summary>Same as <see cref="F:Native.WS.CHILD"/> style.</summary>
        </member>
        <member name="F:Native.WS.CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within the parent window.
            This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:Native.WS.CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a
            <see cref="M:WM.PAINT"/> message, the <see cref="F:Native.WS.CLIPSIBLINGS"/> style clips all other overlapping child
            windows out of the region of the child window to be updated.
            If <see cref="F:Native.WS.CLIPSIBLINGS"/> is not specified and child windows overlap, it is possible, when drawing within
            the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Native.WS.DISABLED">
            <summary>
            The window is initially disabled. A disabled window cannot receive input from the user.
            To change this after a window has been created, use the EnableWindow function.
            </summary>
        </member>
        <member name="F:Native.WS.DLGFRAME">
            <summary>
            The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.
            </summary>
        </member>
        <member name="F:Native.WS.GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it,
            up to the next control with the <see cref="F:Native.WS.GROUP"/> style. The first control in each group usually has the <see cref="F:Native.WS.TABSTOP"/> style
            so that the user can move from group to group.
            The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            </summary>
        </member>
        <member name="F:Native.WS.HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:Native.WS.ICONIC">
            <summary>The window is initially minimized. Same as the <see cref="F:Native.WS.MINIMIZE"/> style.</summary>
        </member>
        <member name="F:Native.WS.MAXIMIZE">
            <summary>The window is initially maximized.</summary>
        </member>
        <member name="F:Native.WS.MAXIMIZEBOX">
            <summary>
            The window has a maximize button. Cannot be combined with the <see cref="M:WS_EX.CONTEXTHELP"/> style.
            The <see cref="F:Native.WS.SYSMENU"/> style must also be specified. 
            </summary>
        </member>
        <member name="F:Native.WS.MINIMIZE">
            <summary>
            The window is initially minimized. Same as the <see cref="F:Native.WS.ICONIC"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.MINIMIZEBOX">
            <summary>
            The window has a minimize button. Cannot be combined with the <see cref="M:WS_EX.CONTEXTHELP"/> style.
            The <see cref="F:Native.WS.SYSMENU"/> style must also be specified. 
            </summary>
        </member>
        <member name="F:Native.WS.OVERLAPPED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border.
            Same as the <see cref="F:Native.WS.TILED"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the <see cref="F:Native.WS.TILEDWINDOW"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.POPUP">
            <summary>
            The windows is a pop-up window. This style cannot be used with the <see cref="F:Native.WS.CHILD"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.POPUPWINDOW">
            <summary>
            The window is a pop-up window. The <see cref="F:Native.WS.CAPTION"/> and <see cref="F:Native.WS.POPUPWINDOW"/> styles
            must be combined to make the window menu visible.
            </summary>
        </member>
        <member name="F:Native.WS.SIZEBOX">
            <summary>
            The window has a sizing border. Same as the <see cref="F:Native.WS.THICKFRAME"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.SYSMENU">
            <summary>
            The window has a window menu on its title bar. The <see cref="F:Native.WS.CAPTION"/> style must also be specified.
            </summary>
        </member>
        <member name="F:Native.WS.TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the <see cref="F:Native.WS.TABSTOP"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.THICKFRAME">
            <summary>
            The window has a sizing border. Same as the <see cref="F:Native.WS.SIZEBOX"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.TILED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border.
            Same as the <see cref="F:Native.WS.OVERLAPPED"/> style. 
            </summary>
        </member>
        <member name="F:Native.WS.TILEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the <see cref="F:Native.WS.OVERLAPPEDWINDOW"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.VISIBLE">
            <summary>
            The window is initially visible.
            This style can be turned on and off by using the ShowWindow or SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WS.VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="T:Native.WS_EX">
            <summary>Extended window styles.</summary>
        </member>
        <member name="F:Native.WS_EX.ACCEPTFILES">
            <summary>The window accepts drag-drop files.</summary>
        </member>
        <member name="F:Native.WS_EX.APPWINDOW">
            <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
        </member>
        <member name="F:Native.WS_EX.CLIENTEDGE">
            <summary>The window has a border with a sunken edge.</summary>
        </member>
        <member name="F:Native.WS_EX.COMPOSITED">
            <summary>
            Paints all descendants of a window in bottom-to-top painting order using double-buffering.
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
            <remarks>Windows 2000:  This style is not supported.</remarks>
        </member>
        <member name="F:Native.WS_EX.CONTEXTHELP">
            <summary>
            The title bar of the window includes a question mark.
            When the user clicks the question mark, the cursor changes to a question mark with a pointer.
            If the user then clicks a child window, the child receives a <see cref="M:WM.HELP"/> message.
            The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command.
            The Help application displays a pop-up window that typically contains help for the child window.
            <see cref="F:Native.WS_EX.CONTEXTHELP"/> cannot be used with the <see cref="M:WS.MAXIMIZEBOX"/> or  <see cref="M:WS.MINIMIZEBOX"/> styles.
            </summary>
        </member>
        <member name="F:Native.WS_EX.CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window when performing
            navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:Native.WS_EX.DLGMODALFRAME">
            <summary>
            The window has a double border; the window can, optionally, be created with a title bar
            by specifying the <see cref="M:WS.CAPTION"/> style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LAYERED">
            <summary>
            The window is a layered window.
            This style cannot be used if the window has a class style of either <see cref="M:CS.OWNDC"/> or <see cref="M:CS.CLASSDC"/>.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LAYOUTRTL">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment,
            the horizontal origin of the window is on the right edge.
            Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:Native.WS_EX.LEFT">
            <summary>The window has generic left-aligned properties. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment,
            the vertical scroll bar (if present) is to the left of the client area.
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LTRREADING">
            <summary>The window text is displayed using left-to-right reading-order properties. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.MDICHILD">
            <summary>The window is a MDI child window.</summary>
        </member>
        <member name="F:Native.WS_EX.NOACTIVATE">
            <summary>
            A top-level window created with this style does not become the foreground window when the user clicks it.
            The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
            </summary>
        </member>
        <member name="F:Native.WS_EX.NOINHERITLAYOUT">
            <summary>The window does not pass its window layout to its child windows.</summary>
        </member>
        <member name="F:Native.WS_EX.NOPARENTNOTIFY">
            <summary>
            The child window created with this style does not send the <see cref="F:Native.WM.PARENTNOTIFY"/> message
            to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:Native.WS_EX.NOREDIRECTIONBITMAP">
            <summary>
            The window does not render to a redirection surface. This is for windows that do not have visible content
            or that use mechanisms other than surfaces to provide their visual.
            </summary>
        </member>
        <member name="F:Native.WS_EX.OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Native.WS_EX.PALETTEWINDOW">
            <summary>The window is palette window, which is a modeless dialog box that presents an array of commands.</summary>
        </member>
        <member name="F:Native.WS_EX.RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class.
            This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports
            reading-order alignment; otherwise, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.RIGHTSCROLLBAR">
            <summary>The vertical scroll bar (if present) is to the right of the client area. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment,
            the window text is displayed using right-to-left reading-order properties.
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.STATICEDGE">
            <summary>
            The window has a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:Native.WS_EX.TOOLWINDOW">
            <summary>
            The window is intended to be used as a floating toolbar. A tool window has a title bar that is shorter than
            a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear
            in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu,
            its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:Native.WS_EX.TOPMOST">
            <summary>
            The window should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
            To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WS_EX.TRANSPARENT">
            <summary>
            The window should not be painted until siblings beneath the window (that were created by the same thread) have been painted.
            The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:Native.WS_EX.WINDOWEDGE">
            <summary>The window has a border with a raised edge.</summary>
        </member>
        <member name="T:Native.CWP">
            <summary>Флаги для функции <see cref="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)"/>.</summary>
        </member>
        <member name="F:Native.CWP.ALL">
            <summary>Does not skip any child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPDISABLED">
            <summary>Skips disabled child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPINVISIBLE">
            <summary>Skips invisible child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPTRANSPARENT">
            <summary>Skips transparent child windows.</summary>
        </member>
        <member name="T:Native.SM">
            <summary>System metric.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724385.aspx</seealso>
        </member>
        <member name="F:Native.SM.ARRANGE">
            <summary>The flags that specify how the system arranged minimized windows. </summary>
        </member>
        <member name="F:Native.SM.CLEANBOOT">
            <summary>
            The value that specifies how the system is started:
            	0 = Normal boot
            	1 = Fail-safe boot
            	2 = Fail-safe with network boot
            A fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files.
            </summary>
        </member>
        <member name="F:Native.SM.CMONITORS">
            <summary>The number of display monitors on a desktop.</summary>
        </member>
        <member name="F:Native.SM.CMOUSEBUTTONS">
            <summary>The number of buttons on a mouse, or zero if no mouse is installed.</summary>
        </member>
        <member name="F:Native.SM.CXBORDER">
            <summary>
            The width of a window border, in pixels.
            This is equivalent to the <see cref="F:Native.SM.CXEDGE"/> value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:Native.SM.CXCURSOR">
            <summary>The width of a cursor, in pixels. The system cannot create cursors of other sizes.</summary>
        </member>
        <member name="F:Native.SM.CXDLGFRAME">
            <summary>This value is the same as <see cref="F:Native.SM.CXFIXEDFRAME"/>.</summary>
        </member>
        <member name="F:Native.SM.CXDOUBLECLK">
            <summary>
            The width of the rectangle around the location of a first click in a double-click sequence, in pixels.
            The second click must occur within the rectangle that is defined by <see cref="F:Native.SM.CXDOUBLECLK"/> and <see cref="F:Native.SM.CYDOUBLECLK"/>
            for the system to consider the two clicks a double-click.
            The two clicks must also occur within a specified time. 
            </summary>
        </member>
        <member name="F:Native.SM.CXPADDEDBORDER">
            <summary>
            The amount of border padding for captioned windows, in pixels. Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.SM.CXDRAG">
            <summary>
            The number of pixels on either side of a mouse-down point that the mouse pointer can move before a drag operation begins.
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.
            </summary>
        </member>
        <member name="F:Native.SM.CXEDGE">
            <summary>
            The width of a 3-D border, in pixels. This metric is the 3-D counterpart of <see cref="F:Native.SM.CXBORDER"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            <see cref="F:Native.SM.CXFIXEDFRAME"/> is the height of the horizontal border, and <see cref="F:Native.SM.CYFIXEDFRAME"/> is the width of the vertical border.
            This value is the same as SM_CXDLGFRAME.
            </summary>
        </member>
        <member name="F:Native.SM.CXFOCUSBORDER">
            <summary>
            The width of the left and right edges of the focus rectangle that the DrawFocusRect draws. This value is in pixels. 
            </summary>
        </member>
        <member name="F:Native.SM.CXFRAME">
            <summary>
            This value is the same as <see cref="F:Native.SM.CXSIZEFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXFULLSCREEN">
            <summary>
            The width of the client area for a full-screen window on the primary display monitor, in pixels.
            To get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Native.SM.CXHSCROLL">
            <summary>The width of the arrow bitmap on a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXHTHUMB">
            <summary>
            The width of the thumb box in a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CXICON">
            <summary>
            The default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions that
            <see cref="F:Native.SM.CXICON"/> and <see cref="F:Native.SM.CYICON"/> specifies.
            </summary>
        </member>
        <member name="F:Native.SM.CXICONSPACING">
            <summary>
            The width of a grid cell for items in large icon view, in pixels.
            Each item fits into a rectangle of size <see cref="F:Native.SM.CXICONSPACING"/> by <see cref="F:Native.SM.CYICONSPACING"/> when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CXICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXMAXIMIZED">
            <summary>The default width, in pixels, of a maximized top-level window on the primary display monitor.</summary>
        </member>
        <member name="F:Native.SM.CXMAXTRACK">
            <summary>
            The default maximum width of a window that has a caption and sizing borders, in pixels.
            This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CXMENUCHECK">
            <summary>The width of the default menu check-mark bitmap, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMENUSIZE">
            <summary>
            The width of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CXMIN">
            <summary>The minimum width of a window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMINIMIZED">
            <summary>The width of a minimized window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMINSPACING">
            <summary>
            The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CXMINIMIZED"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXMINTRACK">
            <summary>
            The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CXSCREEN">
            <summary>
            The width of the screen of the primary display monitor, in pixels. This is the same value obtained by calling GetDeviceCaps
            as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES).
            </summary>
        </member>
        <member name="F:Native.SM.CXSIZE">
            <summary>The width of a button in a window caption or title bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.
            <see cref="F:Native.SM.CXSIZEFRAME"/> is the width of the horizontal border, and <see cref="F:Native.SM.CYSIZEFRAME"/> is the height of the vertical border.
            This value is the same as SM_CXFRAME.
            </summary>
        </member>
        <member name="F:Native.SM.CXSMICON">
            <summary>
            The recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:Native.SM.CXSMSIZE">
            <summary>The width of small caption buttons, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXVIRTUALSCREEN">
            <summary>
            The width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CXVIRTUALSCREEN"/> metric is the coordinates for the left side of the virtual screen. 
            </summary>
        </member>
        <member name="F:Native.SM.CXVSCROLL">
            <summary>The width of a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYBORDER">
            <summary>
            The height of a window border, in pixels. This is equivalent to the <see cref="F:Native.SM.CYEDGE"/> value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:Native.SM.CYCAPTION">
            <summary>The height of a caption area, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYCURSOR">
            <summary>The height of a cursor, in pixels. The system cannot create cursors of other sizes.</summary>
        </member>
        <member name="F:Native.SM.CYDLGFRAME">
            <summary>This value is the same as <see cref="F:Native.SM.CYFIXEDFRAME"/>.</summary>
        </member>
        <member name="F:Native.SM.CYDOUBLECLK">
            <summary>
            The height of the rectangle around the location of a first click in a double-click sequence, in pixels.
            The second click must occur within the rectangle defined by <see cref="F:Native.SM.CXDOUBLECLK"/> and <see cref="F:Native.SM.CYDOUBLECLK"/>
            for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time. 
            </summary>
        </member>
        <member name="F:Native.SM.CYDRAG">
            <summary>
            The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins.
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            If this value is negative, it is subtracted from above the mouse-down point and added below it. 
            </summary>
        </member>
        <member name="F:Native.SM.CYEDGE">
            <summary>
            The height of a 3-D border, in pixels. This is the 3-D counterpart of <see cref="F:Native.SM.CYBORDER"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            <see cref="F:Native.SM.CXFIXEDFRAME"/> is the height of the horizontal border, and <see cref="F:Native.SM.CYFIXEDFRAME"/> is the width of the vertical border.
            This value is the same as <see cref="F:Native.SM.CYDLGFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFOCUSBORDER">
            <summary>The height of the top and bottom edges of the focus rectangle drawn by DrawFocusRect. This value is in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYFRAME">
            <summary>
            This value is the same as <see cref="F:Native.SM.CYSIZEFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFULLSCREEN">
            <summary>
            The height of the client area for a full-screen window on the primary display monitor, in pixels.
            To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Native.SM.CYHSCROLL">
            <summary>The height of a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYICON">
            <summary>
            The default height of an icon, in pixels.
            The LoadIcon function can load only icons with the dimensions <see cref="F:Native.SM.CXICON"/> and <see cref="F:Native.SM.CYICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYICONSPACING">
            <summary>
            The height of a grid cell for items in large icon view, in pixels.
            Each item fits into a rectangle of size <see cref="F:Native.SM.CXICONSPACING"/> by <see cref="F:Native.SM.CYICONSPACING"/> when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CYICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYKANJIWINDOW">
            <summary>
            For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CYMAXIMIZED">
            <summary>
            The default height, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:Native.SM.CYMAXTRACK">
            <summary>
            The default maximum height of a window that has a caption and sizing borders, in pixels.
            This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CYMENU">
            <summary>The height of a single-line menu bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMENUCHECK">
            <summary>The height of the default menu check-mark bitmap, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMENUSIZE">
            <summary>
            The height of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CYMIN">
            <summary>The minimum height of a window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMINIMIZED">
            <summary>The height of a minimized window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMINSPACING">
            <summary>
            The height of a grid cell for a minimized window, in pixels.
            Each minimized window fits into a rectangle this size when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CYMINIMIZED"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYMINTRACK">
            <summary>
            The minimum tracking height of a window, in pixels.
            The user cannot drag the window frame to a size smaller than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CYSCREEN">
            <summary>
            The height of the screen of the primary display monitor, in pixels.
            This is the same value obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES).
            </summary>
        </member>
        <member name="F:Native.SM.CYSIZE">
            <summary>The height of a button in a window caption or title bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.
            <see cref="F:Native.SM.CXSIZEFRAME"/> is the width of the horizontal border, and <see cref="F:Native.SM.CYSIZEFRAME"/> is the height of the vertical border.
            This value is the same as <see cref="F:Native.SM.CYFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYSMCAPTION">
            <summary>The height of a small caption, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYSMICON">
            <summary>The recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.</summary>
        </member>
        <member name="F:Native.SM.CYSMSIZE">
            <summary>The height of small caption buttons, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYVIRTUALSCREEN">
            <summary>
            The height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.YVIRTUALSCREEN"/> metric is the coordinates for the top of the virtual screen.
            </summary>
        </member>
        <member name="F:Native.SM.CYVSCROLL">
            <summary>The height of the arrow bitmap on a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYVTHUMB">
            <summary>The height of the thumb box in a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.DBCSENABLED">
            <summary>Nonzero if User32.dll supports DBCS; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.DEBUG">
            <summary>Nonzero if the debug version of User.exe is installed; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.DIGITIZER">
            <summary>
            Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input service is started; otherwise, 0.
            The return value is a bitmask that specifies the type of digitizer input supported by the device.
            </summary>
        </member>
        <member name="F:Native.SM.IMMENABLED">
            <summary>Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.MAXIMUMTOUCHES">
            <summary>Nonzero if there are digitizers in the system; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.MEDIACENTER">
            <summary>Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.</summary>
        </member>
        <member name="F:Native.SM.MENUDROPALIGNMENT">
            <summary>Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are left-aligned.</summary>
        </member>
        <member name="F:Native.SM.MIDEASTENABLED">
            <summary>Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.</summary>
        </member>
        <member name="F:Native.SM.MOUSEPRESENT">
            <summary>
            Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice
            and because some systems detect the presence of the port instead of the presence of a mouse.
            </summary>
        </member>
        <member name="F:Native.SM.MOUSEHORIZONTALWHEELPRESENT">
            <summary>Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.</summary>
        </member>
        <member name="F:Native.SM.MOUSEWHEELPRESENT">
            <summary>Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.</summary>
        </member>
        <member name="F:Native.SM.NETWORK">
            <summary>
            The least significant bit is set if a network is present; otherwise, it is cleared.
            The other bits are reserved for future use.
            </summary>
        </member>
        <member name="F:Native.SM.PENWINDOWS">
            <summary>
            Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.
            </summary>
        </member>
        <member name="F:Native.SM.REMOTECONTROL">
            <summary>
            This system metric is used in a Terminal Services environment to determine if the current
            Terminal Server session is being remotely controlled.
            Its value is nonzero if the current session is remotely controlled; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.REMOTESESSION">
            <summary>
            This system metric is used in a Terminal Services environment.
            If the calling process is associated with a Terminal Services client session, the return value is nonzero.
            If the calling process is associated with the Terminal Services console session, the return value is 0. 
            </summary>
        </member>
        <member name="F:Native.SM.SAMEDISPLAYFORMAT">
            <summary>
            Nonzero if all the display monitors have the same color format, otherwise, 0.
            Two displays can have the same bit depth, but different color formats.
            For example, the red, green, and blue pixels can be encoded with different numbers of bits,
            or those bits can be located in different places in a pixel color value.
            </summary>
        </member>
        <member name="F:Native.SM.SECURE">
            <summary>This system metric should be ignored; it always returns 0.</summary>
        </member>
        <member name="F:Native.SM.SERVERR2">
            <summary>
            The build number if the system is Windows Server 2003 R2; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SHOWSOUNDS">
            <summary>
            Nonzero if the user requires an application to present information visually in
            situations where it would otherwise present the information only in audible form; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SHUTTINGDOWN">
            <summary>Nonzero if the current session is shutting down; otherwise, 0.</summary>
            <remarks>Windows 2000:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.SM.SLOWMACHINE">
            <summary>
            Nonzero if the computer has a low-end (slow) processor; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SWAPBUTTON">
            <summary>
            Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.STARTER">
            <summary>
            Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter,
            or Windows XP Starter Edition; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.TABLETPC">
            <summary>
            Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current
            operating system is Windows Vista or Windows 7 and the Tablet PC Input service is started; otherwise, 0.
            The <see cref="F:Native.SM.DIGITIZER"/> setting indicates the type of digitizer input supported by a device running Windows 7
            or Windows Server 2008 R2.
            </summary>
        </member>
        <member name="F:Native.SM.XVIRTUALSCREEN">
            <summary>
            The coordinates for the left side of the virtual screen.
            The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CXVIRTUALSCREEN"/> metric is the width of the virtual screen.
            </summary>
        </member>
        <member name="F:Native.SM.YVIRTUALSCREEN">
            <summary>
            The coordinates for the top of the virtual screen.
            The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CYVIRTUALSCREEN"/> metric is the height of the virtual screen.
            </summary>
        </member>
        <member name="T:Native.DeviceCaps">
            <summary>Device caps.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd144877.aspx</seealso>
        </member>
        <member name="F:Native.DeviceCaps.DRIVERVERSION">
            <summary>Device driver version.</summary>
        </member>
        <member name="F:Native.DeviceCaps.TECHNOLOGY">
            <summary>Device classification.</summary>
        </member>
        <member name="F:Native.DeviceCaps.HORZSIZE">
            <summary>Horizontal size in millimeters.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VERTSIZE">
            <summary>Vertical size in millimeters.</summary>
        </member>
        <member name="F:Native.DeviceCaps.HORZRES">
            <summary>Horizontal width in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VERTRES">
            <summary>Vertical height in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.BITSPIXEL">
            <summary>Number of bits per pixel.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PLANES">
            <summary>Number of planes.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMBRUSHES">
            <summary>Number of brushes the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMPENS">
            <summary>Number of pens the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMMARKERS">
            <summary>Number of markers the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMFONTS">
            <summary>Number of fonts the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMCOLORS">
            <summary>Number of colors the device supports.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PDEVICESIZE">
            <summary>Size required for device descriptor.</summary>
        </member>
        <member name="F:Native.DeviceCaps.CURVECAPS">
            <summary>Curve capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LINECAPS">
            <summary>Line capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.POLYGONALCAPS">
            <summary>Polygonal capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.TEXTCAPS">
            <summary>Text capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.CLIPCAPS">
            <summary>Clipping capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.RASTERCAPS">
            <summary>Bitblt capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTX">
            <summary>Length of the X leg.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTY">
            <summary>Length of the Y leg.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTXY">
            <summary>Length of the hypotenuse.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SHADEBLENDCAPS">
            <summary>Shading and Blending caps.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LOGPIXELSX">
            <summary>Logical pixels inch in X.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LOGPIXELSY">
            <summary>Logical pixels inch in Y.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SIZEPALETTE">
            <summary>Number of entries in physical palette.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMRESERVED">
            <summary>Number of reserved entries in palette.</summary>
        </member>
        <member name="F:Native.DeviceCaps.COLORRES">
            <summary>Actual color resolution.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALWIDTH">
            <summary>Physical Width in device units.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALHEIGHT">
            <summary>Physical Height in device units.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALOFFSETX">
            <summary>Physical Printable Area x margin.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALOFFSETY">
            <summary>Physical Printable Area y margin.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SCALINGFACTORX">
            <summary>Scaling factor x.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SCALINGFACTORY">
            <summary>Scaling factor y.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VREFRESH">
            <summary>Current vertical refresh rate of the display device (for displays only) in Hz.</summary>
        </member>
        <member name="F:Native.DeviceCaps.DESKTOPVERTRES">
            <summary>Horizontal width of entire desktop in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.DESKTOPHORZRES">
            <summary>Vertical height of entire desktop in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.BLTALIGNMENT">
            <summary>Preferred blt alignment.</summary>
        </member>
        <member name="T:Native.SWP">
            <summary>Flags for <see cref="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)"/>.</summary>
        </member>
        <member name="F:Native.SWP.NOSIZE">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
        </member>
        <member name="F:Native.SWP.NOMOVE">
            <summary>Retains the current position (ignores x and y parameters).</summary>
        </member>
        <member name="F:Native.SWP.NOZORDER">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
        </member>
        <member name="F:Native.SWP.NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs.
            This applies to the client area, the nonclient area (including the title bar and scroll bars),
            and any part of the parent window uncovered as a result of the window being moved. When this flag is set,
            the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:Native.SWP.NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set, the window is activated and moved to the
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Native.SWP.DRAWFRAME">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
        </member>
        <member name="F:Native.SWP.FRAMECHANGED">
            <summary>
            Applies new frame styles set using the <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function.
            Sends a <see cref="M:WM.NCCALCSIZE"/> message to the window, even if the window's size is not being changed.
            If this flag is not specified, <see cref="M:WM.NCCALCSIZE"/> is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:Native.SWP.SHOWWINDOW">
            <summary>Displays the window.</summary>
        </member>
        <member name="F:Native.SWP.HIDEWINDOW">
            <summary>Hides the window.</summary>
        </member>
        <member name="F:Native.SWP.NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area.
            If this flag is not specified, the valid contents of the client area are saved and copied back
            into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:Native.SWP.NOOWNERZORDER">
            <summary>Does not change the owner window's position in the Z order.</summary>
        </member>
        <member name="F:Native.SWP.NOREPOSITION">
            <summary>Same as the <see cref="F:Native.SWP.NOOWNERZORDER"/> flag.</summary>
        </member>
        <member name="F:Native.SWP.NOSENDCHANGING">
            <summary>Prevents the window from receiving the <see cref="M:WM.WINDOWPOSCHANGING"/> message.</summary>
        </member>
        <member name="F:Native.SWP.DEFERERASE">
            <summary>Prevents generation of the <see cref="M:WM.SYNCPAINT"/> message.</summary>
        </member>
        <member name="F:Native.SWP.ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues,
            the system posts the request to the thread that owns the window.
            This prevents the calling thread from blocking its execution while other threads process the request. 
            </summary>
        </member>
        <member name="T:Native.DWMWA">
            <summary>DWM Window Attributes.</summary>
        </member>
        <member name="F:Native.DWMWA.NCRENDERING_ENABLED">
            <summary>[get] Is non-client rendering enabled/disabled.</summary>
        </member>
        <member name="F:Native.DWMWA.NCRENDERING_POLICY">
            <summary>[set] Non-client rendering policy.</summary>
        </member>
        <member name="F:Native.DWMWA.TRANSITIONS_FORCEDISABLED">
            <summary>[set] Potentially enable/forcibly disable transitions.</summary>
        </member>
        <member name="F:Native.DWMWA.ALLOW_NCPAINT">
            <summary>[set] Allow contents rendered in the non-client area to be visible on the DWM-drawn frame.</summary>
        </member>
        <member name="F:Native.DWMWA.CAPTION_BUTTON_BOUNDS">
            <summary>[get] Bounds of the caption button area in window-relative space.</summary>
        </member>
        <member name="F:Native.DWMWA.NONCLIENT_RTL_LAYOUT">
            <summary>[set] Is non-client content RTL mirrored.</summary>
        </member>
        <member name="F:Native.DWMWA.FORCE_ICONIC_REPRESENTATION">
            <summary>[set] Force this window to display iconic thumbnails.</summary>
        </member>
        <member name="F:Native.DWMWA.FLIP3D_POLICY">
            <summary>[set] Designates how Flip3D will treat the window.</summary>
        </member>
        <member name="F:Native.DWMWA.EXTENDED_FRAME_BOUNDS">
            <summary>[get] Gets the extended frame bounds rectangle in screen space.</summary>
        </member>
        <member name="F:Native.DWMWA.HAS_ICONIC_BITMAP">
            <summary>[set] Indicates an available bitmap when there is no better thumbnail representation.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.DISALLOW_PEEK">
            <summary>[set] Don't invoke Peek on the window.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.EXCLUDED_FROM_PEEK">
            <summary>[set] LivePreview exclusion information.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.CLOAK">
            <summary>[set] Cloak or uncloak the window.</summary>
            <remarks>Do not use.</remarks>
        </member>
        <member name="F:Native.DWMWA.CLOAKED">
            <summary>[get] Gets the cloaked state of the window.</summary>
            <remarks>Windows 7 and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.FREEZE_REPRESENTATION">
            <summary>[set] Force this window to freeze the thumbnail without live update.</summary>
            <remarks>Windows 7 and earlier:  This value is not supported.</remarks>
        </member>
        <member name="T:Native.DWMNCRP">
            <summary>Non-client rendering policy attribute values.</summary>
        </member>
        <member name="F:Native.DWMNCRP.USEWINDOWSTYLE">
            <summary>Enable/disable non-client rendering based on window style.</summary>
        </member>
        <member name="F:Native.DWMNCRP.DISABLED">
            <summary>Disabled non-client rendering; window style is ignored.</summary>
        </member>
        <member name="F:Native.DWMNCRP.ENABLED">
            <summary>Enabled non-client rendering; window style is ignored.</summary>
        </member>
        <member name="T:Native.DWMFLIP3D">
            <summary>Values designating how Flip3D treats a given window.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.DEFAULT">
            <summary>Hide or include the window in Flip3D based on window style and visibility.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.EXCLUDEBELOW">
            <summary>Display the window under Flip3D and disabled.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.EXCLUDEABOVE">
            <summary>Display the window above Flip3D and enabled.</summary>
        </member>
        <member name="T:Native.DWM_CLOAKED">
            <summary>Cloaked flags describing why a window is cloaked.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.APP">
            <summary>The window was cloaked by its owner application.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.SHELL">
            <summary>The window was cloaked by the Shell.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.INHERITED">
            <summary>The cloak value was inherited from its owner window.</summary>
        </member>
        <member name="F:Native.DWM_BB.ENABLE">
            <summary>A value for the fEnable member has been specified.</summary>
        </member>
        <member name="F:Native.DWM_BB.BLURREGION">
            <summary>A value for the hRgnBlur member has been specified.</summary>
        </member>
        <member name="F:Native.DWM_BB.TRANSITIONONMAXIMIZED">
            <summary>A value for the fTransitionOnMaximized member has been specified.</summary>
        </member>
        <member name="T:Native.FLASHW">
            <summary>Flags for <see cref="T:FLASHWINFO"/>.</summary>
        </member>
        <member name="F:Native.FLASHW.ALL">
            <summary>
            Flash both the window caption and taskbar button.
            This is equivalent to setting the CAPTION | TRAY flags.
            </summary>
        </member>
        <member name="F:Native.FLASHW.CAPTION">
            <summary>Flash the window caption.</summary>
        </member>
        <member name="F:Native.FLASHW.STOP">
            <summary>Stop flashing. The system restores the window to its original state.</summary>
        </member>
        <member name="F:Native.FLASHW.TIMER">
            <summary>Flash continuously, until the STOP flag is set.</summary>
        </member>
        <member name="F:Native.FLASHW.TIMERNOFG">
            <summary>Flash continuously until the window comes to the foreground.</summary>
        </member>
        <member name="F:Native.FLASHW.TRAY">
            <summary>Flash the taskbar button.</summary>
        </member>
        <member name="T:Native.MONITOR">
            <summary>
            Flags for <see cref="M:User32.MonitorFromWindow()"/>.
            Determines the function's return value if the window does not intersect any display monitor.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTONULL">
            <summary>
            Returns IntPtr.Zero.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTOPRIMARY">
            <summary>
            Returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTONEAREST">
            <summary>
            Returns a handle to the display monitor that is nearest to the window.
            </summary>
        </member>
        <member name="F:Native.ULW.ALPHA">
            <summary>
            Use pblend as the blend function.
            If the display mode is 256 colors or less, the effect of this value is the same as the effect of ULW_OPAQUE.
            </summary>
        </member>
        <member name="F:Native.ULW.COLORKEY">
            <summary>Use crKey as the transparency color.</summary>
        </member>
        <member name="F:Native.ULW.ULW_OPAQUE">
            <summary>Draw an opaque layered window.</summary>
        </member>
        <member name="T:Native.AW">
            <summary>Flags for <see cref="M:User32.AnimateWindow"/>.</summary>
        </member>
        <member name="F:Native.AW.ACTIVATE">
            <summary>Activates the window. Do not use this value with <see cref="M:HIDE"/>.</summary>
        </member>
        <member name="F:Native.AW.BLEND">
            <summary>Uses a fade effect. This flag can be used only if hwnd is a top-level window.</summary>
        </member>
        <member name="F:Native.AW.CENTER">
            <summary>
            Makes the window appear to collapse inward if <see cref="M:HIDE"/> is used or expand outward
            if the <see cref="M:HIDE"/> is not used. The various direction flags have no effect.
            </summary>
        </member>
        <member name="F:Native.AW.HIDE">
            <summary>Hides the window. By default, the window is shown.</summary>
        </member>
        <member name="F:Native.AW.HOR_POSITIVE">
            <summary>
            Animates the window from left to right.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.HOR_NEGATIVE">
            <summary>
            Animates the window from right to left.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.SLIDE">
            <summary>
            Uses slide animation. By default, roll animation is used.
            This flag is ignored when used with <see cref="M:CENTER"/>.
            </summary>
        </member>
        <member name="F:Native.AW.VER_POSITIVE">
            <summary>
            Animates the window from top to bottom.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.VER_NEGATIVE">
            <summary>
            Animates the window from bottom to top.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="T:Native.RDW">
            <summary>Flags for <see cref="M:User32.RedrawWindow"/>.</summary>
        </member>
        <member name="F:Native.RDW.INVALIDATE">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL,
            RDW_INVALIDATE invalidates the entire window.
            </summary>
        </member>
        <member name="F:Native.RDW.INTERNALPAINT">
            <summary>
            Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.
            </summary>
        </member>
        <member name="F:Native.RDW.ERASE">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:Native.RDW.VALIDATE">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:Native.RDW.NOINTERNALPAINT">
            <summary>
            Suppresses any pending internal WM_PAINT messages. This flag does not affect WM_PAINT
            messages resulting from a non-NULL update area.
            </summary>
        </member>
        <member name="F:Native.RDW.NOERASE">
            <summary>Suppresses any pending WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:Native.RDW.NOCHILDREN">
            <summary>Excludes child windows, if any, from the repainting operation.</summary>
        </member>
        <member name="F:Native.RDW.ALLCHILDREN">
            <summary>Includes child windows, if any, in the repainting operation.</summary>
        </member>
        <member name="F:Native.RDW.UPDATENOW">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values,
            to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.
            </summary>
        </member>
        <member name="F:Native.RDW.ERASENOW">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values,
            to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            </summary>
        </member>
        <member name="F:Native.RDW.FRAME">
            <summary>
            Causes any part of the nonclient area of the window that intersects the update region to receive a WM_NCPAINT message.
            The RDW_INVALIDATE flag must also be specified; otherwise, RDW_FRAME has no effect. The WM_NCPAINT message is typically
            not sent during the execution of RedrawWindow unless either RDW_UPDATENOW or RDW_ERASENOW is specified.
            </summary>
        </member>
        <member name="F:Native.RDW.NOFRAME">
            <summary>
            Suppresses any pending WM_NCPAINT messages. This flag must be used with RDW_VALIDATE and is typically
            used with RDW_NOCHILDREN. RDW_NOFRAME should be used with care, as it could cause parts of a window to be painted improperly.
            </summary>
        </member>
        <member name="T:Native.StockObject">
            <summary>Stock objects.</summary>
        </member>
        <member name="F:Native.StockObject.WHITE_BRUSH">
            <summary>White brush.</summary>
        </member>
        <member name="F:Native.StockObject.LTGRAY_BRUSH">
            <summary>Light gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.GRAY_BRUSH">
            <summary>Gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.DKGRAY_BRUSH">
            <summary>Dark gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.BLACK_BRUSH">
            <summary>Black brush.</summary>
        </member>
        <member name="F:Native.StockObject.NULL_BRUSH">
            <summary>Null brush (equivalent to HOLLOW_BRUSH).</summary>
        </member>
        <member name="F:Native.StockObject.HOLLOW_BRUSH">
            <summary>Hollow brush (equivalent to NULL_BRUSH).</summary>
        </member>
        <member name="F:Native.StockObject.WHITE_PEN">
            <summary>White pen.</summary>
        </member>
        <member name="F:Native.StockObject.BLACK_PEN">
            <summary>Black pen.</summary>
        </member>
        <member name="F:Native.StockObject.NULL_PEN">
            <summary>Null pen. The null pen draws nothing.</summary>
        </member>
        <member name="F:Native.StockObject.OEM_FIXED_FONT">
            <summary>Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font.</summary>
        </member>
        <member name="F:Native.StockObject.ANSI_FIXED_FONT">
            <summary>Windows fixed-pitch (monospace) system font.</summary>
        </member>
        <member name="F:Native.StockObject.ANSI_VAR_FONT">
            <summary>Windows variable-pitch (proportional space) system font.</summary>
        </member>
        <member name="F:Native.StockObject.SYSTEM_FONT">
            <summary>
            System font. By default, the system uses the system font to draw menus, dialog box controls, and text.
            It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows.
            The default system font is Tahoma.
            </summary>
        </member>
        <member name="F:Native.StockObject.DEVICE_DEFAULT_FONT">
            <summary> Device-dependent font.</summary>
        </member>
        <member name="F:Native.StockObject.DEFAULT_PALETTE">
            <summary>Default palette. This palette consists of the static colors in the system palette.</summary>
        </member>
        <member name="F:Native.StockObject.SYSTEM_FIXED_FONT">
            <summary></summary>
        </member>
        <member name="F:Native.StockObject.DEFAULT_GUI_FONT">
            <summary>
            Default font for user interface objects such as menus and dialog boxes.
            It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows.
            The default font is Tahoma.
            </summary>
        </member>
        <member name="F:Native.StockObject.DC_BRUSH">
            <summary>
            Solid color brush. The default color is white.
            The color can be changed by using the SetDCBrushColor function.
            For more information, see the Remarks section.
            </summary>
        </member>
        <member name="F:Native.StockObject.DC_PEN">
            <summary>
            Solid pen color. The default color is white.
            The color can be changed by using the SetDCPenColor function.
            For more information, see the Remarks section.
            </summary>
        </member>
        <member name="T:Native.TABLET">
            <summary>Flags for <see cref="M:WM.TABLET_QUERYSYSTEMGESTURESTATUS"/>.</summary>
            <seealso>https://msdn.microsoft.com/en-us/library/bb969148%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="T:Native.POINTER_MESSAGE_FLAG">
            <summary>Pointer message flags.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.NEW">
            <summary>New pointer.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.INRANGE">
            <summary>Pointer has not departed.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.INCONTACT">
            <summary>Pointer is in contact.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FIRSTBUTTON">
            <summary>Primary action.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.SECONDBUTTON">
            <summary>Secondary action.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.THIRDBUTTON">
            <summary>Third button</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FOURTHBUTTON">
            <summary>Fourth button</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FIFTHBUTTON">
            <summary>Fifth button.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.PRIMARY">
            <summary>Pointer is primary.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.CONFIDENCE">
            <summary>Pointer is considered unlikely to be accidental.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.CANCELED">
            <summary>Pointer is departing in an abnormal manner.</summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES">
            <summary>
            If this value is used, and the executable module is a DLL, the system does not call DllMain for process and thread initialization and termination. Also, the system does not load additional executable modules that are referenced by the specified module.
            Note Do not use this value; it is provided only for backward compatibility. If you are planning to access only data or resources in the DLL, use LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_IMAGE_RESOURCE or both. Otherwise, load the library as a DLL or executable module using the LoadLibrary function.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_IGNORE_CODE_AUTHZ_LEVEL">
            <summary>
            If this value is used, the system does not check AppLocker rules or apply Software Restriction Policies for the DLL. This action applies only to the DLL being loaded and not to its dependencies. This value is recommended for use in setup programs that must run extracted DLLs during installation.
            Windows Server 2008 R2 and Windows 7:  On systems with KB2532445 installed, the caller must be running as "LocalSystem" or "TrustedInstaller"; otherwise the system ignores this flag.For more information, see "You can circumvent AppLocker rules by using an Office macro on a computer that is running Windows 7 or Windows Server 2008 R2" in the Help and Support Knowledge Base at http://support.microsoft.com/kb/2532445.
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  AppLocker was introduced in Windows 7 and Windows Server 2008 R2.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE">
            <summary>
            If this value is used, the system maps the file into the calling process's virtual address space as if it were a data file. Nothing is done to execute or prepare to execute the mapped file. Therefore, you cannot call functions like GetModuleFileName, GetModuleHandle or GetProcAddress with this DLL. Using this value causes writes to read-only memory to raise an access violation. Use this flag when you want to load a DLL only to extract messages or resources from it.
            This value can be used with LOAD_LIBRARY_AS_IMAGE_RESOURCE.For more information, see Remarks.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE">
            <summary>
            Similar to LOAD_LIBRARY_AS_DATAFILE, except that the DLL file is opened with exclusive write access for the calling process.Other processes cannot open the DLL file for write access while it is in use.However, the DLL can still be opened by other processes.
            This value can be used with LOAD_LIBRARY_AS_IMAGE_RESOURCE.For more information, see Remarks.
            Windows Server 2003 and Windows XP:  This value is not supported until Windows Vista.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_AS_IMAGE_RESOURCE">
            <summary>
            If this value is used, the system maps the file into the process's virtual address space as an image file. However, the loader does not load the static imports or perform the other usual initialization steps. Use this flag when you want to load a DLL only to extract messages or resources from it.
            Unless the application depends on the file having the in-memory layout of an image, this value should be used with either LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_DATAFILE.For more information, see the Remarks section.
            Windows Server 2003 and Windows XP:  This value is not supported until Windows Vista.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_APPLICATION_DIR">
            <summary>
            If this value is used, the application's installation directory is searched for the DLL and its dependencies. Directories in the standard search path are not searched. This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS">
            <summary>
            This value is a combination of LOAD_LIBRARY_SEARCH_APPLICATION_DIR, LOAD_LIBRARY_SEARCH_SYSTEM32, and LOAD_LIBRARY_SEARCH_USER_DIRS. Directories in the standard search path are not searched.This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            This value represents the recommended maximum number of directories an application should include in its DLL search path.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR">
            <summary>
            If this value is used, the directory that contains the DLL is temporarily added to the beginning of the list of directories that are searched for the DLL's dependencies. Directories in the standard search path are not searched.
            The lpFileName parameter must specify a fully qualified path.This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            For example, if Lib2.dll is a dependency of C:\Dir1\Lib1.dll, loading Lib1.dll with this value causes the system to search for Lib2.dll only in C:\Dir1.To search for Lib2.dll in C:\Dir1 and all of the directories in the DLL search path, combine this value with LOAD_LIBRARY_DEFAULT_DIRS.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_SYSTEM32">
            <summary>
            If this value is used, %windows%\system32 is searched for the DLL and its dependencies.Directories in the standard search path are not searched.This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_LIBRARY_SEARCH_USER_DIRS">
            <summary>
            If this value is used, directories added using the AddDllDirectory or the SetDllDirectory function are searched for the DLL and its dependencies.If more than one directory has been added, the order in which the directories are searched is unspecified.Directories in the standard search path are not searched.This value cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH">
            <summary>
            If this value is used and lpFileName specifies an absolute path, the system uses the alternate file search strategy discussed in the Remarks section to find associated executable modules that the specified module causes to be loaded. If this value is used and lpFileName specifies a relative path, the behavior is undefined.
            If this value is not used, or if lpFileName does not specify a path, the system uses the standard search strategy discussed in the Remarks section to find associated executable modules that the specified module causes to be loaded.
            This value cannot be combined with any LOAD_LIBRARY_SEARCH flag.
            </summary>
        </member>
        <member name="T:Native.SEM">
            <summary>Flags for <see cref="M:Native.Kernel32.SetErrorMode(Native.SEM)"/>.</summary>
        </member>
        <member name="F:Native.SEM.Default">
            <summary>Use the system default, which is to display all error dialog boxes.</summary>
        </member>
        <member name="F:Native.SEM.FAILCRITICALERRORS">
            <summary>
            The system does not display the critical-error-handler message box.
            Instead, the system sends the error to the calling process.
            </summary>
            <remarks>
            Best practice is that all applications call the process-wide SetErrorMode function with a parameter of <see cref="M:SEM.FAILCRITICALERRORS"/> at startup.
            This is to prevent error mode dialogs from hanging the application.
            </remarks>
        </member>
        <member name="F:Native.SEM.NOALIGNMENTFAULTEXCEPT">
            <summary>
            The system automatically fixes memory alignment faults and makes them invisible to the application.
            It does this for the calling process and any descendant processes.
            This feature is only supported by certain processor architectures.
            After this value is set for a process, subsequent attempts to clear the value are ignored.
            </summary>
        </member>
        <member name="F:Native.SEM.NOGPFAULTERRORBOX">
            <summary>
            The system does not display the Windows Error Reporting dialog.
            </summary>
        </member>
        <member name="F:Native.SEM.NOOPENFILEERRORBOX">
            <summary>
            The system does not display a message box when it fails to find a file.
            Instead, the error is returned to the calling process.
            </summary>
        </member>
        <member name="T:Native.BITMAPINFOHEADER">
            <summary>
            The BITMAPINFOHEADER structure contains information about the dimensions and color format of a DIB.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd183376.aspx</seealso>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biSize">
            <summary>The number of bytes required by the structure.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biWidth">
            <summary>The width of the bitmap, in pixels.</summary>
            <remarks>
            If biCompression is BI_JPEG or BI_PNG, the biWidth member specifies the width of the
            decompressed JPEG or PNG image file, respectively.
            </remarks>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biHeight">
            <summary>
            The height of the bitmap, in pixels.
            If biHeight is positive, the bitmap is a bottom-up DIB and its origin is the lower-left corner.
            If biHeight is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            </summary>
            <remarks>
            If biHeight is negative, indicating a top-down DIB, biCompression must be either BI_RGB or BI_BITFIELDS. Top-down DIBs cannot be compressed.
             If biCompression is BI_JPEG or BI_PNG, the biHeight member specifies the height of the decompressed JPEG or PNG image file, respectively.
            </remarks>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biPlanes">
            <summary>The number of planes for the target device. This value must be set to 1.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biBitCount">
            <summary>
            The number of bits-per-pixel. The biBitCount member of the BITMAPINFOHEADER structure determines the number of bits
            that define each pixel and the maximum number of colors in the bitmap. This member must be one of the following values:
            0, 1, 4, 8, 16, 24, 32
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biCompression">
            <summary>
            The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biSizeImage">
            <summary>
            The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. An application
            can use this value to select a bitmap from a resource group that best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>The vertical resolution, in pixels-per-meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biClrUsed">
            <summary>
            The number of color indexes in the color table that are actually used by the bitmap.
            If this value is zero, the bitmap uses the maximum number of colors corresponding to the value
            of the biBitCount member for the compression mode specified by biCompression.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biClrImportant">
            <summary>
            The number of color indexes that are required for displaying the bitmap. If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="M:Native.BITMAPINFOHEADER.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.BITMAPINFOHEADER"/>.</summary>
            <param name="binaryReader">Reader to read from.</param>
        </member>
        <member name="M:Native.BITMAPINFOHEADER.Write(System.IO.BinaryWriter)">
            <summary>Writes this <see cref="T:Native.BITMAPINFOHEADER"/> to a stream.</summary>
            <param name="binaryWriter">Writer to write to.</param>
        </member>
        <member name="T:Native.BITMAPFILEHEADER">
            <summary>
            The BITMAPFILEHEADER structure contains information about the type, size, and layout of a file that contains a DIB.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd183374.aspx</seealso>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.BMP_MAGIC_COOKIE">
            <summary>"BM".</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfType">
            <summary>The file type; must be <see cref="F:Native.BITMAPFILEHEADER.BMP_MAGIC_COOKIE"/>.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfSize">
            <summary>The size, in bytes, of the bitmap file.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfReserved1">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfReserved2">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfOffBits">
            <summary>
            The offset, in bytes, from the beginning of the BITMAPFILEHEADER structure to the bitmap bits.
            </summary>
        </member>
        <member name="M:Native.BITMAPFILEHEADER.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.BITMAPFILEHEADER"/>.</summary>
            <param name="binaryReader">Reader to read from.</param>
        </member>
        <member name="M:Native.BITMAPFILEHEADER.Write(System.IO.BinaryWriter)">
            <summary>Writes this <see cref="T:Native.BITMAPFILEHEADER"/> to a stream.</summary>
            <param name="binaryWriter">Writer to write to.</param>
        </member>
        <member name="T:Native.RGBQUAD">
            <summary>
            The RGBQUAD structure describes a color consisting of relative intensities of red, green, and blue.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/vstudio/dd162938.aspx</seealso>
        </member>
        <member name="F:Native.RGBQUAD.rgbBlue">
            <summary>The intensity of blue in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbGreen">
            <summary>The intensity of green in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbRed">
            <summary>The intensity of red in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbReserved">
            <summary>This member is reserved and must be zero.</summary>
        </member>
        <member name="M:Native.RGBQUAD.#ctor(System.IO.Stream)">
            <summary>Creates <see cref="T:Native.RGBQUAD"/>.</summary>
            <param name="stream">Stream to read from.</param>
        </member>
        <member name="M:Native.RGBQUAD.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.RGBQUAD"/>.</summary>
            <param name="br">Reader to read from.</param>
        </member>
        <member name="T:Native.BITMAPINFO256">
            <summary>BITMAPINFOHEADER + palette.</summary>
        </member>
        <member name="F:Native.BITMAPINFO256.bmiHeader">
            <summary><see cref="T:Native.BITMAPINFOHEADER"/>.</summary>
        </member>
        <member name="F:Native.BITMAPINFO256.bmiColors">
            <summary>Palette.</summary>
        </member>
        <member name="T:Native.BLENDFUNCTION">
            <summary>
            The <see cref="T:Native.BLENDFUNCTION"/> structure controls blending by specifying the blending
            functions for source and destination bitmaps.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.BlendOp">
            <summary>
            The source blend operation. Currently, the only source and destination
            blend operation that has been defined is AC_SRC_OVER.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.BlendFlags">
            <summary>Must be zero.</summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.SourceConstantAlpha">
            <summary>
            Specifies an alpha transparency value to be used on the entire source bitmap.
            The SourceConstantAlpha value is combined with any per-pixel alpha values in the source bitmap.
            If you set SourceConstantAlpha to 0, it is assumed that your image is transparent.
            Set the SourceConstantAlpha value to 255 (opaque) when you only want to use per-pixel alpha values.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.AlphaFormat">
            <summary>
            This member controls the way the source and destination bitmaps are interpreted.
            </summary>
        </member>
        <member name="T:Native.POINT">
            <summary>The POINT structure defines the x- and y- coordinates of a point.</summary>
        </member>
        <member name="F:Native.POINT.X">
            <summary>The x-coordinate of the point.</summary>
        </member>
        <member name="F:Native.POINT.Y">
            <summary>The y-coordinate of the point.</summary>
        </member>
        <member name="M:Native.POINT.#ctor(System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.POINT"/>.</summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
        </member>
        <member name="T:Native.SIZE">
            <summary>The SIZE structure specifies the width and height of a rectangle.</summary>
        </member>
        <member name="F:Native.SIZE.Width">
            <summary>Specifies the rectangle's width. The units depend on which function uses this.</summary>
        </member>
        <member name="F:Native.SIZE.Height">
            <summary>Specifies the rectangle's height. The units depend on which function uses this.</summary>
        </member>
        <member name="M:Native.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.SIZE"/> struct.</summary>
            <param name="width">Specifies the rectangle's width.</param>
            <param name="height">Specifies the rectangle's height.</param>
        </member>
        <member name="T:Native.RECT">
            <summary>The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Left">
            <summary>The x-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Top">
            <summary>The y-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Right">
            <summary>The x-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Bottom">
            <summary>The y-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="M:Native.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.RECT"/>.</summary>
            <param name="left">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the rectangle.</param>
        </member>
        <member name="T:Native.PAINTSTRUCT">
            <summary>
            The PAINTSTRUCT structure contains information for an application.
            This information can be used to paint the client area of a window owned by that application.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.hdc">
            <summary>A handle to the display DC to be used for painting.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fErase">
            <summary>
            Indicates whether the background must be erased.
            This value is nonzero if the application should erase the background.
            The application is responsible for erasing the background if a window class is created without a background brush.
            For more information, see the description of the hbrBackground member of the WNDCLASS structure.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.rcPaint">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the upper left and lower right corners of the rectangle in
            which the painting is requested, in device units relative to the upper-left corner of the client area.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fRestore">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fIncUpdate">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved1">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved2">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved3">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved4">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved5">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved6">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved7">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved8">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="T:Native.WINDOWPOS">
            <summary>Contains information about the size and position of a window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.hwnd">
            <summary>A handle to the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.hwndInsertAfter">
            <summary>
            The position of the window in Z order (front-to-back position).
            This member can be a handle to the window behind which this window is placed,
            or can be one of the special values listed with the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WINDOWPOS.x">
            <summary>The position of the left edge of the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.y">
            <summary>The position of the top edge of the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.cx">
            <summary>The window width, in pixels.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.cy">
            <summary>The window height, in pixels.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.flags">
            <summary>
            The window position. This member can be one or more of the following values:
            <see cref="M:SWP.DRAWFRAME"/>
            <see cref="M:SWP.FRAMECHANGED"/>
            <see cref="M:SWP.HIDEWINDOW"/>
            <see cref="M:SWP.NOACTIVATE"/>
            <see cref="M:SWP.NOCOPYBITS"/>
            <see cref="M:SWP.NOMOVE"/>
            <see cref="M:SWP.NOOWNERZORDER"/>
            <see cref="M:SWP.NOREDRAW"/>
            <see cref="M:SWP.NOREPOSITION"/>
            <see cref="M:SWP.NOSENDCHANGING"/>
            <see cref="M:SWP.NOSIZE"/>
            <see cref="M:SWP.NOZORDER"/>
            <see cref="M:SWP.SHOWWINDOW"/>
            </summary>
        </member>
        <member name="T:Native.DWM_BLURBEHIND">
            <summary>
            Specifies Desktop Window Manager (DWM) blur-behind properties.
            Used by the <see cref="M:Dwmapi.DwmEnableBlurBehindWindow"/> function.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.dwFlags">
            <summary>
            A bitwise combination of <see cref="T:DWM_BB"/> constant values that indicates
            which of the members of this structure have been set.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.fEnable">
            <summary>
            <c>true</c> to register the window handle to DWM blur behind;
            <c>false</c> to unregister the window handle from DWM blur behind.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.hRgnBlur">
            <summary>
            The region within the client area where the blur behind will be applied.
            A <c>IntPtr.Zero</c> value will apply the blur behind the entire client area.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.fTransitionOnMaximized">
            <summary>
            <c>true</c> if the window's colorization should transition to match the maximized windows;
            otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="T:Native.FLASHWINFO">
            <summary>Contains the flash status for a window and the number of times the system should flash the window.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.hwnd">
            <summary>A handle to the window to be flashed. The window can be either opened or minimized.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.dwFlags">
            <summary>The flash status.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.uCount">
            <summary>The number of times to flash the window.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.dwTimeout">
            <summary>
            The rate at which the window is to be flashed, in milliseconds.
            If dwTimeout is zero, the function uses the default cursor blink rate.</summary>
        </member>
        <member name="T:Native.MINMAXINFO">
            <summary>
            Contains information about a window's maximized size and position 
            and its minimum and maximum tracking size.
            </summary>
            <remarks>
            For systems with multiple monitors, the ptMaxSize and ptMaxPosition members describe the maximized size
            and position of the window on the primary monitor, even if the window ultimately maximizes onto a secondary monitor.
            In that case, the window manager adjusts these values to compensate for differences between the primary monitor and the
            monitor that displays the window. Thus, if the user leaves ptMaxSize untouched, a window on a monitor larger than the
            primary monitor maximizes to the size of the larger monitor.
            </remarks>
        </member>
        <member name="F:Native.MINMAXINFO.ptReserved">
            <summary>Reserved; do not use.</summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxSize">
            <summary>
            The maximized width (x member) and the maximized height (y member) of the window.
            For top-level windows, this value is based on the width of the primary monitor.
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxPosition">
            <summary>
            The position of the left side of the maximized window (x member) and the position
            of the top of the maximized window (y member). For top-level windows, this value
            is based on the position of the primary monitor.
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMinTrackSize">
            <summary>
            The minimum tracking width (x member) and the minimum tracking height (y member) of the window.
            This value can be obtained programmatically from the system metrics SM_CXMINTRACK and SM_CYMINTRACK (see the GetSystemMetrics function).
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxTrackSize">
            <summary>
            The maximum tracking width (x member) and the maximum tracking height (y member) of the window.
            This value is based on the size of the virtual screen and can be obtained programmatically from the system metrics SM_CXMAXTRACK and SM_CYMAXTRACK (see the GetSystemMetrics function).
            </summary>
        </member>
        <member name="T:Native.MONITORINFO">
            <summary>Contains information about a display monitor.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd145065%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="F:Native.MONITORINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Native.MONITORINFO.rcMonitor">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the display monitor rectangle, expressed in
            virtual-screen coordinates. Note that if the monitor is not the primary display monitor,
            some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:Native.MONITORINFO.rcWork">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the work area rectangle of the display monitor,
            expressed in virtual-screen coordinates. Note that if the monitor is not the primary display
            monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:Native.MONITORINFO.dwFlags">
            <summary>
            A set of flags that represent attributes of the display monitor.
            </summary>
        </member>
    </members>
</doc>
